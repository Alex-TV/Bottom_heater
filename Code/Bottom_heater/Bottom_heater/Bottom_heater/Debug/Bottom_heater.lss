
Bottom_heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00003ba6  00003c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011b  0080019a  0080019a  00003cd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003cd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b40  00000000  00000000  00003d48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001588c  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cf7  00000000  00000000  0001a114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005d88  00000000  00000000  0001de0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002364  00000000  00000000  00023b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004653  00000000  00000000  00025ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b783  00000000  00000000  0002a54b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac0  00000000  00000000  00035cce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__vector_1>
       8:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__vector_2>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__vector_24>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	96 0e       	add	r9, r22
      c4:	f0 13       	cpse	r31, r16

000000c6 <__ctors_end>:
      c6:	a2 0e       	add	r10, r18

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e6 ea       	ldi	r30, 0xA6	; 166
      dc:	fb e3       	ldi	r31, 0x3B	; 59
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	aa 39       	cpi	r26, 0x9A	; 154
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	aa e9       	ldi	r26, 0x9A	; 154
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a5 3b       	cpi	r26, 0xB5	; 181
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <main>
     114:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_Z14TimerInterruptv>:
}

//----------------------ОБРАБОТЧИКИ ПРЕРЫВАНИЙ--------------------------
void TimerInterrupt() // прерывания таймера срабатывают каждые 40 мкс
{
	_tic++;                       // счетчик
     11c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_tic>
     120:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <_tic+0x1>
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_tic+0x1>
     12a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_tic>
	for(int i=0; i< sizeof(_items); i++)
	{	 if (_tic <= _itemValues[i]) continue;	    // если настало время включать ток
     12e:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_itemValues>
     132:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <_itemValues+0x1>
     136:	60 81       	ld	r22, Z
     138:	71 81       	ldd	r23, Z+1	; 0x01
     13a:	68 17       	cp	r22, r24
     13c:	79 07       	cpc	r23, r25
     13e:	34 f4       	brge	.+12     	; 0x14c <_Z14TimerInterruptv+0x30>
		_items[i].UpdateValue(_itemValues[i]);
     140:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_items>
     144:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <_items+0x1>
     148:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN10DimmerItem11UpdateValueEi>
//----------------------ОБРАБОТЧИКИ ПРЕРЫВАНИЙ--------------------------
void TimerInterrupt() // прерывания таймера срабатывают каждые 40 мкс
{
	_tic++;                       // счетчик
	for(int i=0; i< sizeof(_items); i++)
	{	 if (_tic <= _itemValues[i]) continue;	    // если настало время включать ток
     14c:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_itemValues>
     150:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <_itemValues+0x1>
     154:	62 81       	ldd	r22, Z+2	; 0x02
     156:	73 81       	ldd	r23, Z+3	; 0x03
     158:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_tic>
     15c:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <_tic+0x1>
     160:	68 17       	cp	r22, r24
     162:	79 07       	cpc	r23, r25
     164:	3c f4       	brge	.+14     	; 0x174 <_Z14TimerInterruptv+0x58>
		_items[i].UpdateValue(_itemValues[i]);
     166:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_items>
     16a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <_items+0x1>
     16e:	02 96       	adiw	r24, 0x02	; 2
     170:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_ZN10DimmerItem11UpdateValueEi>
     174:	08 95       	ret

00000176 <_Z10DetectDownv>:
	attachInterrupt(0, DetectDown, RISING);  // перенастроить прерывание
}

void  DetectDown() // обработка внешнего прерывания на пересекание нуля сверху
{
	_tic = 0;                                 // обнулить счетчик
     176:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_tic+0x1>
     17a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <_tic>
	_timer->disable(_timerId);// остановить таймерd
     17e:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <__data_end>
     182:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <__data_end+0x1>
     186:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_timer>
     18a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_timer+0x1>
     18e:	0e 94 4b 11 	call	0x2296	; 0x2296 <_ZN11SimpleTimer7disableEi>
	//StopTimer1();
	for(int i=0; i< sizeof(_items); i++)
	{
		_items[i].UpdateValue(0);  // вырубить ток
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_items>
     19a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <_items+0x1>
     19e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN10DimmerItem11UpdateValueEi>
     1a2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_items>
     1a6:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <_items+0x1>
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	02 96       	adiw	r24, 0x02	; 2
     1b0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN10DimmerItem11UpdateValueEi>
	}
	//digitalWrite(dimPin, 0);
	attachInterrupt(0, DetectUp, FALLING);   // перенастроить прерывание
     1b4:	42 e0       	ldi	r20, 0x02	; 2
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	61 ee       	ldi	r22, 0xE1	; 225
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <attachInterrupt>

000001c2 <_Z8DetectUpv>:
	//digitalWrite(dimPin, 1);   // врубить ток
}

void DetectUp()	 // обработка внешнего прерывания на пересекание нуля снизу
{
	_tic = 0;                                 // обнулить счетчик
     1c2:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_tic+0x1>
     1c6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <_tic>
	_timer->enable(_timerId);
     1ca:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <__data_end>
     1ce:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <__data_end+0x1>
     1d2:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_timer>
     1d6:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_timer+0x1>
     1da:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN11SimpleTimer6enableEi>
	_timer->restartTimer(_timerId); // перезапустить таймер
     1de:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <__data_end>
     1e2:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <__data_end+0x1>
     1e6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_timer>
     1ea:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_timer+0x1>
     1ee:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN11SimpleTimer12restartTimerEi>
	//ResumeTimer1();
	attachInterrupt(0, DetectDown, RISING);  // перенастроить прерывание
     1f2:	43 e0       	ldi	r20, 0x03	; 3
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	6b eb       	ldi	r22, 0xBB	; 187
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <attachInterrupt>

00000200 <_ZN6DimmerC1EiP10DimmerItemPi>:
SimpleTimer* _timer;
int* _itemValues;
int _tic;
int _timerId;
// default constructor
Dimmer::Dimmer(int zeroPin, DimmerItem* items, int* itemValues)
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	86 2f       	mov	r24, r22
{
	_items = items;
     206:	50 93 a3 01 	sts	0x01A3, r21	; 0x8001a3 <_items+0x1>
     20a:	40 93 a2 01 	sts	0x01A2, r20	; 0x8001a2 <_items>
	_itemValues = itemValues;
     20e:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <_itemValues+0x1>
     212:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <_itemValues>
	_zeroPin = zeroPin;
     216:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <_zeroPin>
     21a:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <_zeroPin+0x1>
	pinMode(zeroPin, INPUT);				// настраиваем порт на вход для отслеживания прохождения сигнала через ноль
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	0e 94 44 19 	call	0x3288	; 0x3288 <pinMode>
	attachInterrupt(0, DetectUp, FALLING);  // настроить срабатывание прерывания interrupt0 на pin 2 на низкий уровень
     224:	42 e0       	ldi	r20, 0x02	; 2
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	61 ee       	ldi	r22, 0xE1	; 225
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <attachInterrupt>
	_timer = new SimpleTimer();
     232:	8c ea       	ldi	r24, 0xAC	; 172
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     23a:	ec 01       	movw	r28, r24
     23c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN11SimpleTimerC1Ev>
     240:	d0 93 a1 01 	sts	0x01A1, r29	; 0x8001a1 <_timer+0x1>
     244:	c0 93 a0 01 	sts	0x01A0, r28	; 0x8001a0 <_timer>
	_timerId = _timer->setInterval(timerInterval,TimerInterrupt);
     248:	2e e8       	ldi	r18, 0x8E	; 142
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	48 e2       	ldi	r20, 0x28	; 40
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	ce 01       	movw	r24, r28
     256:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN11SimpleTimer11setIntervalElPFvvE>
     25a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
     25e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
	_timer->disable(_timerId);
     262:	bc 01       	movw	r22, r24
     264:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_timer>
     268:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_timer+0x1>
	//StartTimer1(TimerInterrupt, 40);        // время для одного разряда ШИМ
	//StopTimer1();                           // остановить таймер
} //Dimmer
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
	_zeroPin = zeroPin;
	pinMode(zeroPin, INPUT);				// настраиваем порт на вход для отслеживания прохождения сигнала через ноль
	attachInterrupt(0, DetectUp, FALLING);  // настроить срабатывание прерывания interrupt0 на pin 2 на низкий уровень
	_timer = new SimpleTimer();
	_timerId = _timer->setInterval(timerInterval,TimerInterrupt);
	_timer->disable(_timerId);
     270:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <_ZN11SimpleTimer7disableEi>

00000274 <_ZN6Dimmer15UpdateItemValueEPi>:
} //Dimmer


void Dimmer::UpdateItemValue(int* itemValues)
{
	_itemValues = itemValues;
     274:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <_itemValues+0x1>
     278:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <_itemValues>
     27c:	08 95       	ret

0000027e <_ZN6Dimmer6UpdateEv>:
}

void Dimmer::Update()
{
	_timer->run();
     27e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_timer>
     282:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_timer+0x1>
     286:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <_ZN11SimpleTimer3runEv>

0000028a <_ZN10DimmerItemC1Ei>:
*/
#include <Arduino.h>
#include "DimmerItem.h"

// default constructor
DimmerItem::DimmerItem(int dimPin)
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	ec 01       	movw	r28, r24
     290:	86 2f       	mov	r24, r22
{
	_dimPin = dimPin;
     292:	68 83       	st	Y, r22
     294:	79 83       	std	Y+1, r23	; 0x01
	pinMode(_dimPin, OUTPUT);
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	0e 94 44 19 	call	0x3288	; 0x3288 <pinMode>
	digitalWrite(_dimPin, 0);
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	88 81       	ld	r24, Y
} //DimmerItem
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
// default constructor
DimmerItem::DimmerItem(int dimPin)
{
	_dimPin = dimPin;
	pinMode(_dimPin, OUTPUT);
	digitalWrite(_dimPin, 0);
     2a4:	0c 94 80 19 	jmp	0x3300	; 0x3300 <digitalWrite>

000002a8 <_ZN10DimmerItem11UpdateValueEi>:
} //DimmerItem

void DimmerItem::UpdateValue(int dimVal)
{
	digitalWrite(_dimPin, 255-dimVal);
     2a8:	60 95       	com	r22
     2aa:	fc 01       	movw	r30, r24
     2ac:	80 81       	ld	r24, Z
     2ae:	0c 94 80 19 	jmp	0x3300	; 0x3300 <digitalWrite>

000002b2 <_ZN10DimmerItemD1Ev>:
}
// default destructor
DimmerItem::~DimmerItem()
     2b2:	08 95       	ret

000002b4 <_ZN11Display16x2C1EP17LiquidCrystal_I2C>:
Display16x2:: Display16x2(LiquidCrystal_I2C* lcd)
{
	//_lcd = new LiquidCrystal_I2C(adress, col, row);
	//_lcd->begin();
	//_lcd->clear();
	_lcd = lcd;
     2b4:	fc 01       	movw	r30, r24
     2b6:	71 83       	std	Z+1, r23	; 0x01
     2b8:	60 83       	st	Z, r22
     2ba:	08 95       	ret

000002bc <_ZN11Display16x215PrintLineValuesEiiii>:
}

void Display16x2::PrintLineValues(int line, int setTemp, int curTemp, int power)
{
     2bc:	af 92       	push	r10
     2be:	bf 92       	push	r11
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	ec 01       	movw	r28, r24
     2d2:	7b 01       	movw	r14, r22
     2d4:	5a 01       	movw	r10, r20
     2d6:	69 01       	movw	r12, r18
	_lcd->setCursor(1,line);
     2d8:	46 2f       	mov	r20, r22
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	88 81       	ld	r24, Y
     2de:	99 81       	ldd	r25, Y+1	; 0x01
     2e0:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(line==0?"U:":"D:");
     2e4:	e1 14       	cp	r14, r1
     2e6:	f1 04       	cpc	r15, r1
     2e8:	19 f0       	breq	.+6      	; 0x2f0 <_ZN11Display16x215PrintLineValuesEiiii+0x34>
     2ea:	67 e1       	ldi	r22, 0x17	; 23
     2ec:	71 e0       	ldi	r23, 0x01	; 1
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_ZN11Display16x215PrintLineValuesEiiii+0x38>
     2f0:	64 e1       	ldi	r22, 0x14	; 20
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	88 81       	ld	r24, Y
     2f6:	99 81       	ldd	r25, Y+1	; 0x01
     2f8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEPKc>
	_lcd->setCursor(3,line);
     2fc:	4e 2d       	mov	r20, r14
     2fe:	63 e0       	ldi	r22, 0x03	; 3
     300:	88 81       	ld	r24, Y
     302:	99 81       	ldd	r25, Y+1	; 0x01
     304:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(setTemp);
     308:	4a e0       	ldi	r20, 0x0A	; 10
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	b5 01       	movw	r22, r10
     30e:	88 81       	ld	r24, Y
     310:	99 81       	ldd	r25, Y+1	; 0x01
     312:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN5Print5printEii>
	_lcd->setCursor(6,line);
     316:	4e 2d       	mov	r20, r14
     318:	66 e0       	ldi	r22, 0x06	; 6
     31a:	88 81       	ld	r24, Y
     31c:	99 81       	ldd	r25, Y+1	; 0x01
     31e:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print("C-");
     322:	6a e1       	ldi	r22, 0x1A	; 26
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	88 81       	ld	r24, Y
     328:	99 81       	ldd	r25, Y+1	; 0x01
     32a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEPKc>
	_lcd->setCursor(8,line);
     32e:	4e 2d       	mov	r20, r14
     330:	68 e0       	ldi	r22, 0x08	; 8
     332:	88 81       	ld	r24, Y
     334:	99 81       	ldd	r25, Y+1	; 0x01
     336:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(curTemp);
     33a:	4a e0       	ldi	r20, 0x0A	; 10
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	b6 01       	movw	r22, r12
     340:	88 81       	ld	r24, Y
     342:	99 81       	ldd	r25, Y+1	; 0x01
     344:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN5Print5printEii>
	_lcd->setCursor(11,line);
     348:	4e 2d       	mov	r20, r14
     34a:	6b e0       	ldi	r22, 0x0B	; 11
     34c:	88 81       	ld	r24, Y
     34e:	99 81       	ldd	r25, Y+1	; 0x01
     350:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print("C ");
     354:	6d e1       	ldi	r22, 0x1D	; 29
     356:	71 e0       	ldi	r23, 0x01	; 1
     358:	88 81       	ld	r24, Y
     35a:	99 81       	ldd	r25, Y+1	; 0x01
     35c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEPKc>
	_lcd->setCursor(13,line);
     360:	4e 2d       	mov	r20, r14
     362:	6d e0       	ldi	r22, 0x0D	; 13
     364:	88 81       	ld	r24, Y
     366:	99 81       	ldd	r25, Y+1	; 0x01
     368:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(power);
     36c:	4a e0       	ldi	r20, 0x0A	; 10
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	b8 01       	movw	r22, r16
     372:	88 81       	ld	r24, Y
     374:	99 81       	ldd	r25, Y+1	; 0x01
     376:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN5Print5printEii>
	_lcd->setCursor(15,line);
     37a:	4e 2d       	mov	r20, r14
     37c:	6f e0       	ldi	r22, 0x0F	; 15
     37e:	88 81       	ld	r24, Y
     380:	99 81       	ldd	r25, Y+1	; 0x01
     382:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print("%");
     386:	60 e2       	ldi	r22, 0x20	; 32
     388:	71 e0       	ldi	r23, 0x01	; 1
     38a:	88 81       	ld	r24, Y
     38c:	99 81       	ldd	r25, Y+1	; 0x01
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
	_lcd->setCursor(11,line);
	_lcd->print("C ");
	_lcd->setCursor(13,line);
	_lcd->print(power);
	_lcd->setCursor(15,line);
	_lcd->print("%");
     3a2:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <_ZN5Print5printEPKc>

000003a6 <_ZN11Display16x212PrintEditIntEi>:
}

void Display16x2::PrintEditInt(int val)
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	ec 01       	movw	r28, r24
     3b0:	8b 01       	movw	r16, r22
	_lcd->setCursor(0,1);
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	88 81       	ld	r24, Y
     3b8:	99 81       	ldd	r25, Y+1	; 0x01
     3ba:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(val);
     3be:	4a e0       	ldi	r20, 0x0A	; 10
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	b8 01       	movw	r22, r16
     3c4:	88 81       	ld	r24, Y
     3c6:	99 81       	ldd	r25, Y+1	; 0x01
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
}

void Display16x2::PrintEditInt(int val)
{
	_lcd->setCursor(0,1);
	_lcd->print(val);
     3d0:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <_ZN5Print5printEii>

000003d4 <_ZN11Display16x213PrintEditBoolEb>:
}

void  Display16x2::PrintEditBool(bool val)
{
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
     3dc:	16 2f       	mov	r17, r22
	_lcd->setCursor(0,1);
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	88 81       	ld	r24, Y
     3e4:	99 81       	ldd	r25, Y+1	; 0x01
     3e6:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(val?"TRUE":"FALSE");
     3ea:	11 11       	cpse	r17, r1
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <_ZN11Display16x213PrintEditBoolEb+0x20>
     3ee:	67 e2       	ldi	r22, 0x27	; 39
     3f0:	71 e0       	ldi	r23, 0x01	; 1
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <_ZN11Display16x213PrintEditBoolEb+0x24>
     3f4:	62 e2       	ldi	r22, 0x22	; 34
     3f6:	71 e0       	ldi	r23, 0x01	; 1
     3f8:	88 81       	ld	r24, Y
     3fa:	99 81       	ldd	r25, Y+1	; 0x01
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
}

void  Display16x2::PrintEditBool(bool val)
{
	_lcd->setCursor(0,1);
	_lcd->print(val?"TRUE":"FALSE");
     402:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <_ZN5Print5printEPKc>

00000406 <_ZN11Display16x29ClearEditEi>:
}

void Display16x2::ClearEdit(int line)
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	ec 01       	movw	r28, r24
	_lcd->setCursor(0,0);
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	88 81       	ld	r24, Y
     412:	99 81       	ldd	r25, Y+1	; 0x01
     414:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(" ");
     418:	66 e8       	ldi	r22, 0x86	; 134
     41a:	71 e0       	ldi	r23, 0x01	; 1
     41c:	88 81       	ld	r24, Y
     41e:	99 81       	ldd	r25, Y+1	; 0x01
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
}

void Display16x2::ClearEdit(int line)
{
	_lcd->setCursor(0,0);
	_lcd->print(" ");
     424:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <_ZN5Print5printEPKc>

00000428 <_ZN11Display16x25ClearEv>:
}
void  Display16x2::Clear()
{
	_lcd->clear();
     428:	fc 01       	movw	r30, r24
     42a:	80 81       	ld	r24, Z
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	0c 94 34 09 	jmp	0x1268	; 0x1268 <_ZN17LiquidCrystal_I2C5clearEv>

00000432 <_Z12MenuCallbacki>:
	val = max(val,minTemp);
}

void MenuCallback(int index)
{
	_curMenuIndex = index;
     432:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <_curMenuIndex+0x1>
     436:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_curMenuIndex>
     43a:	08 95       	ret

0000043c <_Z21TimerHeatingInterruptv>:
	EncoderButtonUpdate();
}

void TimerHeatingInterrupt()
{
	_timerHeating->restartTimer(_timerHeatingId);
     43c:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <_timerHeatingId>
     440:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <_timerHeatingId+0x1>
     444:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_timerHeating>
     448:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_timerHeating+0x1>
     44c:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN11SimpleTimer12restartTimerEi>
	if(_heaterOn && _regulationDown)
     450:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_heaterOn>
     454:	88 23       	and	r24, r24
     456:	d1 f0       	breq	.+52     	; 0x48c <_Z21TimerHeatingInterruptv+0x50>
     458:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_regulationDown>
     45c:	88 23       	and	r24, r24
     45e:	b1 f0       	breq	.+44     	; 0x48c <_Z21TimerHeatingInterruptv+0x50>
	{
		if(abs(_pidOldDownVal-_pidDownVal)<10)
     460:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <_pidDownVal>
     464:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <_pidDownVal+0x1>
     468:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_pidOldDownVal>
     46c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <_pidOldDownVal+0x1>
     470:	82 1b       	sub	r24, r18
     472:	93 0b       	sbc	r25, r19
     474:	09 96       	adiw	r24, 0x09	; 9
     476:	43 97       	sbiw	r24, 0x13	; 19
     478:	28 f4       	brcc	.+10     	; 0x484 <_Z21TimerHeatingInterruptv+0x48>
		{
			_regulationDown = false;
     47a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_regulationDown>
			_regulationUp = true;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_regulationUp>
		}
		_pidOldDownVal = _pidDownVal;
     484:	30 93 a9 01 	sts	0x01A9, r19	; 0x8001a9 <_pidOldDownVal+0x1>
     488:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <_pidOldDownVal>
     48c:	08 95       	ret

0000048e <_Z13HeatingUpdatev>:
	}
}

void HeatingUpdate()
{
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <_Z13HeatingUpdatev+0x6>
     494:	00 d0       	rcall	.+0      	; 0x496 <_Z13HeatingUpdatev+0x8>
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
	if(_heaterOn)
     49a:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <_heaterOn>
     49e:	88 23       	and	r24, r24
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <_Z13HeatingUpdatev+0x16>
     4a2:	55 c0       	rjmp	.+170    	; 0x54e <_Z13HeatingUpdatev+0xc0>
	{
		_tempDown = _thermometer->Read();
     4a4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_thermometer>
     4a8:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <_thermometer+0x1>
     4ac:	0e 94 14 14 	call	0x2828	; 0x2828 <_ZN11Thermometer4ReadEv>
     4b0:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <_tempDown>
     4b4:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <_tempDown+0x1>
     4b8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <_tempDown+0x2>
     4bc:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <_tempDown+0x3>
		_tempUp = 0;
     4c0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <_tempUp>
     4c4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <_tempUp+0x1>
     4c8:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <_tempUp+0x2>
     4cc:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <_tempUp+0x3>

		if(_regulationUp)
     4d0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_regulationUp>
     4d4:	88 23       	and	r24, r24
     4d6:	a9 f0       	breq	.+42     	; 0x502 <_Z13HeatingUpdatev+0x74>
		{
			_pidUp->run();
     4d8:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <_pidUp>
     4dc:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <_pidUp+0x1>
     4e0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN7AutoPID3runEv>
			_pidUpVal = _pidUp->atSetPoint(1);
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	60 e8       	ldi	r22, 0x80	; 128
     4ea:	7f e3       	ldi	r23, 0x3F	; 63
     4ec:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <_pidUp>
     4f0:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <_pidUp+0x1>
     4f4:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN7AutoPID10atSetPointEd>
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <_pidUpVal+0x1>
     4fe:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <_pidUpVal>
		}
		
		if(_regulationDown)
     502:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_regulationDown>
     506:	88 23       	and	r24, r24
     508:	a9 f0       	breq	.+42     	; 0x534 <_Z13HeatingUpdatev+0xa6>
		{
			_pidDown->run();
     50a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_pidDown>
     50e:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <_pidDown+0x1>
     512:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN7AutoPID3runEv>
			_pidDownVal = _pidDown->atSetPoint(1);
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	60 e8       	ldi	r22, 0x80	; 128
     51c:	7f e3       	ldi	r23, 0x3F	; 63
     51e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_pidDown>
     522:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <_pidDown+0x1>
     526:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN7AutoPID10atSetPointEd>
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <_pidDownVal+0x1>
     530:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_pidDownVal>
		}

		int itemValues[2]{_pidUpVal,_pidDownVal};
     534:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_pidUpVal>
     538:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <_pidUpVal+0x1>
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_pidDownVal>
     544:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <_pidDownVal+0x1>
     548:	9c 83       	std	Y+4, r25	; 0x04
     54a:	8b 83       	std	Y+3, r24	; 0x03
     54c:	04 c0       	rjmp	.+8      	; 0x556 <_Z13HeatingUpdatev+0xc8>
		_dimmer->UpdateItemValue(itemValues);
	}
	else
	{
		int itemValues[2]{0,0};
     54e:	1a 82       	std	Y+2, r1	; 0x02
     550:	19 82       	std	Y+1, r1	; 0x01
     552:	1c 82       	std	Y+4, r1	; 0x04
     554:	1b 82       	std	Y+3, r1	; 0x03
		_dimmer->UpdateItemValue(itemValues);
     556:	be 01       	movw	r22, r28
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <_dimmer>
     560:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <_dimmer+0x1>
     564:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN6Dimmer15UpdateItemValueEPi>
	}
}
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <_Z13DisplayUpdatev>:

void DisplayUpdate()
{
     576:	8f 92       	push	r8
     578:	9f 92       	push	r9
     57a:	af 92       	push	r10
     57c:	bf 92       	push	r11
     57e:	cf 92       	push	r12
     580:	df 92       	push	r13
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
	if(_menuActive) return;
     58a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_menuActive>
     58e:	81 11       	cpse	r24, r1
     590:	86 c0       	rjmp	.+268    	; 0x69e <_Z13DisplayUpdatev+0x128>
	_display->ClearEdit(0);
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_display>
     59a:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_display+0x1>
     59e:	0e 94 03 02 	call	0x406	; 0x406 <_ZN11Display16x29ClearEditEi>
	int powerUp = (int)((float)_pidUpVal/(float)OUTPUT_MAX*(float)100);
	_display->PrintLineValues(0,_setTempUp,_tempUp,powerUp);
     5a2:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <_pidUpVal>
     5a6:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <_pidUpVal+0x1>
     5aa:	07 2e       	mov	r0, r23
     5ac:	00 0c       	add	r0, r0
     5ae:	88 0b       	sbc	r24, r24
     5b0:	99 0b       	sbc	r25, r25
     5b2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__floatsisf>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	4f e7       	ldi	r20, 0x7F	; 127
     5bc:	53 e4       	ldi	r21, 0x43	; 67
     5be:	0e 94 8b 14 	call	0x2916	; 0x2916 <__divsf3>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	48 ec       	ldi	r20, 0xC8	; 200
     5c8:	52 e4       	ldi	r21, 0x42	; 66
     5ca:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__mulsf3>
     5ce:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     5d2:	4b 01       	movw	r8, r22
     5d4:	5c 01       	movw	r10, r24
     5d6:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <_tempUp>
     5da:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <_tempUp+0x1>
     5de:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_tempUp+0x2>
     5e2:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_tempUp+0x3>
     5e6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     5ea:	6b 01       	movw	r12, r22
     5ec:	7c 01       	movw	r14, r24
     5ee:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <_setTempUp>
     5f2:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <_setTempUp+0x1>
     5f6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_setTempUp+0x2>
     5fa:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_setTempUp+0x3>
     5fe:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     602:	84 01       	movw	r16, r8
     604:	96 01       	movw	r18, r12
     606:	ab 01       	movw	r20, r22
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_display>
     610:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_display+0x1>
     614:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN11Display16x215PrintLineValuesEiiii>
	_display->ClearEdit(1);
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_display>
     620:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_display+0x1>
     624:	0e 94 03 02 	call	0x406	; 0x406 <_ZN11Display16x29ClearEditEi>
	int powerDown = (int)((float)_pidDownVal/(float)OUTPUT_MAX*(float)100);
	_display->PrintLineValues(1,_setTempDown,_tempDown,powerDown);
     628:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <_pidDownVal>
     62c:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <_pidDownVal+0x1>
     630:	07 2e       	mov	r0, r23
     632:	00 0c       	add	r0, r0
     634:	88 0b       	sbc	r24, r24
     636:	99 0b       	sbc	r25, r25
     638:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__floatsisf>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	4f e7       	ldi	r20, 0x7F	; 127
     642:	53 e4       	ldi	r21, 0x43	; 67
     644:	0e 94 8b 14 	call	0x2916	; 0x2916 <__divsf3>
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	48 ec       	ldi	r20, 0xC8	; 200
     64e:	52 e4       	ldi	r21, 0x42	; 66
     650:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__mulsf3>
     654:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     658:	4b 01       	movw	r8, r22
     65a:	5c 01       	movw	r10, r24
     65c:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <_tempDown>
     660:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <_tempDown+0x1>
     664:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <_tempDown+0x2>
     668:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <_tempDown+0x3>
     66c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     670:	6b 01       	movw	r12, r22
     672:	7c 01       	movw	r14, r24
     674:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <_setTempDown>
     678:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <_setTempDown+0x1>
     67c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_setTempDown+0x2>
     680:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <_setTempDown+0x3>
     684:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     688:	84 01       	movw	r16, r8
     68a:	96 01       	movw	r18, r12
     68c:	ab 01       	movw	r20, r22
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_display>
     696:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_display+0x1>
     69a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN11Display16x215PrintLineValuesEiiii>
}
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	ff 90       	pop	r15
     6a4:	ef 90       	pop	r14
     6a6:	df 90       	pop	r13
     6a8:	cf 90       	pop	r12
     6aa:	bf 90       	pop	r11
     6ac:	af 90       	pop	r10
     6ae:	9f 90       	pop	r9
     6b0:	8f 90       	pop	r8
     6b2:	08 95       	ret

000006b4 <_Z20SaveSettingsInEepromv>:
		}
	}
}

void SaveSettingsInEeprom()
{
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <eeprom_read_byte>
     6c2:	18 2f       	mov	r17, r24
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <eeprom_read_byte>
	int saveUpPid = EEPROM.read(memoryUpTempAdress);
	int saveDownPid = EEPROM.read(memoryDownTempAdress);
     6cc:	c8 2f       	mov	r28, r24
     6ce:	d0 e0       	ldi	r29, 0x00	; 0
	if(saveUpPid != _pidUpVal)
     6d0:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <_pidUpVal>
     6d4:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <_pidUpVal+0x1>
     6d8:	81 2f       	mov	r24, r17
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	86 17       	cp	r24, r22
     6de:	97 07       	cpc	r25, r23
     6e0:	21 f0       	breq	.+8      	; 0x6ea <_Z20SaveSettingsInEepromv+0x36>
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <eeprom_write_byte>
	{
		EEPROM.write(memoryUpTempAdress,_pidUpVal);
	}
	if(saveDownPid != _pidDownVal)
     6ea:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <_pidDownVal>
     6ee:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <_pidDownVal+0x1>
     6f2:	c6 17       	cp	r28, r22
     6f4:	d7 07       	cpc	r29, r23
     6f6:	39 f0       	breq	.+14     	; 0x706 <_Z20SaveSettingsInEepromv+0x52>
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
	{
		EEPROM.write(memoryDownTempAdress,_pidDownVal);
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <eeprom_write_byte>
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	08 95       	ret

0000070e <_Z19EncoderButtonUpdatev>:

void EncoderButtonUpdate()
{
	if(!digitalRead(encoderButtonPin))
     70e:	8a e0       	ldi	r24, 0x0A	; 10
     710:	0e 94 af 19 	call	0x335e	; 0x335e <digitalRead>
     714:	89 2b       	or	r24, r25
     716:	69 f4       	brne	.+26     	; 0x732 <_Z19EncoderButtonUpdatev+0x24>
	{
		if(_menuActive)
     718:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_menuActive>
     71c:	88 23       	and	r24, r24
     71e:	31 f0       	breq	.+12     	; 0x72c <_Z19EncoderButtonUpdatev+0x1e>
		{
			_menu->goNext();
     720:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_menu>
     724:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_menu+0x1>
     728:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <_ZN4Menu6goNextEv>
		}
		else
		{
			_menuActive = true;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_menuActive>
     732:	08 95       	ret

00000734 <_Z13UpdateTempValRdi>:
		}
	}
}

void UpdateTempVal(double& val, int delta)
{
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
	val = val + delta;
     742:	07 2e       	mov	r0, r23
     744:	00 0c       	add	r0, r0
     746:	88 0b       	sbc	r24, r24
     748:	99 0b       	sbc	r25, r25
     74a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__floatsisf>
     74e:	28 81       	ld	r18, Y
     750:	39 81       	ldd	r19, Y+1	; 0x01
     752:	4a 81       	ldd	r20, Y+2	; 0x02
     754:	5b 81       	ldd	r21, Y+3	; 0x03
     756:	0e 94 1a 14 	call	0x2834	; 0x2834 <__addsf3>
     75a:	6b 01       	movw	r12, r22
     75c:	7c 01       	movw	r14, r24
	val = min(val,maxTemp);
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	41 ee       	ldi	r20, 0xE1	; 225
     764:	53 e4       	ldi	r21, 0x43	; 67
     766:	0e 94 86 14 	call	0x290c	; 0x290c <__cmpsf2>
     76a:	87 ff       	sbrs	r24, 7
     76c:	0d c0       	rjmp	.+26     	; 0x788 <_Z13UpdateTempValRdi+0x54>
	val = max(val,minTemp);
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	a9 01       	movw	r20, r18
     774:	c7 01       	movw	r24, r14
     776:	b6 01       	movw	r22, r12
     778:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__gesf2>
     77c:	18 16       	cp	r1, r24
     77e:	54 f0       	brlt	.+20     	; 0x794 <_Z13UpdateTempValRdi+0x60>
     780:	c1 2c       	mov	r12, r1
     782:	d1 2c       	mov	r13, r1
     784:	76 01       	movw	r14, r12
     786:	06 c0       	rjmp	.+12     	; 0x794 <_Z13UpdateTempValRdi+0x60>
}

void UpdateTempVal(double& val, int delta)
{
	val = val + delta;
	val = min(val,maxTemp);
     788:	c1 2c       	mov	r12, r1
     78a:	d1 2c       	mov	r13, r1
     78c:	81 ee       	ldi	r24, 0xE1	; 225
     78e:	e8 2e       	mov	r14, r24
     790:	83 e4       	ldi	r24, 0x43	; 67
     792:	f8 2e       	mov	r15, r24
	val = max(val,minTemp);
     794:	c8 82       	st	Y, r12
     796:	d9 82       	std	Y+1, r13	; 0x01
     798:	ea 82       	std	Y+2, r14	; 0x02
     79a:	fb 82       	std	Y+3, r15	; 0x03
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	08 95       	ret

000007aa <_Z13EncoderUpdatev>:
	int powerDown = (int)((float)_pidDownVal/(float)OUTPUT_MAX*(float)100);
	_display->PrintLineValues(1,_setTempDown,_tempDown,powerDown);
}

void EncoderUpdate()
{
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
	int enc = _encoder->readEncoder();
     7ae:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_encoder>
     7b2:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <_encoder+0x1>
     7b6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN13RotaryEncoder11readEncoderEv>
     7ba:	ec 01       	movw	r28, r24
	int changevalue = 1;

	if(_menuActive)
     7bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_menuActive>
     7c0:	88 23       	and	r24, r24
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <_Z13EncoderUpdatev+0x1c>
     7c4:	63 c0       	rjmp	.+198    	; 0x88c <_Z13EncoderUpdatev+0xe2>
	{
		//РґРµР№СЃС‚РІРёРµ СЃ РїСѓРЅРєС‚Р°РјРё РјРµРЅСЋ
		if(_curMenuIndex==1)//РІРєР»СЋС‡РёС‚СЊ/РІС‹РєР»СЋС‡РёС‚СЊ РЅР°РіСЂРµРІР°С‚РµР»СЏ
     7c6:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_curMenuIndex>
     7ca:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <_curMenuIndex+0x1>
     7ce:	81 30       	cpi	r24, 0x01	; 1
     7d0:	91 05       	cpc	r25, r1
     7d2:	89 f4       	brne	.+34     	; 0x7f6 <_Z13EncoderUpdatev+0x4c>
		{
			if(enc != 0)
     7d4:	20 97       	sbiw	r28, 0x00	; 0
     7d6:	31 f0       	breq	.+12     	; 0x7e4 <_Z13EncoderUpdatev+0x3a>
			{
				_heaterOn = !_heaterOn;
     7d8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <_heaterOn>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	89 27       	eor	r24, r25
     7e0:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <_heaterOn>
			}
			_display->PrintEditBool(_heaterOn);
     7e4:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <_heaterOn>
     7e8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_display>
     7ec:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_display+0x1>
     7f0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_ZN11Display16x213PrintEditBoolEb>
     7f4:	36 c0       	rjmp	.+108    	; 0x862 <_Z13EncoderUpdatev+0xb8>

		}
		else if(_curMenuIndex ==2)//РЅР°СЃС‚СЂРѕР№РєР° С‚РµРјРїРµСЂР°С‚СѓСЂС‹ РІРµСЂС…РЅРµРіРѕ РЅР°РіСЂРµРІР°С‚РµР»СЏ
     7f6:	82 30       	cpi	r24, 0x02	; 2
     7f8:	91 05       	cpc	r25, r1
     7fa:	21 f4       	brne	.+8      	; 0x804 <_Z13EncoderUpdatev+0x5a>
		{
			UpdateTempVal(_tempUp, enc);
     7fc:	be 01       	movw	r22, r28
     7fe:	86 ec       	ldi	r24, 0xC6	; 198
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	06 c0       	rjmp	.+12     	; 0x810 <_Z13EncoderUpdatev+0x66>
			_display->PrintEditInt(_tempUp);
		}
		else if(_curMenuIndex==3)//РЅР°СЃС‚СЂРѕР№РєР° С‚РµРјРїРµСЂР°С‚СѓСЂС‹ РЅРёР¶РЅРµРіРѕ РЅР°РіСЂРµРІР°С‚РµР»СЏ
     804:	83 30       	cpi	r24, 0x03	; 3
     806:	91 05       	cpc	r25, r1
     808:	b1 f4       	brne	.+44     	; 0x836 <_Z13EncoderUpdatev+0x8c>
		{
			UpdateTempVal(_tempDown, enc);
     80a:	be 01       	movw	r22, r28
     80c:	82 ec       	ldi	r24, 0xC2	; 194
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 9a 03 	call	0x734	; 0x734 <_Z13UpdateTempValRdi>
			_display->PrintEditInt(_tempUp);
     814:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <_tempUp>
     818:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <_tempUp+0x1>
     81c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_tempUp+0x2>
     820:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_tempUp+0x3>
     824:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     828:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_display>
     82c:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_display+0x1>
     830:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN11Display16x212PrintEditIntEi>
     834:	16 c0       	rjmp	.+44     	; 0x862 <_Z13EncoderUpdatev+0xb8>
		}
		else if (_curMenuIndex == 4)//РІС‹С…РѕРґ РёР· РјРµРЅСЋ РЅР°СЃС‚СЂРѕРµРє
     836:	04 97       	sbiw	r24, 0x04	; 4
     838:	a1 f4       	brne	.+40     	; 0x862 <_Z13EncoderUpdatev+0xb8>
		{
			_curMenuIndex=0;
     83a:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <_curMenuIndex+0x1>
     83e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <_curMenuIndex>
			_menu->goBack();
     842:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_menu>
     846:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_menu+0x1>
     84a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_ZN4Menu6goBackEv>
			_display->Clear();
     84e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_display>
     852:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_display+0x1>
     856:	0e 94 14 02 	call	0x428	; 0x428 <_ZN11Display16x25ClearEv>
			_menuActive = false;
     85a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_menuActive>
			SaveSettingsInEeprom();
     85e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z20SaveSettingsInEepromv>
		}
		//Р»РёСЃС‚Р°РЅРёРµ РјРµРЅСЋ
		if(enc > 0)
     862:	1c 16       	cp	r1, r28
     864:	1d 06       	cpc	r1, r29
     866:	44 f4       	brge	.+16     	; 0x878 <_Z13EncoderUpdatev+0xce>
		{
			_menu->goUp();
     868:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_menu>
     86c:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_menu+0x1>
		else if(enc<0)
		{
			_menu->goDown();
		}
	}
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
			SaveSettingsInEeprom();
		}
		//Р»РёСЃС‚Р°РЅРёРµ РјРµРЅСЋ
		if(enc > 0)
		{
			_menu->goUp();
     874:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <_ZN4Menu4goUpEv>
		}
		else if(enc<0)
     878:	cd 2b       	or	r28, r29
     87a:	41 f0       	breq	.+16     	; 0x88c <_Z13EncoderUpdatev+0xe2>
		{
			_menu->goDown();
     87c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_menu>
     880:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_menu+0x1>
		}
	}
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
		{
			_menu->goUp();
		}
		else if(enc<0)
		{
			_menu->goDown();
     888:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <_ZN4Menu6goDownEv>
		}
	}
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <loop>:
	_timerHeatingId =_timerHeating->setInterval(timerInterval,TimerHeatingInterrupt);
}

void loop()
{
	_timerHeating->run();
     892:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_timerHeating>
     896:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_timerHeating+0x1>
     89a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN11SimpleTimer3runEv>
	_dimmer->Update();
     89e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <_dimmer>
     8a2:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <_dimmer+0x1>
     8a6:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN6Dimmer6UpdateEv>
	HeatingUpdate();
     8aa:	0e 94 47 02 	call	0x48e	; 0x48e <_Z13HeatingUpdatev>
	DisplayUpdate();
     8ae:	0e 94 bb 02 	call	0x576	; 0x576 <_Z13DisplayUpdatev>
	EncoderUpdate();
     8b2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z13EncoderUpdatev>
	EncoderButtonUpdate();
     8b6:	0c 94 87 03 	jmp	0x70e	; 0x70e <_Z19EncoderButtonUpdatev>

000008ba <_Z15CreateMenuItemsv>:
{
	_curMenuIndex = index;
}

MItm* CreateMenuItems()
{
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	ca 56       	subi	r28, 0x6A	; 106
     8cc:	d1 09       	sbc	r29, r1
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
		MItm("SETTINGS",0,0), //СЌС‚РѕС‚ РїСѓРЅРєС‚ СЏРІР»СЏРµС‚СЃСЏ Р·Р°РіРѕР»РѕРІРєРѕРј РїРѕРґРјРµРЅСЋ СЃ РёРЅРґРµРєСЃРѕРј 0 (С‚Рѕ РµСЃС‚СЊ РіР»Р°РІРЅРѕРіРѕ РјРµРЅСЋ)
		MItm("ON/OFF",1), //РїСѓРЅРєС‚ РіР»Р°РІРЅРѕРіРѕ РјРµРЅСЋ, РєРѕС‚РѕСЂС‹Р№ РїСЂРё РІС‹Р±РѕСЂРµ РїРµСЂРµС…РѕРґРёС‚ РЅР° РїРѕРґРјРµРЅСЋ СЃ РёРЅРґРµРєСЃРѕРј 1
		MItm("Set temp in up",2), //СЃ РёРЅРґРµРєСЃРѕРј 2
		MItm("Set temp in down",3), //Рё СЃ РёРЅРґРµРєСЃРѕРј 3 СЃРѕРѕС‚РІРµС‚СЃС‚РІРµРЅРЅРѕ
		MItm(" <<Exit",4) //РІРѕС‚ С‚Р°Рє РјРѕР¶РЅРѕ СЃРѕР·РґР°РІР°С‚СЊ РєРЅРѕРїРєСѓ "РќР°Р·Р°Рґ"
	};
     8d8:	6d e2       	ldi	r22, 0x2D	; 45
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	ce 01       	movw	r24, r28
     8de:	8b 59       	subi	r24, 0x9B	; 155
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	be 01       	movw	r22, r28
     8f0:	6b 59       	subi	r22, 0x9B	; 155
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	7c 01       	movw	r14, r24
     8fa:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN4MItmC1E6Stringii>
     8fe:	ce 01       	movw	r24, r28
     900:	8b 59       	subi	r24, 0x9B	; 155
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
     908:	66 e3       	ldi	r22, 0x36	; 54
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	ce 01       	movw	r24, r28
     90e:	8b 59       	subi	r24, 0x9B	; 155
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
     916:	2f ef       	ldi	r18, 0xFF	; 255
     918:	3f ef       	ldi	r19, 0xFF	; 255
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	be 01       	movw	r22, r28
     920:	6b 59       	subi	r22, 0x9B	; 155
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	ce 01       	movw	r24, r28
     926:	45 96       	adiw	r24, 0x15	; 21
     928:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN4MItmC1E6Stringii>
     92c:	ce 01       	movw	r24, r28
     92e:	8b 59       	subi	r24, 0x9B	; 155
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
     936:	6d e3       	ldi	r22, 0x3D	; 61
     938:	71 e0       	ldi	r23, 0x01	; 1
     93a:	ce 01       	movw	r24, r28
     93c:	8b 59       	subi	r24, 0x9B	; 155
     93e:	9f 4f       	sbci	r25, 0xFF	; 255
     940:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
     944:	2f ef       	ldi	r18, 0xFF	; 255
     946:	3f ef       	ldi	r19, 0xFF	; 255
     948:	42 e0       	ldi	r20, 0x02	; 2
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	be 01       	movw	r22, r28
     94e:	6b 59       	subi	r22, 0x9B	; 155
     950:	7f 4f       	sbci	r23, 0xFF	; 255
     952:	ce 01       	movw	r24, r28
     954:	89 96       	adiw	r24, 0x29	; 41
     956:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN4MItmC1E6Stringii>
     95a:	ce 01       	movw	r24, r28
     95c:	8b 59       	subi	r24, 0x9B	; 155
     95e:	9f 4f       	sbci	r25, 0xFF	; 255
     960:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
     964:	6c e4       	ldi	r22, 0x4C	; 76
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	ce 01       	movw	r24, r28
     96a:	8b 59       	subi	r24, 0x9B	; 155
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
     972:	2f ef       	ldi	r18, 0xFF	; 255
     974:	3f ef       	ldi	r19, 0xFF	; 255
     976:	43 e0       	ldi	r20, 0x03	; 3
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	be 01       	movw	r22, r28
     97c:	6b 59       	subi	r22, 0x9B	; 155
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	ce 01       	movw	r24, r28
     982:	cd 96       	adiw	r24, 0x3d	; 61
     984:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN4MItmC1E6Stringii>
     988:	ce 01       	movw	r24, r28
     98a:	8b 59       	subi	r24, 0x9B	; 155
     98c:	9f 4f       	sbci	r25, 0xFF	; 255
     98e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
     992:	6d e5       	ldi	r22, 0x5D	; 93
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	ce 01       	movw	r24, r28
     998:	8b 59       	subi	r24, 0x9B	; 155
     99a:	9f 4f       	sbci	r25, 0xFF	; 255
     99c:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
     9a0:	2f ef       	ldi	r18, 0xFF	; 255
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	44 e0       	ldi	r20, 0x04	; 4
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	be 01       	movw	r22, r28
     9aa:	6b 59       	subi	r22, 0x9B	; 155
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	ce 01       	movw	r24, r28
     9b0:	8f 5a       	subi	r24, 0xAF	; 175
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN4MItmC1E6Stringii>
     9b8:	ce 01       	movw	r24, r28
     9ba:	8b 59       	subi	r24, 0x9B	; 155
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
     9c2:	8e 01       	movw	r16, r28
     9c4:	0b 59       	subi	r16, 0x9B	; 155
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	04 51       	subi	r16, 0x14	; 20
     9ca:	11 09       	sbc	r17, r1
#ifndef MYMENU_H
#define MYMENU_H

#include <LiquidCrystal_I2C.h>

class MItm
     9cc:	c8 01       	movw	r24, r16
     9ce:	0e 96       	adiw	r24, 0x0e	; 14
     9d0:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
     9d4:	c8 01       	movw	r24, r16
     9d6:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
     9da:	e0 16       	cp	r14, r16
     9dc:	f1 06       	cpc	r15, r17
     9de:	a1 f7       	brne	.-24     	; 0x9c8 <__stack+0xc9>
	return items;
}
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	c6 59       	subi	r28, 0x96	; 150
     9e6:	df 4f       	sbci	r29, 0xFF	; 255
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	08 95       	ret

00000a00 <setup>:
int _pidUpVal =0;
int _pidDownVal =0;
int _pidOldDownVal =0;
int _timerHeatingId;

void setup() {
     a00:	2f 92       	push	r2
     a02:	3f 92       	push	r3
     a04:	4f 92       	push	r4
     a06:	5f 92       	push	r5
     a08:	6f 92       	push	r6
     a0a:	7f 92       	push	r7
     a0c:	8f 92       	push	r8
     a0e:	9f 92       	push	r9
     a10:	af 92       	push	r10
     a12:	bf 92       	push	r11
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	2e 97       	sbiw	r28, 0x0e	; 14
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёРјРёСЂР°
	DimmerItem dimmerItems[2]{DimmerItem(dimUpPin),DimmerItem(dimDownPin)};
     a34:	63 e0       	ldi	r22, 0x03	; 3
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	ce 01       	movw	r24, r28
     a3a:	0b 96       	adiw	r24, 0x0b	; 11
     a3c:	0e 94 45 01 	call	0x28a	; 0x28a <_ZN10DimmerItemC1Ei>
     a40:	64 e0       	ldi	r22, 0x04	; 4
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	ce 01       	movw	r24, r28
     a46:	0d 96       	adiw	r24, 0x0d	; 13
     a48:	0e 94 45 01 	call	0x28a	; 0x28a <_ZN10DimmerItemC1Ei>
	int itemValues[2]{0,0};
     a4c:	18 86       	std	Y+8, r1	; 0x08
     a4e:	1f 82       	std	Y+7, r1	; 0x07
     a50:	1a 86       	std	Y+10, r1	; 0x0a
     a52:	19 86       	std	Y+9, r1	; 0x09
	_dimmer = new Dimmer(zeroPin,dimmerItems,itemValues);
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     a5c:	4c 01       	movw	r8, r24
     a5e:	9e 01       	movw	r18, r28
     a60:	29 5f       	subi	r18, 0xF9	; 249
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
     a64:	ae 01       	movw	r20, r28
     a66:	45 5f       	subi	r20, 0xF5	; 245
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	0e 94 00 01 	call	0x200	; 0x200 <_ZN6DimmerC1EiP10DimmerItemPi>
     a72:	90 92 db 01 	sts	0x01DB, r9	; 0x8001db <_dimmer+0x1>
     a76:	80 92 da 01 	sts	0x01DA, r8	; 0x8001da <_dimmer>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ С‚РµСЂРјРѕРјРµС‚СЂР°
	_thermometer = new Thermometer(therPinDO,therPinCS,therPinCLK);
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     a82:	4c 01       	movw	r8, r24
     a84:	27 e0       	ldi	r18, 0x07	; 7
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	46 e0       	ldi	r20, 0x06	; 6
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	65 e0       	ldi	r22, 0x05	; 5
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_ZN11ThermometerC1Eiii>
     a94:	90 92 d9 01 	sts	0x01D9, r9	; 0x8001d9 <_thermometer+0x1>
     a98:	80 92 d8 01 	sts	0x01D8, r8	; 0x8001d8 <_thermometer>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёСЃРїР»РµСЏ
	_lcd = new LiquidCrystal_I2C(0x27, numColsLcd, numRowsLcd);
     a9c:	8c e0       	ldi	r24, 0x0C	; 12
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     aa4:	4c 01       	movw	r8, r24
     aa6:	00 e0       	ldi	r16, 0x00	; 0
     aa8:	22 e0       	ldi	r18, 0x02	; 2
     aaa:	40 e1       	ldi	r20, 0x10	; 16
     aac:	67 e2       	ldi	r22, 0x27	; 39
     aae:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN17LiquidCrystal_I2CC1Ehhhh>
     ab2:	90 92 cf 01 	sts	0x01CF, r9	; 0x8001cf <_lcd+0x1>
     ab6:	80 92 ce 01 	sts	0x01CE, r8	; 0x8001ce <_lcd>
	_lcd->begin();
     aba:	c4 01       	movw	r24, r8
     abc:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN17LiquidCrystal_I2C5beginEv>
	_lcd->clear();
     ac0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_lcd>
     ac4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <_lcd+0x1>
     ac8:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN17LiquidCrystal_I2C5clearEv>
	_display = new Display16x2(_lcd);
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     ad4:	4c 01       	movw	r8, r24
     ad6:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <_lcd>
     ada:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <_lcd+0x1>
     ade:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN11Display16x2C1EP17LiquidCrystal_I2C>
     ae2:	90 92 d7 01 	sts	0x01D7, r9	; 0x8001d7 <_display+0x1>
     ae6:	80 92 d6 01 	sts	0x01D6, r8	; 0x8001d6 <_display>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ СЌРЅРєРѕРґРµСЂР°
	_encoder = new RotaryEncoder(encoderAPin,encoderBPin,5,6,1000);
     aea:	86 e1       	ldi	r24, 0x16	; 22
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     af2:	4c 01       	movw	r8, r24
     af4:	88 ee       	ldi	r24, 0xE8	; 232
     af6:	e8 2e       	mov	r14, r24
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	f8 2e       	mov	r15, r24
     afc:	06 e0       	ldi	r16, 0x06	; 6
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	25 e0       	ldi	r18, 0x05	; 5
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	4c e0       	ldi	r20, 0x0C	; 12
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	6b e0       	ldi	r22, 0x0B	; 11
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	c4 01       	movw	r24, r8
     b0e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN13RotaryEncoderC1Eiiiii>
     b12:	90 92 d1 01 	sts	0x01D1, r9	; 0x8001d1 <_encoder+0x1>
     b16:	80 92 d0 01 	sts	0x01D0, r8	; 0x8001d0 <_encoder>
	pinMode(encoderButtonPin, INPUT);
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	0e 94 44 19 	call	0x3288	; 0x3288 <pinMode>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ pid
	_pidUp = new AutoPID(&_tempUp, &_setTempUp, &_outputUpVal, OUTPUT_MIN, OUTPUT_MAX, KP, KI, KD);
     b22:	83 e3       	ldi	r24, 0x33	; 51
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     b2a:	4c 01       	movw	r8, r24
     b2c:	1f 92       	push	r1
     b2e:	1f 92       	push	r1
     b30:	1f 92       	push	r1
     b32:	1f 92       	push	r1
     b34:	99 e3       	ldi	r25, 0x39	; 57
     b36:	49 2e       	mov	r4, r25
     b38:	4f 92       	push	r4
     b3a:	2d e9       	ldi	r18, 0x9D	; 157
     b3c:	52 2e       	mov	r5, r18
     b3e:	5f 92       	push	r5
     b40:	39 e4       	ldi	r19, 0x49	; 73
     b42:	63 2e       	mov	r6, r19
     b44:	6f 92       	push	r6
     b46:	42 e5       	ldi	r20, 0x52	; 82
     b48:	74 2e       	mov	r7, r20
     b4a:	7f 92       	push	r7
     b4c:	5d e3       	ldi	r21, 0x3D	; 61
     b4e:	35 2e       	mov	r3, r21
     b50:	3f 92       	push	r3
     b52:	65 ef       	ldi	r22, 0xF5	; 245
     b54:	26 2e       	mov	r2, r22
     b56:	2f 92       	push	r2
     b58:	82 ec       	ldi	r24, 0xC2	; 194
     b5a:	8f 93       	push	r24
     b5c:	9f e8       	ldi	r25, 0x8F	; 143
     b5e:	9f 93       	push	r25
     b60:	a1 2c       	mov	r10, r1
     b62:	b1 2c       	mov	r11, r1
     b64:	7f e7       	ldi	r23, 0x7F	; 127
     b66:	c7 2e       	mov	r12, r23
     b68:	73 e4       	ldi	r23, 0x43	; 67
     b6a:	d7 2e       	mov	r13, r23
     b6c:	e1 2c       	mov	r14, r1
     b6e:	f1 2c       	mov	r15, r1
     b70:	87 01       	movw	r16, r14
     b72:	26 eb       	ldi	r18, 0xB6	; 182
     b74:	31 e0       	ldi	r19, 0x01	; 1
     b76:	4e eb       	ldi	r20, 0xBE	; 190
     b78:	51 e0       	ldi	r21, 0x01	; 1
     b7a:	66 ec       	ldi	r22, 0xC6	; 198
     b7c:	71 e0       	ldi	r23, 0x01	; 1
     b7e:	c4 01       	movw	r24, r8
     b80:	0e 94 91 06 	call	0xd22	; 0xd22 <_ZN7AutoPIDC1EPdS0_S0_ddddd>
     b84:	90 92 d5 01 	sts	0x01D5, r9	; 0x8001d5 <_pidUp+0x1>
     b88:	80 92 d4 01 	sts	0x01D4, r8	; 0x8001d4 <_pidUp>
	// РµСЃР»Рё С‚РµРјРїРµСЂР°С‚СѓСЂР° РІС‹С€Рµ 4 РіСЂР°РґСѓСЃРѕРІ РЅРёР¶Рµ РёР»Рё РІС‹С€Рµ Р·Р°РґР°РЅРЅРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, OUTPUT Р±СѓРґРµС‚ СѓСЃС‚Р°РЅРѕРІР»РµРЅ РЅР° РјРёРЅ РёР»Рё РјР°РєСЃ СЃРѕРѕС‚РІРµС‚СЃС‚РІРµРЅРЅРѕ
	_pidUp->setBangBang(4);
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	60 e8       	ldi	r22, 0x80	; 128
     b92:	70 e4       	ldi	r23, 0x40	; 64
     b94:	c4 01       	movw	r24, r8
     b96:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN7AutoPID11setBangBangEd>
	//set PID update interval to 4000ms
	_pidUp->setTimeStep(4000);
     b9a:	40 ea       	ldi	r20, 0xA0	; 160
     b9c:	5f e0       	ldi	r21, 0x0F	; 15
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <_pidUp>
     ba6:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <_pidUp+0x1>
     baa:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN7AutoPID11setTimeStepEm>
	
	_pidDown = new AutoPID(&_tempDown, &_setTempDown, &_outputDownVal, OUTPUT_MIN, OUTPUT_MAX, KP, KI, KD);
     bae:	83 e3       	ldi	r24, 0x33	; 51
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     bb6:	4c 01       	movw	r8, r24
     bb8:	1f 92       	push	r1
     bba:	1f 92       	push	r1
     bbc:	1f 92       	push	r1
     bbe:	1f 92       	push	r1
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	3f 92       	push	r3
     bca:	2f 92       	push	r2
     bcc:	82 ec       	ldi	r24, 0xC2	; 194
     bce:	8f 93       	push	r24
     bd0:	9f e8       	ldi	r25, 0x8F	; 143
     bd2:	9f 93       	push	r25
     bd4:	22 eb       	ldi	r18, 0xB2	; 178
     bd6:	31 e0       	ldi	r19, 0x01	; 1
     bd8:	4a eb       	ldi	r20, 0xBA	; 186
     bda:	51 e0       	ldi	r21, 0x01	; 1
     bdc:	62 ec       	ldi	r22, 0xC2	; 194
     bde:	71 e0       	ldi	r23, 0x01	; 1
     be0:	c4 01       	movw	r24, r8
     be2:	0e 94 91 06 	call	0xd22	; 0xd22 <_ZN7AutoPIDC1EPdS0_S0_ddddd>
     be6:	90 92 d3 01 	sts	0x01D3, r9	; 0x8001d3 <_pidDown+0x1>
     bea:	80 92 d2 01 	sts	0x01D2, r8	; 0x8001d2 <_pidDown>
	// РµСЃР»Рё С‚РµРјРїРµСЂР°С‚СѓСЂР° РІС‹С€Рµ 4 РіСЂР°РґСѓСЃРѕРІ РЅРёР¶Рµ РёР»Рё РІС‹С€Рµ Р·Р°РґР°РЅРЅРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, OUTPUT Р±СѓРґРµС‚ СѓСЃС‚Р°РЅРѕРІР»РµРЅ РЅР° РјРёРЅ РёР»Рё РјР°РєСЃ СЃРѕРѕС‚РІРµС‚СЃС‚РІРµРЅРЅРѕ
	_pidDown->setBangBang(4);
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	60 e8       	ldi	r22, 0x80	; 128
     bf4:	70 e4       	ldi	r23, 0x40	; 64
     bf6:	c4 01       	movw	r24, r8
     bf8:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN7AutoPID11setBangBangEd>
	//set PID update interval to 4000ms
	_pidDown->setTimeStep(4000);
     bfc:	40 ea       	ldi	r20, 0xA0	; 160
     bfe:	5f e0       	ldi	r21, 0x0F	; 15
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <_pidDown>
     c08:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <_pidDown+0x1>
     c0c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN7AutoPID11setTimeStepEm>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <eeprom_read_byte>
	
	//СѓС‚СЃР°РЅРѕРІР»РµРЅР°СЏ С‚РµРјРїРµСЂР°С‚СѓСЂР°	(РґРѕР»Р¶РЅРѕ СѓСЃС‚Р°РЅР°РІР»РёРІР°С‚СЃСЏ РІ РЅР°СЃС‚СЂРѕР№РєР°С…)
	_setTempUp = EEPROM.read(memoryUpTempAdress);
     c18:	68 2f       	mov	r22, r24
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__floatunsisf>
     c24:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <_setTempUp>
     c28:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <_setTempUp+0x1>
     c2c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <_setTempUp+0x2>
     c30:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <_setTempUp+0x3>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <eeprom_read_byte>
	_setTempDown = EEPROM.read(memoryDownTempAdress);
     c3c:	68 2f       	mov	r22, r24
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__floatunsisf>
     c48:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <_setTempDown>
     c4c:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <_setTempDown+0x1>
     c50:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_setTempDown+0x2>
     c54:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <_setTempDown+0x3>

	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РјРµРЅСЋ
	_menu = new Menu(CreateMenuItems(), menuItems, _lcd, MenuCallback,numRowsLcd, ">");
     c58:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z15CreateMenuItemsv>
     c5c:	3c 01       	movw	r6, r24
     c5e:	65 e6       	ldi	r22, 0x65	; 101
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
     c6a:	86 e2       	ldi	r24, 0x26	; 38
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     c72:	4c 01       	movw	r8, r24
     c74:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <_lcd>
     c78:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <_lcd+0x1>
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	6c 01       	movw	r12, r24
     c82:	e2 e0       	ldi	r30, 0x02	; 2
     c84:	ee 2e       	mov	r14, r30
     c86:	f1 2c       	mov	r15, r1
     c88:	09 e1       	ldi	r16, 0x19	; 25
     c8a:	12 e0       	ldi	r17, 0x02	; 2
     c8c:	45 e0       	ldi	r20, 0x05	; 5
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	b3 01       	movw	r22, r6
     c92:	c4 01       	movw	r24, r8
     c94:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String>
     c98:	90 92 cd 01 	sts	0x01CD, r9	; 0x8001cd <_menu+0x1>
     c9c:	80 92 cc 01 	sts	0x01CC, r8	; 0x8001cc <_menu>
     ca0:	c6 01       	movw	r24, r12
     ca2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>

	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ С‚Р°Р№РјРµСЂР°
	_timerHeating = new SimpleTimer();
     ca6:	8c ea       	ldi	r24, 0xAC	; 172
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
     cae:	4c 01       	movw	r8, r24
     cb0:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN11SimpleTimerC1Ev>
     cb4:	90 92 cb 01 	sts	0x01CB, r9	; 0x8001cb <_timerHeating+0x1>
     cb8:	80 92 ca 01 	sts	0x01CA, r8	; 0x8001ca <_timerHeating>
	_timerHeatingId =_timerHeating->setInterval(timerInterval,TimerHeatingInterrupt);
     cbc:	2e e1       	ldi	r18, 0x1E	; 30
     cbe:	32 e0       	ldi	r19, 0x02	; 2
     cc0:	40 ea       	ldi	r20, 0xA0	; 160
     cc2:	56 e8       	ldi	r21, 0x86	; 134
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	c4 01       	movw	r24, r8
     cca:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN11SimpleTimer11setIntervalElPFvvE>
     cce:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <_timerHeatingId+0x1>
     cd2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <_timerHeatingId>
int _pidOldDownVal =0;
int _timerHeatingId;

void setup() {
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёРјРёСЂР°
	DimmerItem dimmerItems[2]{DimmerItem(dimUpPin),DimmerItem(dimDownPin)};
     cd6:	ce 01       	movw	r24, r28
     cd8:	0d 96       	adiw	r24, 0x0d	; 13
     cda:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN10DimmerItemD1Ev>
     cde:	ce 01       	movw	r24, r28
     ce0:	0b 96       	adiw	r24, 0x0b	; 11
     ce2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN10DimmerItemD1Ev>
	_menu = new Menu(CreateMenuItems(), menuItems, _lcd, MenuCallback,numRowsLcd, ">");

	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ С‚Р°Р№РјРµСЂР°
	_timerHeating = new SimpleTimer();
	_timerHeatingId =_timerHeating->setInterval(timerInterval,TimerHeatingInterrupt);
}
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	2e 96       	adiw	r28, 0x0e	; 14
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	af 90       	pop	r10
     d10:	9f 90       	pop	r9
     d12:	8f 90       	pop	r8
     d14:	7f 90       	pop	r7
     d16:	6f 90       	pop	r6
     d18:	5f 90       	pop	r5
     d1a:	4f 90       	pop	r4
     d1c:	3f 90       	pop	r3
     d1e:	2f 90       	pop	r2
     d20:	08 95       	ret

00000d22 <_ZN7AutoPIDC1EPdS0_S0_ddddd>:
}//void AutoPID::setBangBang

void AutoPID::setOutputRange(double outputMin, double outputMax) {
  _outputMin = outputMin;
  _outputMax = outputMax;
}//void AutoPID::setOutputRange
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	fc 01       	movw	r30, r24
     d3c:	75 8f       	std	Z+29, r23	; 0x1d
     d3e:	64 8f       	std	Z+28, r22	; 0x1c
     d40:	57 8f       	std	Z+31, r21	; 0x1f
     d42:	46 8f       	std	Z+30, r20	; 0x1e
     d44:	31 a3       	std	Z+33, r19	; 0x21
     d46:	20 a3       	std	Z+32, r18	; 0x20
     d48:	e2 a2       	std	Z+34, r14	; 0x22
     d4a:	f3 a2       	std	Z+35, r15	; 0x23
     d4c:	04 a3       	std	Z+36, r16	; 0x24
     d4e:	15 a3       	std	Z+37, r17	; 0x25
     d50:	a6 a2       	std	Z+38, r10	; 0x26
     d52:	b7 a2       	std	Z+39, r11	; 0x27
     d54:	c0 a6       	std	Z+40, r12	; 0x28
     d56:	d1 a6       	std	Z+41, r13	; 0x29
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	af 85       	ldd	r26, Y+15	; 0x0f
     d5e:	b8 89       	ldd	r27, Y+16	; 0x10
     d60:	80 83       	st	Z, r24
     d62:	91 83       	std	Z+1, r25	; 0x01
     d64:	a2 83       	std	Z+2, r26	; 0x02
     d66:	b3 83       	std	Z+3, r27	; 0x03
     d68:	89 89       	ldd	r24, Y+17	; 0x11
     d6a:	9a 89       	ldd	r25, Y+18	; 0x12
     d6c:	ab 89       	ldd	r26, Y+19	; 0x13
     d6e:	bc 89       	ldd	r27, Y+20	; 0x14
     d70:	84 83       	std	Z+4, r24	; 0x04
     d72:	95 83       	std	Z+5, r25	; 0x05
     d74:	a6 83       	std	Z+6, r26	; 0x06
     d76:	b7 83       	std	Z+7, r27	; 0x07
     d78:	8d 89       	ldd	r24, Y+21	; 0x15
     d7a:	9e 89       	ldd	r25, Y+22	; 0x16
     d7c:	af 89       	ldd	r26, Y+23	; 0x17
     d7e:	b8 8d       	ldd	r27, Y+24	; 0x18
     d80:	80 87       	std	Z+8, r24	; 0x08
     d82:	91 87       	std	Z+9, r25	; 0x09
     d84:	a2 87       	std	Z+10, r26	; 0x0a
     d86:	b3 87       	std	Z+11, r27	; 0x0b
     d88:	88 ee       	ldi	r24, 0xE8	; 232
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	82 a7       	std	Z+42, r24	; 0x2a
     d92:	93 a7       	std	Z+43, r25	; 0x2b
     d94:	a4 a7       	std	Z+44, r26	; 0x2c
     d96:	b5 a7       	std	Z+45, r27	; 0x2d
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	bf 90       	pop	r11
     daa:	af 90       	pop	r10
     dac:	08 95       	ret

00000dae <_ZN7AutoPID11setBangBangEd>:
     dae:	fc 01       	movw	r30, r24
     db0:	44 8b       	std	Z+20, r20	; 0x14
     db2:	55 8b       	std	Z+21, r21	; 0x15
     db4:	66 8b       	std	Z+22, r22	; 0x16
     db6:	77 8b       	std	Z+23, r23	; 0x17
     db8:	40 8f       	std	Z+24, r20	; 0x18
     dba:	51 8f       	std	Z+25, r21	; 0x19
     dbc:	62 8f       	std	Z+26, r22	; 0x1a
     dbe:	73 8f       	std	Z+27, r23	; 0x1b
     dc0:	08 95       	ret

00000dc2 <_ZN7AutoPID11setTimeStepEm>:

void AutoPID::setTimeStep(unsigned long timeStep){
  _timeStep = timeStep;
     dc2:	fc 01       	movw	r30, r24
     dc4:	42 a7       	std	Z+42, r20	; 0x2a
     dc6:	53 a7       	std	Z+43, r21	; 0x2b
     dc8:	64 a7       	std	Z+44, r22	; 0x2c
     dca:	75 a7       	std	Z+45, r23	; 0x2d
     dcc:	08 95       	ret

00000dce <_ZN7AutoPID10atSetPointEd>:
}


bool AutoPID::atSetPoint(double threshold) {
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	4a 01       	movw	r8, r20
     de4:	5b 01       	movw	r10, r22
  return abs(*_setpoint - *_input) <= threshold;
     de6:	dc 01       	movw	r26, r24
     de8:	5e 96       	adiw	r26, 0x1e	; 30
     dea:	ed 91       	ld	r30, X+
     dec:	fc 91       	ld	r31, X
     dee:	5f 97       	sbiw	r26, 0x1f	; 31
     df0:	5c 96       	adiw	r26, 0x1c	; 28
     df2:	0d 90       	ld	r0, X+
     df4:	bc 91       	ld	r27, X
     df6:	a0 2d       	mov	r26, r0
     df8:	2d 91       	ld	r18, X+
     dfa:	3d 91       	ld	r19, X+
     dfc:	4d 91       	ld	r20, X+
     dfe:	5c 91       	ld	r21, X
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	0e 94 19 14 	call	0x2832	; 0x2832 <__subsf3>
     e0c:	6b 01       	movw	r12, r22
     e0e:	7c 01       	movw	r14, r24
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	a9 01       	movw	r20, r18
     e16:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__gesf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	24 f0       	brlt	.+8      	; 0xe26 <_ZN7AutoPID10atSetPointEd+0x58>
     e1e:	f7 fa       	bst	r15, 7
     e20:	f0 94       	com	r15
     e22:	f7 f8       	bld	r15, 7
     e24:	f0 94       	com	r15
     e26:	c1 e0       	ldi	r28, 0x01	; 1
     e28:	a5 01       	movw	r20, r10
     e2a:	94 01       	movw	r18, r8
     e2c:	c7 01       	movw	r24, r14
     e2e:	b6 01       	movw	r22, r12
     e30:	0e 94 86 14 	call	0x290c	; 0x290c <__cmpsf2>
     e34:	18 16       	cp	r1, r24
     e36:	0c f4       	brge	.+2      	; 0xe3a <_ZN7AutoPID10atSetPointEd+0x6c>
     e38:	c0 e0       	ldi	r28, 0x00	; 0
}//bool AutoPID::atSetPoint
     e3a:	8c 2f       	mov	r24, r28
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	bf 90       	pop	r11
     e4a:	af 90       	pop	r10
     e4c:	9f 90       	pop	r9
     e4e:	8f 90       	pop	r8
     e50:	08 95       	ret

00000e52 <_ZN7AutoPID5resetEv>:

void AutoPID::stop() {
  _stopped = true;
  reset();
}
void AutoPID::reset() {
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	ec 01       	movw	r28, r24
  _lastStep = millis();
     e58:	0e 94 68 18 	call	0x30d0	; 0x30d0 <millis>
     e5c:	6e a7       	std	Y+46, r22	; 0x2e
     e5e:	7f a7       	std	Y+47, r23	; 0x2f
     e60:	88 ab       	std	Y+48, r24	; 0x30
     e62:	99 ab       	std	Y+49, r25	; 0x31
  _integral = 0;
     e64:	1c 86       	std	Y+12, r1	; 0x0c
     e66:	1d 86       	std	Y+13, r1	; 0x0d
     e68:	1e 86       	std	Y+14, r1	; 0x0e
     e6a:	1f 86       	std	Y+15, r1	; 0x0f
  _previousError = 0;
     e6c:	18 8a       	std	Y+16, r1	; 0x10
     e6e:	19 8a       	std	Y+17, r1	; 0x11
     e70:	1a 8a       	std	Y+18, r1	; 0x12
     e72:	1b 8a       	std	Y+19, r1	; 0x13
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <_ZN7AutoPID3runEv>:

bool AutoPID::atSetPoint(double threshold) {
  return abs(*_setpoint - *_input) <= threshold;
}//bool AutoPID::atSetPoint

void AutoPID::run() {
     e7a:	4f 92       	push	r4
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	2a 97       	sbiw	r28, 0x0a	; 10
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	8c 01       	movw	r16, r24
  if (_stopped) {
     eac:	dc 01       	movw	r26, r24
     eae:	d2 96       	adiw	r26, 0x32	; 50
     eb0:	8c 91       	ld	r24, X
     eb2:	d2 97       	sbiw	r26, 0x32	; 50
     eb4:	88 23       	and	r24, r24
     eb6:	29 f0       	breq	.+10     	; 0xec2 <_ZN7AutoPID3runEv+0x48>
    _stopped = false;
     eb8:	d2 96       	adiw	r26, 0x32	; 50
     eba:	1c 92       	st	X, r1
    reset();
     ebc:	c8 01       	movw	r24, r16
     ebe:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN7AutoPID5resetEv>
  }
  //if bang thresholds are defined and we're outside of them, use bang-bang control
  if (_bangOn && ((*_setpoint - *_input) > _bangOn)) {
     ec2:	f8 01       	movw	r30, r16
     ec4:	c4 88       	ldd	r12, Z+20	; 0x14
     ec6:	d5 88       	ldd	r13, Z+21	; 0x15
     ec8:	e6 88       	ldd	r14, Z+22	; 0x16
     eca:	f7 88       	ldd	r15, Z+23	; 0x17
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	a9 01       	movw	r20, r18
     ed2:	c7 01       	movw	r24, r14
     ed4:	b6 01       	movw	r22, r12
     ed6:	0e 94 86 14 	call	0x290c	; 0x290c <__cmpsf2>
     eda:	88 23       	and	r24, r24
     edc:	11 f1       	breq	.+68     	; 0xf22 <_ZN7AutoPID3runEv+0xa8>
     ede:	d8 01       	movw	r26, r16
     ee0:	5e 96       	adiw	r26, 0x1e	; 30
     ee2:	8d 91       	ld	r24, X+
     ee4:	9c 91       	ld	r25, X
     ee6:	5f 97       	sbiw	r26, 0x1f	; 31
     ee8:	5c 96       	adiw	r26, 0x1c	; 28
     eea:	0d 90       	ld	r0, X+
     eec:	bc 91       	ld	r27, X
     eee:	a0 2d       	mov	r26, r0
     ef0:	2d 91       	ld	r18, X+
     ef2:	3d 91       	ld	r19, X+
     ef4:	4d 91       	ld	r20, X+
     ef6:	5c 91       	ld	r21, X
     ef8:	fc 01       	movw	r30, r24
     efa:	60 81       	ld	r22, Z
     efc:	71 81       	ldd	r23, Z+1	; 0x01
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	0e 94 19 14 	call	0x2832	; 0x2832 <__subsf3>
     f06:	9b 01       	movw	r18, r22
     f08:	ac 01       	movw	r20, r24
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	0e 94 86 14 	call	0x290c	; 0x290c <__cmpsf2>
     f12:	87 ff       	sbrs	r24, 7
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <_ZN7AutoPID3runEv+0xa8>
    *_output = _outputMax;
     f16:	f8 01       	movw	r30, r16
     f18:	86 a1       	ldd	r24, Z+38	; 0x26
     f1a:	97 a1       	ldd	r25, Z+39	; 0x27
     f1c:	a0 a5       	ldd	r26, Z+40	; 0x28
     f1e:	b1 a5       	ldd	r27, Z+41	; 0x29
     f20:	2f c0       	rjmp	.+94     	; 0xf80 <_ZN7AutoPID3runEv+0x106>
    _lastStep = millis();
  } else if (_bangOff && ((*_input - *_setpoint) > _bangOff)) {
     f22:	f8 01       	movw	r30, r16
     f24:	c0 8c       	ldd	r12, Z+24	; 0x18
     f26:	d1 8c       	ldd	r13, Z+25	; 0x19
     f28:	e2 8c       	ldd	r14, Z+26	; 0x1a
     f2a:	f3 8c       	ldd	r15, Z+27	; 0x1b
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	a9 01       	movw	r20, r18
     f32:	c7 01       	movw	r24, r14
     f34:	b6 01       	movw	r22, r12
     f36:	0e 94 86 14 	call	0x290c	; 0x290c <__cmpsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	91 f1       	breq	.+100    	; 0xfa2 <_ZN7AutoPID3runEv+0x128>
     f3e:	d8 01       	movw	r26, r16
     f40:	5c 96       	adiw	r26, 0x1c	; 28
     f42:	8d 91       	ld	r24, X+
     f44:	9c 91       	ld	r25, X
     f46:	5d 97       	sbiw	r26, 0x1d	; 29
     f48:	5e 96       	adiw	r26, 0x1e	; 30
     f4a:	0d 90       	ld	r0, X+
     f4c:	bc 91       	ld	r27, X
     f4e:	a0 2d       	mov	r26, r0
     f50:	2d 91       	ld	r18, X+
     f52:	3d 91       	ld	r19, X+
     f54:	4d 91       	ld	r20, X+
     f56:	5c 91       	ld	r21, X
     f58:	fc 01       	movw	r30, r24
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	0e 94 19 14 	call	0x2832	; 0x2832 <__subsf3>
     f66:	9b 01       	movw	r18, r22
     f68:	ac 01       	movw	r20, r24
     f6a:	c7 01       	movw	r24, r14
     f6c:	b6 01       	movw	r22, r12
     f6e:	0e 94 86 14 	call	0x290c	; 0x290c <__cmpsf2>
     f72:	87 ff       	sbrs	r24, 7
     f74:	16 c0       	rjmp	.+44     	; 0xfa2 <_ZN7AutoPID3runEv+0x128>
    *_output = _outputMin;
     f76:	f8 01       	movw	r30, r16
     f78:	82 a1       	ldd	r24, Z+34	; 0x22
     f7a:	93 a1       	ldd	r25, Z+35	; 0x23
     f7c:	a4 a1       	ldd	r26, Z+36	; 0x24
     f7e:	b5 a1       	ldd	r27, Z+37	; 0x25
     f80:	20 a1       	ldd	r18, Z+32	; 0x20
     f82:	31 a1       	ldd	r19, Z+33	; 0x21
     f84:	f9 01       	movw	r30, r18
     f86:	80 83       	st	Z, r24
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	a2 83       	std	Z+2, r26	; 0x02
     f8c:	b3 83       	std	Z+3, r27	; 0x03
    _lastStep = millis();
     f8e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <millis>
     f92:	d8 01       	movw	r26, r16
     f94:	9e 96       	adiw	r26, 0x2e	; 46
     f96:	6d 93       	st	X+, r22
     f98:	7d 93       	st	X+, r23
     f9a:	8d 93       	st	X+, r24
     f9c:	9c 93       	st	X, r25
     f9e:	d1 97       	sbiw	r26, 0x31	; 49
     fa0:	e1 c0       	rjmp	.+450    	; 0x1164 <_ZN7AutoPID3runEv+0x2ea>
  } else {                                    //otherwise use PID control
    unsigned long _dT = millis() - _lastStep;   //calculate time since last update
     fa2:	0e 94 68 18 	call	0x30d0	; 0x30d0 <millis>
     fa6:	f8 01       	movw	r30, r16
     fa8:	c6 a4       	ldd	r12, Z+46	; 0x2e
     faa:	d7 a4       	ldd	r13, Z+47	; 0x2f
     fac:	e0 a8       	ldd	r14, Z+48	; 0x30
     fae:	f1 a8       	ldd	r15, Z+49	; 0x31
     fb0:	4b 01       	movw	r8, r22
     fb2:	5c 01       	movw	r10, r24
     fb4:	8c 18       	sub	r8, r12
     fb6:	9d 08       	sbc	r9, r13
     fb8:	ae 08       	sbc	r10, r14
     fba:	bf 08       	sbc	r11, r15
    if (_dT >= _timeStep) {                     //if long enough, do PID calculations
     fbc:	82 a5       	ldd	r24, Z+42	; 0x2a
     fbe:	93 a5       	ldd	r25, Z+43	; 0x2b
     fc0:	a4 a5       	ldd	r26, Z+44	; 0x2c
     fc2:	b5 a5       	ldd	r27, Z+45	; 0x2d
     fc4:	88 16       	cp	r8, r24
     fc6:	99 06       	cpc	r9, r25
     fc8:	aa 06       	cpc	r10, r26
     fca:	bb 06       	cpc	r11, r27
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <_ZN7AutoPID3runEv+0x156>
     fce:	ca c0       	rjmp	.+404    	; 0x1164 <_ZN7AutoPID3runEv+0x2ea>
      _lastStep = millis();
     fd0:	0e 94 68 18 	call	0x30d0	; 0x30d0 <millis>
     fd4:	d8 01       	movw	r26, r16
     fd6:	9e 96       	adiw	r26, 0x2e	; 46
     fd8:	6d 93       	st	X+, r22
     fda:	7d 93       	st	X+, r23
     fdc:	8d 93       	st	X+, r24
     fde:	9c 93       	st	X, r25
     fe0:	d1 97       	sbiw	r26, 0x31	; 49
      double _error = *_setpoint - *_input;
     fe2:	5e 96       	adiw	r26, 0x1e	; 30
     fe4:	8d 91       	ld	r24, X+
     fe6:	9c 91       	ld	r25, X
     fe8:	5f 97       	sbiw	r26, 0x1f	; 31
     fea:	5c 96       	adiw	r26, 0x1c	; 28
     fec:	0d 90       	ld	r0, X+
     fee:	bc 91       	ld	r27, X
     ff0:	a0 2d       	mov	r26, r0
     ff2:	2d 91       	ld	r18, X+
     ff4:	3d 91       	ld	r19, X+
     ff6:	4d 91       	ld	r20, X+
     ff8:	5c 91       	ld	r21, X
     ffa:	fc 01       	movw	r30, r24
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	0e 94 19 14 	call	0x2832	; 0x2832 <__subsf3>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
      _integral += (_error + _previousError) / 2 * _dT / 1000.0;   //Riemann sum integral
    100c:	d8 01       	movw	r26, r16
    100e:	50 96       	adiw	r26, 0x10	; 16
    1010:	8d 91       	ld	r24, X+
    1012:	9d 91       	ld	r25, X+
    1014:	0d 90       	ld	r0, X+
    1016:	bc 91       	ld	r27, X
    1018:	a0 2d       	mov	r26, r0
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	ab 83       	std	Y+3, r26	; 0x03
    1020:	bc 83       	std	Y+4, r27	; 0x04
    1022:	c5 01       	movw	r24, r10
    1024:	b4 01       	movw	r22, r8
    1026:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__floatunsisf>
    102a:	2b 01       	movw	r4, r22
    102c:	3c 01       	movw	r6, r24
    102e:	29 81       	ldd	r18, Y+1	; 0x01
    1030:	3a 81       	ldd	r19, Y+2	; 0x02
    1032:	4b 81       	ldd	r20, Y+3	; 0x03
    1034:	5c 81       	ldd	r21, Y+4	; 0x04
    1036:	c7 01       	movw	r24, r14
    1038:	b6 01       	movw	r22, r12
    103a:	0e 94 1a 14 	call	0x2834	; 0x2834 <__addsf3>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__mulsf3>
    104a:	a3 01       	movw	r20, r6
    104c:	92 01       	movw	r18, r4
    104e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__mulsf3>
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a e7       	ldi	r20, 0x7A	; 122
    1058:	54 e4       	ldi	r21, 0x44	; 68
    105a:	0e 94 8b 14 	call	0x2916	; 0x2916 <__divsf3>
    105e:	f8 01       	movw	r30, r16
    1060:	24 85       	ldd	r18, Z+12	; 0x0c
    1062:	35 85       	ldd	r19, Z+13	; 0x0d
    1064:	46 85       	ldd	r20, Z+14	; 0x0e
    1066:	57 85       	ldd	r21, Z+15	; 0x0f
    1068:	0e 94 1a 14 	call	0x2834	; 0x2834 <__addsf3>
    106c:	4b 01       	movw	r8, r22
    106e:	5c 01       	movw	r10, r24
    1070:	d8 01       	movw	r26, r16
    1072:	1c 96       	adiw	r26, 0x0c	; 12
    1074:	6d 93       	st	X+, r22
    1076:	7d 93       	st	X+, r23
    1078:	8d 93       	st	X+, r24
    107a:	9c 93       	st	X, r25
    107c:	1f 97       	sbiw	r26, 0x0f	; 15
      //_integral = constrain(_integral, _outputMin/_Ki, _outputMax/_Ki);
      double _dError = (_error - _previousError) / _dT / 1000.0;   //derivative
      _previousError = _error;
    107e:	f8 01       	movw	r30, r16
    1080:	c0 8a       	std	Z+16, r12	; 0x10
    1082:	d1 8a       	std	Z+17, r13	; 0x11
    1084:	e2 8a       	std	Z+18, r14	; 0x12
    1086:	f3 8a       	std	Z+19, r15	; 0x13
      double PID = (_Kp * _error) + (_Ki * _integral) + (_Kd * _dError);
    1088:	20 81       	ld	r18, Z
    108a:	31 81       	ldd	r19, Z+1	; 0x01
    108c:	42 81       	ldd	r20, Z+2	; 0x02
    108e:	53 81       	ldd	r21, Z+3	; 0x03
    1090:	c7 01       	movw	r24, r14
    1092:	b6 01       	movw	r22, r12
    1094:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__mulsf3>
    1098:	6d 83       	std	Y+5, r22	; 0x05
    109a:	7e 83       	std	Y+6, r23	; 0x06
    109c:	8f 83       	std	Y+7, r24	; 0x07
    109e:	98 87       	std	Y+8, r25	; 0x08
    10a0:	d8 01       	movw	r26, r16
    10a2:	14 96       	adiw	r26, 0x04	; 4
    10a4:	2d 91       	ld	r18, X+
    10a6:	3d 91       	ld	r19, X+
    10a8:	4d 91       	ld	r20, X+
    10aa:	5c 91       	ld	r21, X
    10ac:	17 97       	sbiw	r26, 0x07	; 7
    10ae:	c5 01       	movw	r24, r10
    10b0:	b4 01       	movw	r22, r8
    10b2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__mulsf3>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	6d 81       	ldd	r22, Y+5	; 0x05
    10bc:	7e 81       	ldd	r23, Y+6	; 0x06
    10be:	8f 81       	ldd	r24, Y+7	; 0x07
    10c0:	98 85       	ldd	r25, Y+8	; 0x08
    10c2:	0e 94 1a 14 	call	0x2834	; 0x2834 <__addsf3>
    10c6:	4b 01       	movw	r8, r22
    10c8:	5c 01       	movw	r10, r24
    10ca:	29 81       	ldd	r18, Y+1	; 0x01
    10cc:	3a 81       	ldd	r19, Y+2	; 0x02
    10ce:	4b 81       	ldd	r20, Y+3	; 0x03
    10d0:	5c 81       	ldd	r21, Y+4	; 0x04
    10d2:	c7 01       	movw	r24, r14
    10d4:	b6 01       	movw	r22, r12
    10d6:	0e 94 19 14 	call	0x2832	; 0x2832 <__subsf3>
    10da:	a3 01       	movw	r20, r6
    10dc:	92 01       	movw	r18, r4
    10de:	0e 94 8b 14 	call	0x2916	; 0x2916 <__divsf3>
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	4a e7       	ldi	r20, 0x7A	; 122
    10e8:	54 e4       	ldi	r21, 0x44	; 68
    10ea:	0e 94 8b 14 	call	0x2916	; 0x2916 <__divsf3>
    10ee:	f8 01       	movw	r30, r16
    10f0:	20 85       	ldd	r18, Z+8	; 0x08
    10f2:	31 85       	ldd	r19, Z+9	; 0x09
    10f4:	42 85       	ldd	r20, Z+10	; 0x0a
    10f6:	53 85       	ldd	r21, Z+11	; 0x0b
    10f8:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__mulsf3>
    10fc:	9b 01       	movw	r18, r22
    10fe:	ac 01       	movw	r20, r24
    1100:	c5 01       	movw	r24, r10
    1102:	b4 01       	movw	r22, r8
    1104:	0e 94 1a 14 	call	0x2834	; 0x2834 <__addsf3>
    1108:	3b 01       	movw	r6, r22
    110a:	4c 01       	movw	r8, r24
      //*_output = _outputMin + (constrain(PID, 0, 1) * (_outputMax - _outputMin));
      *_output = constrain(PID, _outputMin, _outputMax);
    110c:	d8 01       	movw	r26, r16
    110e:	90 96       	adiw	r26, 0x20	; 32
    1110:	cd 90       	ld	r12, X+
    1112:	dc 90       	ld	r13, X
    1114:	91 97       	sbiw	r26, 0x21	; 33
    1116:	92 96       	adiw	r26, 0x22	; 34
    1118:	ac 90       	ld	r10, X
    111a:	92 97       	sbiw	r26, 0x22	; 34
    111c:	93 96       	adiw	r26, 0x23	; 35
    111e:	bc 90       	ld	r11, X
    1120:	93 97       	sbiw	r26, 0x23	; 35
    1122:	94 96       	adiw	r26, 0x24	; 36
    1124:	ec 90       	ld	r14, X
    1126:	94 97       	sbiw	r26, 0x24	; 36
    1128:	95 96       	adiw	r26, 0x25	; 37
    112a:	fc 90       	ld	r15, X
    112c:	95 01       	movw	r18, r10
    112e:	a7 01       	movw	r20, r14
    1130:	0e 94 86 14 	call	0x290c	; 0x290c <__cmpsf2>
    1134:	87 fd       	sbrc	r24, 7
    1136:	0f c0       	rjmp	.+30     	; 0x1156 <_ZN7AutoPID3runEv+0x2dc>
    1138:	f8 01       	movw	r30, r16
    113a:	a6 a0       	ldd	r10, Z+38	; 0x26
    113c:	b7 a0       	ldd	r11, Z+39	; 0x27
    113e:	e0 a4       	ldd	r14, Z+40	; 0x28
    1140:	f1 a4       	ldd	r15, Z+41	; 0x29
    1142:	95 01       	movw	r18, r10
    1144:	a7 01       	movw	r20, r14
    1146:	b3 01       	movw	r22, r6
    1148:	c4 01       	movw	r24, r8
    114a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__gesf2>
    114e:	18 16       	cp	r1, r24
    1150:	14 f0       	brlt	.+4      	; 0x1156 <_ZN7AutoPID3runEv+0x2dc>
    1152:	53 01       	movw	r10, r6
    1154:	74 01       	movw	r14, r8
    1156:	c5 01       	movw	r24, r10
    1158:	d7 01       	movw	r26, r14
    115a:	f6 01       	movw	r30, r12
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	a2 83       	std	Z+2, r26	; 0x02
    1162:	b3 83       	std	Z+3, r27	; 0x03
    }
  }
}//void AutoPID::run
    1164:	2a 96       	adiw	r28, 0x0a	; 10
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	9f 90       	pop	r9
    1186:	8f 90       	pop	r8
    1188:	7f 90       	pop	r7
    118a:	6f 90       	pop	r6
    118c:	5f 90       	pop	r5
    118e:	4f 90       	pop	r4
    1190:	08 95       	ret

00001192 <_ZN5Print17availableForWriteEv>:
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
	createChar(char_num, rows);
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	08 95       	ret

00001198 <_ZN5Print5flushEv>:
    1198:	08 95       	ret

0000119a <_ZN17LiquidCrystal_I2CC1Ehhhh>:
    119a:	0f 93       	push	r16
    119c:	fc 01       	movw	r30, r24
    119e:	13 82       	std	Z+3, r1	; 0x03
    11a0:	12 82       	std	Z+2, r1	; 0x02
    11a2:	8b e6       	ldi	r24, 0x6B	; 107
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
    11aa:	64 83       	std	Z+4, r22	; 0x04
    11ac:	40 87       	std	Z+8, r20	; 0x08
    11ae:	21 87       	std	Z+9, r18	; 0x09
    11b0:	02 87       	std	Z+10, r16	; 0x0a
    11b2:	88 e0       	ldi	r24, 0x08	; 8
    11b4:	83 87       	std	Z+11, r24	; 0x0b
    11b6:	0f 91       	pop	r16
    11b8:	08 95       	ret

000011ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	ec 01       	movw	r28, r24
    11c2:	16 2f       	mov	r17, r22
    11c4:	6c 81       	ldd	r22, Y+4	; 0x04
    11c6:	86 e5       	ldi	r24, 0x56	; 86
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <_ZN7TwoWire17beginTransmissionEh>
    11ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d0:	61 2b       	or	r22, r17
    11d2:	86 e5       	ldi	r24, 0x56	; 86
    11d4:	92 e0       	ldi	r25, 0x02	; 2
    11d6:	0e 94 87 13 	call	0x270e	; 0x270e <_ZN7TwoWire5writeEh>
    11da:	86 e5       	ldi	r24, 0x56	; 86
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0c 94 ed 13 	jmp	0x27da	; 0x27da <_ZN7TwoWire15endTransmissionEv>

000011e8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	8c 01       	movw	r16, r24
    11f0:	c6 2f       	mov	r28, r22
    11f2:	64 60       	ori	r22, 0x04	; 4
    11f4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 d5 18 	call	0x31aa	; 0x31aa <delayMicroseconds>
    1200:	6c 2f       	mov	r22, r28
    1202:	6b 7f       	andi	r22, 0xFB	; 251
    1204:	c8 01       	movw	r24, r16
    1206:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    120a:	82 e3       	ldi	r24, 0x32	; 50
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <delayMicroseconds>

00001218 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	ec 01       	movw	r28, r24
    1220:	16 2f       	mov	r17, r22
    1222:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1226:	61 2f       	mov	r22, r17
    1228:	ce 01       	movw	r24, r28
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00001234 <_ZN17LiquidCrystal_I2C4sendEhh>:
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	8c 01       	movw	r16, r24
    123e:	c6 2f       	mov	r28, r22
    1240:	d4 2f       	mov	r29, r20
    1242:	60 7f       	andi	r22, 0xF0	; 240
    1244:	64 2b       	or	r22, r20
    1246:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    124a:	80 e1       	ldi	r24, 0x10	; 16
    124c:	c8 9f       	mul	r28, r24
    124e:	b0 01       	movw	r22, r0
    1250:	11 24       	eor	r1, r1
    1252:	6d 2b       	or	r22, r29
    1254:	c8 01       	movw	r24, r16
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00001262 <_ZN17LiquidCrystal_I2C7commandEh>:
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <_ZN17LiquidCrystal_I2C4sendEhh>

00001268 <_ZN17LiquidCrystal_I2C5clearEv>:
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN17LiquidCrystal_I2C7commandEh>
    126e:	80 ed       	ldi	r24, 0xD0	; 208
    1270:	97 e0       	ldi	r25, 0x07	; 7
    1272:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <delayMicroseconds>

00001276 <_ZN17LiquidCrystal_I2C4homeEv>:
    1276:	62 e0       	ldi	r22, 0x02	; 2
    1278:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN17LiquidCrystal_I2C7commandEh>
    127c:	80 ed       	ldi	r24, 0xD0	; 208
    127e:	97 e0       	ldi	r25, 0x07	; 7
    1280:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <delayMicroseconds>

00001284 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	28 97       	sbiw	r28, 0x08	; 8
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	9c 01       	movw	r18, r24
    129a:	88 e0       	ldi	r24, 0x08	; 8
    129c:	ec e0       	ldi	r30, 0x0C	; 12
    129e:	f1 e0       	ldi	r31, 0x01	; 1
    12a0:	de 01       	movw	r26, r28
    12a2:	11 96       	adiw	r26, 0x01	; 1
    12a4:	01 90       	ld	r0, Z+
    12a6:	0d 92       	st	X+, r0
    12a8:	8a 95       	dec	r24
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    12ac:	f9 01       	movw	r30, r18
    12ae:	81 85       	ldd	r24, Z+9	; 0x09
    12b0:	84 17       	cp	r24, r20
    12b2:	10 f4       	brcc	.+4      	; 0x12b8 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    12b4:	4f ef       	ldi	r20, 0xFF	; 255
    12b6:	48 0f       	add	r20, r24
    12b8:	fe 01       	movw	r30, r28
    12ba:	31 96       	adiw	r30, 0x01	; 1
    12bc:	e4 0f       	add	r30, r20
    12be:	f1 1d       	adc	r31, r1
    12c0:	e4 0f       	add	r30, r20
    12c2:	f1 1d       	adc	r31, r1
    12c4:	90 81       	ld	r25, Z
    12c6:	69 0f       	add	r22, r25
    12c8:	60 68       	ori	r22, 0x80	; 128
    12ca:	c9 01       	movw	r24, r18
    12cc:	28 96       	adiw	r28, 0x08	; 8
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	0c 94 31 09 	jmp	0x1262	; 0x1262 <_ZN17LiquidCrystal_I2C7commandEh>

000012e0 <_ZN17LiquidCrystal_I2C7displayEv>:
    12e0:	fc 01       	movw	r30, r24
    12e2:	66 81       	ldd	r22, Z+6	; 0x06
    12e4:	26 2f       	mov	r18, r22
    12e6:	24 60       	ori	r18, 0x04	; 4
    12e8:	26 83       	std	Z+6, r18	; 0x06
    12ea:	6c 60       	ori	r22, 0x0C	; 12
    12ec:	0c 94 31 09 	jmp	0x1262	; 0x1262 <_ZN17LiquidCrystal_I2C7commandEh>

000012f0 <_ZN17LiquidCrystal_I2C5writeEh>:
inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	08 95       	ret

000012fc <_ZN17LiquidCrystal_I2C5beginEv>:
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
}

void LiquidCrystal_I2C::begin() {
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	ec 01       	movw	r28, r24
	Wire.begin();
    1302:	86 e5       	ldi	r24, 0x56	; 86
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	0e 94 c6 13 	call	0x278c	; 0x278c <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    130a:	1d 82       	std	Y+5, r1	; 0x05

	if (_rows > 1) {
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	10 f0       	brcs	.+4      	; 0x1316 <_ZN17LiquidCrystal_I2C5beginEv+0x1a>
		_displayfunction |= LCD_2LINE;
    1312:	98 e0       	ldi	r25, 0x08	; 8
    1314:	9d 83       	std	Y+5, r25	; 0x05
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
    1316:	9a 85       	ldd	r25, Y+10	; 0x0a
    1318:	99 23       	and	r25, r25
    131a:	29 f0       	breq	.+10     	; 0x1326 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	19 f4       	brne	.+6      	; 0x1326 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
		_displayfunction |= LCD_5x10DOTS;
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	84 60       	ori	r24, 0x04	; 4
    1324:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50);
    1326:	62 e3       	ldi	r22, 0x32	; 50
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 99 18 	call	0x3132	; 0x3132 <delay>

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    1332:	6b 85       	ldd	r22, Y+11	; 0x0b
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    133a:	68 ee       	ldi	r22, 0xE8	; 232
    133c:	73 e0       	ldi	r23, 0x03	; 3
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 99 18 	call	0x3132	; 0x3132 <delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
    1346:	60 e3       	ldi	r22, 0x30	; 48
    1348:	ce 01       	movw	r24, r28
    134a:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    134e:	84 e9       	ldi	r24, 0x94	; 148
    1350:	91 e1       	ldi	r25, 0x11	; 17
    1352:	0e 94 d5 18 	call	0x31aa	; 0x31aa <delayMicroseconds>

	// second try
	write4bits(0x03 << 4);
    1356:	60 e3       	ldi	r22, 0x30	; 48
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    135e:	84 e9       	ldi	r24, 0x94	; 148
    1360:	91 e1       	ldi	r25, 0x11	; 17
    1362:	0e 94 d5 18 	call	0x31aa	; 0x31aa <delayMicroseconds>

	// third go!
	write4bits(0x03 << 4);
    1366:	60 e3       	ldi	r22, 0x30	; 48
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(150);
    136e:	86 e9       	ldi	r24, 0x96	; 150
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 d5 18 	call	0x31aa	; 0x31aa <delayMicroseconds>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
    1376:	60 e2       	ldi	r22, 0x20	; 32
    1378:	ce 01       	movw	r24, r28
    137a:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN17LiquidCrystal_I2C10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
    137e:	6d 81       	ldd	r22, Y+5	; 0x05
    1380:	60 62       	ori	r22, 0x20	; 32
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN17LiquidCrystal_I2C7commandEh>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1388:	84 e0       	ldi	r24, 0x04	; 4
    138a:	8e 83       	std	Y+6, r24	; 0x06
	display();
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN17LiquidCrystal_I2C7displayEv>

	// clear it off
	clear();
    1392:	ce 01       	movw	r24, r28
    1394:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN17LiquidCrystal_I2C5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	8f 83       	std	Y+7, r24	; 0x07

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    139c:	66 e0       	ldi	r22, 0x06	; 6
    139e:	ce 01       	movw	r24, r28
    13a0:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN17LiquidCrystal_I2C7commandEh>

	home();
    13a4:	ce 01       	movw	r24, r28
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
    13aa:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <_ZN17LiquidCrystal_I2C4homeEv>

000013ae <_ZN7MAX6675C1Eaaa>:
#endif
#include <util/delay.h>
#include <stdlib.h>
#include "max6675.h"

MAX6675::MAX6675(int8_t SCLK, int8_t CS, int8_t MISO) {
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
    13b4:	84 2f       	mov	r24, r20
  sclk = SCLK;
    13b6:	68 83       	st	Y, r22
  cs = CS;
    13b8:	4a 83       	std	Y+2, r20	; 0x02
  miso = MISO;
    13ba:	29 83       	std	Y+1, r18	; 0x01

  //define pin modes
  pinMode(cs, OUTPUT);
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	0e 94 44 19 	call	0x3288	; 0x3288 <pinMode>
  pinMode(sclk, OUTPUT); 
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	88 81       	ld	r24, Y
    13c6:	0e 94 44 19 	call	0x3288	; 0x3288 <pinMode>
  pinMode(miso, INPUT);
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	0e 94 44 19 	call	0x3288	; 0x3288 <pinMode>

  digitalWrite(cs, HIGH);
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
  //define pin modes
  pinMode(cs, OUTPUT);
  pinMode(sclk, OUTPUT); 
  pinMode(miso, INPUT);

  digitalWrite(cs, HIGH);
    13da:	0c 94 80 19 	jmp	0x3300	; 0x3300 <digitalWrite>

000013de <_ZN7MAX66757spireadEv>:

double MAX6675::readFahrenheit(void) {
  return readCelsius() * 9.0/5.0 + 32;
}

byte MAX6675::spiread(void) { 
    13de:	cf 92       	push	r12
    13e0:	df 92       	push	r13
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	7c 01       	movw	r14, r24
  int i;
  byte d = 0;
    13ee:	10 e0       	ldi	r17, 0x00	; 0

  for (i=7; i>=0; i--)
    13f0:	c7 e0       	ldi	r28, 0x07	; 7
    13f2:	d0 e0       	ldi	r29, 0x00	; 0
  {
    digitalWrite(sclk, LOW);
    _delay_ms(1);
    if (digitalRead(miso)) {
      //set the bit to 0 no matter what
      d |= (1 << i);
    13f4:	cc 24       	eor	r12, r12
    13f6:	c3 94       	inc	r12
    13f8:	d1 2c       	mov	r13, r1
  int i;
  byte d = 0;

  for (i=7; i>=0; i--)
  {
    digitalWrite(sclk, LOW);
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	f7 01       	movw	r30, r14
    13fe:	80 81       	ld	r24, Z
    1400:	0e 94 80 19 	call	0x3300	; 0x3300 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1404:	8f e9       	ldi	r24, 0x9F	; 159
    1406:	9f e0       	ldi	r25, 0x0F	; 15
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <_ZN7MAX66757spireadEv+0x2a>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <_ZN7MAX66757spireadEv+0x30>
    140e:	00 00       	nop
    _delay_ms(1);
    if (digitalRead(miso)) {
    1410:	f7 01       	movw	r30, r14
    1412:	81 81       	ldd	r24, Z+1	; 0x01
    1414:	0e 94 af 19 	call	0x335e	; 0x335e <digitalRead>
    1418:	89 2b       	or	r24, r25
    141a:	39 f0       	breq	.+14     	; 0x142a <_ZN7MAX66757spireadEv+0x4c>
      //set the bit to 0 no matter what
      d |= (1 << i);
    141c:	c6 01       	movw	r24, r12
    141e:	0c 2e       	mov	r0, r28
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <_ZN7MAX66757spireadEv+0x46>
    1422:	88 0f       	add	r24, r24
    1424:	0a 94       	dec	r0
    1426:	ea f7       	brpl	.-6      	; 0x1422 <_ZN7MAX66757spireadEv+0x44>
    1428:	18 2b       	or	r17, r24
    }

    digitalWrite(sclk, HIGH);
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	f7 01       	movw	r30, r14
    142e:	80 81       	ld	r24, Z
    1430:	0e 94 80 19 	call	0x3300	; 0x3300 <digitalWrite>
    1434:	8f e9       	ldi	r24, 0x9F	; 159
    1436:	9f e0       	ldi	r25, 0x0F	; 15
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <_ZN7MAX66757spireadEv+0x5a>
    143c:	00 c0       	rjmp	.+0      	; 0x143e <_ZN7MAX66757spireadEv+0x60>
    143e:	00 00       	nop

byte MAX6675::spiread(void) { 
  int i;
  byte d = 0;

  for (i=7; i>=0; i--)
    1440:	21 97       	sbiw	r28, 0x01	; 1
    1442:	d8 f6       	brcc	.-74     	; 0x13fa <_ZN7MAX66757spireadEv+0x1c>
    digitalWrite(sclk, HIGH);
    _delay_ms(1);
  }

  return d;
}
    1444:	81 2f       	mov	r24, r17
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	08 95       	ret

00001456 <_ZN7MAX667511readCelsiusEv>:
  pinMode(sclk, OUTPUT); 
  pinMode(miso, INPUT);

  digitalWrite(cs, HIGH);
}
double MAX6675::readCelsius(void) {
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	8c 01       	movw	r16, r24

  uint16_t v;

  digitalWrite(cs, LOW);
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	fc 01       	movw	r30, r24
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	0e 94 80 19 	call	0x3300	; 0x3300 <digitalWrite>
    146a:	8f e9       	ldi	r24, 0x9F	; 159
    146c:	9f e0       	ldi	r25, 0x0F	; 15
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <_ZN7MAX667511readCelsiusEv+0x18>
    1472:	00 c0       	rjmp	.+0      	; 0x1474 <_ZN7MAX667511readCelsiusEv+0x1e>
    1474:	00 00       	nop
  _delay_ms(1);

  v = spiread();
    1476:	c8 01       	movw	r24, r16
    1478:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN7MAX66757spireadEv>
    147c:	c8 2f       	mov	r28, r24
    147e:	d0 e0       	ldi	r29, 0x00	; 0
  v <<= 8;
    1480:	dc 2f       	mov	r29, r28
    1482:	cc 27       	eor	r28, r28
  v |= spiread();
    1484:	c8 01       	movw	r24, r16
    1486:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN7MAX66757spireadEv>
    148a:	c8 2b       	or	r28, r24

  digitalWrite(cs, HIGH);
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	f8 01       	movw	r30, r16
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	0e 94 80 19 	call	0x3300	; 0x3300 <digitalWrite>

  if (v & 0x4) {
    1496:	c2 fd       	sbrc	r28, 2
    1498:	11 c0       	rjmp	.+34     	; 0x14bc <_ZN7MAX667511readCelsiusEv+0x66>
    //return -100;
  }

  v >>= 3;

  return v*0.25;
    149a:	be 01       	movw	r22, r28
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	76 95       	lsr	r23
    14a0:	67 95       	ror	r22
    14a2:	8a 95       	dec	r24
    14a4:	e1 f7       	brne	.-8      	; 0x149e <_ZN7MAX667511readCelsiusEv+0x48>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__floatunsisf>
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e8       	ldi	r20, 0x80	; 128
    14b4:	5e e3       	ldi	r21, 0x3E	; 62
    14b6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__mulsf3>
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <_ZN7MAX667511readCelsiusEv+0x6e>

  digitalWrite(cs, HIGH);

  if (v & 0x4) {
    // uh oh, no thermocouple attached!
    return NAN; 
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 ec       	ldi	r24, 0xC0	; 192
    14c2:	9f e7       	ldi	r25, 0x7F	; 127
  }

  v >>= 3;

  return v*0.25;
}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	08 95       	ret

000014ce <_ZN4MItmC1E6Stringii>:
	//goMain();
}

void Menu::goMain(){
	cur_item = -1;
	goNext();
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	ec 01       	movw	r28, r24
    14e0:	6b 01       	movw	r12, r22
    14e2:	7a 01       	movw	r14, r20
    14e4:	89 01       	movw	r16, r18
    14e6:	67 e8       	ldi	r22, 0x87	; 135
    14e8:	71 e0       	ldi	r23, 0x01	; 1
    14ea:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
    14ee:	67 e8       	ldi	r22, 0x87	; 135
    14f0:	71 e0       	ldi	r23, 0x01	; 1
    14f2:	ce 01       	movw	r24, r28
    14f4:	0e 96       	adiw	r24, 0x0e	; 14
    14f6:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	9f ef       	ldi	r25, 0xFF	; 255
    14fe:	9b 87       	std	Y+11, r25	; 0x0b
    1500:	8a 87       	std	Y+10, r24	; 0x0a
    1502:	9d 87       	std	Y+13, r25	; 0x0d
    1504:	8c 87       	std	Y+12, r24	; 0x0c
    1506:	b6 01       	movw	r22, r12
    1508:	ce 01       	movw	r24, r28
    150a:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>
    150e:	ff 82       	std	Y+7, r15	; 0x07
    1510:	ee 82       	std	Y+6, r14	; 0x06
    1512:	19 87       	std	Y+9, r17	; 0x09
    1514:	08 87       	std	Y+8, r16	; 0x08
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	08 95       	ret

00001528 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String>:
    1528:	2f 92       	push	r2
    152a:	3f 92       	push	r3
    152c:	4f 92       	push	r4
    152e:	5f 92       	push	r5
    1530:	6f 92       	push	r6
    1532:	7f 92       	push	r7
    1534:	8f 92       	push	r8
    1536:	9f 92       	push	r9
    1538:	af 92       	push	r10
    153a:	bf 92       	push	r11
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	2e 97       	sbiw	r28, 0x0e	; 14
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	5c 01       	movw	r10, r24
    155e:	4b 01       	movw	r8, r22
    1560:	5e 87       	std	Y+14, r21	; 0x0e
    1562:	4d 87       	std	Y+13, r20	; 0x0d
    1564:	19 01       	movw	r2, r18
    1566:	38 01       	movw	r6, r16
    1568:	26 01       	movw	r4, r12
    156a:	6c 01       	movw	r12, r24
    156c:	84 e1       	ldi	r24, 0x14	; 20
    156e:	c8 0e       	add	r12, r24
    1570:	d1 1c       	adc	r13, r1
    1572:	67 e8       	ldi	r22, 0x87	; 135
    1574:	71 e0       	ldi	r23, 0x01	; 1
    1576:	c6 01       	movw	r24, r12
    1578:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
    157c:	67 e8       	ldi	r22, 0x87	; 135
    157e:	71 e0       	ldi	r23, 0x01	; 1
    1580:	c5 01       	movw	r24, r10
    1582:	4a 96       	adiw	r24, 0x1a	; 26
    1584:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
    1588:	85 01       	movw	r16, r10
    158a:	00 5e       	subi	r16, 0xE0	; 224
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	67 e8       	ldi	r22, 0x87	; 135
    1590:	71 e0       	ldi	r23, 0x01	; 1
    1592:	c8 01       	movw	r24, r16
    1594:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
    1598:	d5 01       	movw	r26, r10
    159a:	13 96       	adiw	r26, 0x03	; 3
    159c:	9c 92       	st	X, r9
    159e:	8e 92       	st	-X, r8
    15a0:	12 97       	sbiw	r26, 0x02	; 2
    15a2:	17 96       	adiw	r26, 0x07	; 7
    15a4:	fc 92       	st	X, r15
    15a6:	ee 92       	st	-X, r14
    15a8:	16 97       	sbiw	r26, 0x06	; 6
    15aa:	15 96       	adiw	r26, 0x05	; 5
    15ac:	3c 92       	st	X, r3
    15ae:	2e 92       	st	-X, r2
    15b0:	14 97       	sbiw	r26, 0x04	; 4
    15b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    15b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    15b6:	51 96       	adiw	r26, 0x11	; 17
    15b8:	fc 93       	st	X, r31
    15ba:	ee 93       	st	-X, r30
    15bc:	50 97       	sbiw	r26, 0x10	; 16
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	7c 92       	st	X, r7
    15c2:	6e 92       	st	-X, r6
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	19 96       	adiw	r26, 0x09	; 9
    15ca:	9c 93       	st	X, r25
    15cc:	8e 93       	st	-X, r24
    15ce:	18 97       	sbiw	r26, 0x08	; 8
    15d0:	1d 96       	adiw	r26, 0x0d	; 13
    15d2:	1c 92       	st	X, r1
    15d4:	1e 92       	st	-X, r1
    15d6:	1c 97       	sbiw	r26, 0x0c	; 12
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	9f ef       	ldi	r25, 0xFF	; 255
    15dc:	1b 96       	adiw	r26, 0x0b	; 11
    15de:	9c 93       	st	X, r25
    15e0:	8e 93       	st	-X, r24
    15e2:	1a 97       	sbiw	r26, 0x0a	; 10
    15e4:	53 96       	adiw	r26, 0x13	; 19
    15e6:	1c 92       	st	X, r1
    15e8:	1e 92       	st	-X, r1
    15ea:	52 97       	sbiw	r26, 0x12	; 18
    15ec:	b2 01       	movw	r22, r4
    15ee:	c6 01       	movw	r24, r12
    15f0:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>
    15f4:	d5 01       	movw	r26, r10
    15f6:	12 96       	adiw	r26, 0x02	; 2
    15f8:	6d 91       	ld	r22, X+
    15fa:	7c 91       	ld	r23, X
    15fc:	13 97       	sbiw	r26, 0x03	; 3
    15fe:	c8 01       	movw	r24, r16
    1600:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>
    1604:	67 e8       	ldi	r22, 0x87	; 135
    1606:	71 e0       	ldi	r23, 0x01	; 1
    1608:	ce 01       	movw	r24, r28
    160a:	07 96       	adiw	r24, 0x07	; 7
    160c:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
    1610:	00 e0       	ldi	r16, 0x00	; 0
    1612:	10 e0       	ldi	r17, 0x00	; 0
    1614:	e1 2c       	mov	r14, r1
    1616:	f1 2c       	mov	r15, r1
    1618:	77 24       	eor	r7, r7
    161a:	7a 94       	dec	r7
    161c:	66 24       	eor	r6, r6
    161e:	6a 94       	dec	r6
    1620:	cc 24       	eor	r12, r12
    1622:	ca 94       	dec	r12
    1624:	dc 2c       	mov	r13, r12
    1626:	f5 01       	movw	r30, r10
    1628:	80 89       	ldd	r24, Z+16	; 0x10
    162a:	91 89       	ldd	r25, Z+17	; 0x11
    162c:	e8 16       	cp	r14, r24
    162e:	f9 06       	cpc	r15, r25
    1630:	cc f5       	brge	.+114    	; 0x16a4 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String+0x17c>
    1632:	62 81       	ldd	r22, Z+2	; 0x02
    1634:	73 81       	ldd	r23, Z+3	; 0x03
    1636:	60 0f       	add	r22, r16
    1638:	71 1f       	adc	r23, r17
    163a:	db 01       	movw	r26, r22
    163c:	18 96       	adiw	r26, 0x08	; 8
    163e:	8d 90       	ld	r8, X+
    1640:	9c 90       	ld	r9, X
    1642:	19 97       	sbiw	r26, 0x09	; 9
    1644:	97 fc       	sbrc	r9, 7
    1646:	0b c0       	rjmp	.+22     	; 0x165e <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String+0x136>
    1648:	16 96       	adiw	r26, 0x06	; 6
    164a:	cd 90       	ld	r12, X+
    164c:	dc 90       	ld	r13, X
    164e:	17 97       	sbiw	r26, 0x07	; 7
    1650:	ce 01       	movw	r24, r28
    1652:	07 96       	adiw	r24, 0x07	; 7
    1654:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>
    1658:	78 2c       	mov	r7, r8
    165a:	69 2c       	mov	r6, r9
    165c:	1d c0       	rjmp	.+58     	; 0x1698 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String+0x170>
    165e:	be 01       	movw	r22, r28
    1660:	69 5f       	subi	r22, 0xF9	; 249
    1662:	7f 4f       	sbci	r23, 0xFF	; 255
    1664:	ce 01       	movw	r24, r28
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN6StringC1ERKS_>
    166c:	d5 01       	movw	r26, r10
    166e:	12 96       	adiw	r26, 0x02	; 2
    1670:	ed 91       	ld	r30, X+
    1672:	fc 91       	ld	r31, X
    1674:	13 97       	sbiw	r26, 0x03	; 3
    1676:	e0 0f       	add	r30, r16
    1678:	f1 1f       	adc	r31, r17
    167a:	d3 86       	std	Z+11, r13	; 0x0b
    167c:	c2 86       	std	Z+10, r12	; 0x0a
    167e:	74 86       	std	Z+12, r7	; 0x0c
    1680:	65 86       	std	Z+13, r6	; 0x0d
    1682:	be 01       	movw	r22, r28
    1684:	6f 5f       	subi	r22, 0xFF	; 255
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	cf 01       	movw	r24, r30
    168a:	0e 96       	adiw	r24, 0x0e	; 14
    168c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>
    1690:	ce 01       	movw	r24, r28
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
    1698:	bf ef       	ldi	r27, 0xFF	; 255
    169a:	eb 1a       	sub	r14, r27
    169c:	fb 0a       	sbc	r15, r27
    169e:	0c 5e       	subi	r16, 0xEC	; 236
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	c1 cf       	rjmp	.-126    	; 0x1626 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String+0xfe>
    16a4:	ce 01       	movw	r24, r28
    16a6:	07 96       	adiw	r24, 0x07	; 7
    16a8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
    16ac:	2e 96       	adiw	r28, 0x0e	; 14
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	bf 90       	pop	r11
    16ca:	af 90       	pop	r10
    16cc:	9f 90       	pop	r9
    16ce:	8f 90       	pop	r8
    16d0:	7f 90       	pop	r7
    16d2:	6f 90       	pop	r6
    16d4:	5f 90       	pop	r5
    16d6:	4f 90       	pop	r4
    16d8:	3f 90       	pop	r3
    16da:	2f 90       	pop	r2
    16dc:	08 95       	ret

000016de <_ZN4MItmC1ERKS_>:
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	8c 01       	movw	r16, r24
    16e8:	eb 01       	movw	r28, r22
    16ea:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN6StringC1ERKS_>
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	f8 01       	movw	r30, r16
    16f4:	97 83       	std	Z+7, r25	; 0x07
    16f6:	86 83       	std	Z+6, r24	; 0x06
    16f8:	88 85       	ldd	r24, Y+8	; 0x08
    16fa:	99 85       	ldd	r25, Y+9	; 0x09
    16fc:	91 87       	std	Z+9, r25	; 0x09
    16fe:	80 87       	std	Z+8, r24	; 0x08
    1700:	8a 85       	ldd	r24, Y+10	; 0x0a
    1702:	9b 85       	ldd	r25, Y+11	; 0x0b
    1704:	93 87       	std	Z+11, r25	; 0x0b
    1706:	82 87       	std	Z+10, r24	; 0x0a
    1708:	8c 85       	ldd	r24, Y+12	; 0x0c
    170a:	9d 85       	ldd	r25, Y+13	; 0x0d
    170c:	95 87       	std	Z+13, r25	; 0x0d
    170e:	84 87       	std	Z+12, r24	; 0x0c
    1710:	be 01       	movw	r22, r28
    1712:	62 5f       	subi	r22, 0xF2	; 242
    1714:	7f 4f       	sbci	r23, 0xFF	; 255
    1716:	c8 01       	movw	r24, r16
    1718:	0e 96       	adiw	r24, 0x0e	; 14
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <_ZN6StringC1ERKS_>

00001726 <_ZN4MItmD1Ev>:
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	ec 01       	movw	r28, r24
    172c:	0e 96       	adiw	r24, 0x0e	; 14
    172e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
    1732:	ce 01       	movw	r24, r28
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <_ZN6StringD1Ev>

0000173c <_ZN4Menu7drawSubEv>:
    173c:	2f 92       	push	r2
    173e:	3f 92       	push	r3
    1740:	4f 92       	push	r4
    1742:	5f 92       	push	r5
    1744:	6f 92       	push	r6
    1746:	7f 92       	push	r7
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	a6 97       	sbiw	r28, 0x26	; 38
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	8c 01       	movw	r16, r24
    1772:	dc 01       	movw	r26, r24
    1774:	16 96       	adiw	r26, 0x06	; 6
    1776:	6d 91       	ld	r22, X+
    1778:	7c 91       	ld	r23, X
    177a:	17 97       	sbiw	r26, 0x07	; 7
    177c:	61 50       	subi	r22, 0x01	; 1
    177e:	71 09       	sbc	r23, r1
    1780:	1c 96       	adiw	r26, 0x0c	; 12
    1782:	8d 91       	ld	r24, X+
    1784:	9c 91       	ld	r25, X
    1786:	1d 97       	sbiw	r26, 0x0d	; 13
    1788:	0e 94 32 1b 	call	0x3664	; 0x3664 <__divmodhi4>
    178c:	07 2e       	mov	r0, r23
    178e:	00 0c       	add	r0, r0
    1790:	88 0b       	sbc	r24, r24
    1792:	99 0b       	sbc	r25, r25
    1794:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__floatsisf>
    1798:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <floor>
    179c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
    17a0:	1b 01       	movw	r2, r22
    17a2:	f8 01       	movw	r30, r16
    17a4:	84 81       	ldd	r24, Z+4	; 0x04
    17a6:	95 81       	ldd	r25, Z+5	; 0x05
    17a8:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN17LiquidCrystal_I2C5clearEv>
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	d8 01       	movw	r26, r16
    17b2:	14 96       	adiw	r26, 0x04	; 4
    17b4:	8d 91       	ld	r24, X+
    17b6:	9c 91       	ld	r25, X
    17b8:	15 97       	sbiw	r26, 0x05	; 5
    17ba:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    17be:	b8 01       	movw	r22, r16
    17c0:	66 5e       	subi	r22, 0xE6	; 230
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	ce 01       	movw	r24, r28
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN6StringC1ERKS_>
    17cc:	68 e1       	ldi	r22, 0x18	; 24
    17ce:	71 e0       	ldi	r23, 0x01	; 1
    17d0:	ce 01       	movw	r24, r28
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <_ZplRK15StringSumHelperPKc>
    17d8:	bc 01       	movw	r22, r24
    17da:	f8 01       	movw	r30, r16
    17dc:	84 81       	ldd	r24, Z+4	; 0x04
    17de:	95 81       	ldd	r25, Z+5	; 0x05
    17e0:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN5Print5printERK6String>
    17e4:	ce 01       	movw	r24, r28
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
    17ec:	61 2c       	mov	r6, r1
    17ee:	71 2c       	mov	r7, r1
    17f0:	e1 2c       	mov	r14, r1
    17f2:	f1 2c       	mov	r15, r1
    17f4:	cc 24       	eor	r12, r12
    17f6:	c3 94       	inc	r12
    17f8:	d1 2c       	mov	r13, r1
    17fa:	aa 24       	eor	r10, r10
    17fc:	aa 94       	dec	r10
    17fe:	ba 2c       	mov	r11, r10
    1800:	28 01       	movw	r4, r16
    1802:	f4 e1       	ldi	r31, 0x14	; 20
    1804:	4f 0e       	add	r4, r31
    1806:	51 1c       	adc	r5, r1
    1808:	d8 01       	movw	r26, r16
    180a:	50 96       	adiw	r26, 0x10	; 16
    180c:	8d 91       	ld	r24, X+
    180e:	9c 91       	ld	r25, X
    1810:	51 97       	sbiw	r26, 0x11	; 17
    1812:	e8 16       	cp	r14, r24
    1814:	f9 06       	cpc	r15, r25
    1816:	0c f0       	brlt	.+2      	; 0x181a <_ZN4Menu7drawSubEv+0xde>
    1818:	bb c0       	rjmp	.+374    	; 0x1990 <_ZN4Menu7drawSubEv+0x254>
    181a:	12 96       	adiw	r26, 0x02	; 2
    181c:	6d 91       	ld	r22, X+
    181e:	7c 91       	ld	r23, X
    1820:	13 97       	sbiw	r26, 0x03	; 3
    1822:	66 0d       	add	r22, r6
    1824:	77 1d       	adc	r23, r7
    1826:	ce 01       	movw	r24, r28
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN4MItmC1ERKS_>
    182e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1830:	3c 85       	ldd	r19, Y+12	; 0x0c
    1832:	f8 01       	movw	r30, r16
    1834:	80 85       	ldd	r24, Z+8	; 0x08
    1836:	91 85       	ldd	r25, Z+9	; 0x09
    1838:	28 17       	cp	r18, r24
    183a:	39 07       	cpc	r19, r25
    183c:	09 f0       	breq	.+2      	; 0x1840 <_ZN4Menu7drawSubEv+0x104>
    183e:	9d c0       	rjmp	.+314    	; 0x197a <_ZN4Menu7drawSubEv+0x23e>
    1840:	ff ef       	ldi	r31, 0xFF	; 255
    1842:	af 16       	cp	r10, r31
    1844:	bf 06       	cpc	r11, r31
    1846:	09 f4       	brne	.+2      	; 0x184a <_ZN4Menu7drawSubEv+0x10e>
    1848:	57 01       	movw	r10, r14
    184a:	d8 01       	movw	r26, r16
    184c:	16 96       	adiw	r26, 0x06	; 6
    184e:	8d 91       	ld	r24, X+
    1850:	9c 91       	ld	r25, X
    1852:	17 97       	sbiw	r26, 0x07	; 7
    1854:	b7 01       	movw	r22, r14
    1856:	68 0f       	add	r22, r24
    1858:	79 1f       	adc	r23, r25
    185a:	50 96       	adiw	r26, 0x10	; 16
    185c:	4d 91       	ld	r20, X+
    185e:	5c 91       	ld	r21, X
    1860:	51 97       	sbiw	r26, 0x11	; 17
    1862:	46 17       	cp	r20, r22
    1864:	57 07       	cpc	r21, r23
    1866:	24 f1       	brlt	.+72     	; 0x18b0 <_ZN4Menu7drawSubEv+0x174>
    1868:	b4 e1       	ldi	r27, 0x14	; 20
    186a:	b6 9f       	mul	r27, r22
    186c:	a0 01       	movw	r20, r0
    186e:	b7 9f       	mul	r27, r23
    1870:	50 0d       	add	r21, r0
    1872:	11 24       	eor	r1, r1
    1874:	d8 01       	movw	r26, r16
    1876:	12 96       	adiw	r26, 0x02	; 2
    1878:	ed 91       	ld	r30, X+
    187a:	fc 91       	ld	r31, X
    187c:	13 97       	sbiw	r26, 0x03	; 3
    187e:	e4 0f       	add	r30, r20
    1880:	f5 1f       	adc	r31, r21
    1882:	74 97       	sbiw	r30, 0x14	; 20
    1884:	42 85       	ldd	r20, Z+10	; 0x0a
    1886:	53 85       	ldd	r21, Z+11	; 0x0b
    1888:	24 17       	cp	r18, r20
    188a:	35 07       	cpc	r19, r21
    188c:	89 f4       	brne	.+34     	; 0x18b0 <_ZN4Menu7drawSubEv+0x174>
    188e:	9c 01       	movw	r18, r24
    1890:	21 50       	subi	r18, 0x01	; 1
    1892:	31 09       	sbc	r19, r1
    1894:	22 9d       	mul	r18, r2
    1896:	a0 01       	movw	r20, r0
    1898:	23 9d       	mul	r18, r3
    189a:	50 0d       	add	r21, r0
    189c:	32 9d       	mul	r19, r2
    189e:	50 0d       	add	r21, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	97 01       	movw	r18, r14
    18a4:	2a 19       	sub	r18, r10
    18a6:	3b 09       	sbc	r19, r11
    18a8:	24 17       	cp	r18, r20
    18aa:	35 07       	cpc	r19, r21
    18ac:	0c f4       	brge	.+2      	; 0x18b0 <_ZN4Menu7drawSubEv+0x174>
    18ae:	65 c0       	rjmp	.+202    	; 0x197a <_ZN4Menu7drawSubEv+0x23e>
    18b0:	c8 16       	cp	r12, r24
    18b2:	d9 06       	cpc	r13, r25
    18b4:	0c f0       	brlt	.+2      	; 0x18b8 <_ZN4Menu7drawSubEv+0x17c>
    18b6:	61 c0       	rjmp	.+194    	; 0x197a <_ZN4Menu7drawSubEv+0x23e>
    18b8:	4c 2d       	mov	r20, r12
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	f8 01       	movw	r30, r16
    18be:	84 81       	ldd	r24, Z+4	; 0x04
    18c0:	95 81       	ldd	r25, Z+5	; 0x05
    18c2:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    18c6:	d8 01       	movw	r26, r16
    18c8:	1a 96       	adiw	r26, 0x0a	; 10
    18ca:	8d 91       	ld	r24, X+
    18cc:	9c 91       	ld	r25, X
    18ce:	1b 97       	sbiw	r26, 0x0b	; 11
    18d0:	e8 16       	cp	r14, r24
    18d2:	f9 06       	cpc	r15, r25
    18d4:	b9 f4       	brne	.+46     	; 0x1904 <_ZN4Menu7drawSubEv+0x1c8>
    18d6:	b2 01       	movw	r22, r4
    18d8:	ce 01       	movw	r24, r28
    18da:	45 96       	adiw	r24, 0x15	; 21
    18dc:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN6StringC1ERKS_>
    18e0:	be 01       	movw	r22, r28
    18e2:	6f 5f       	subi	r22, 0xFF	; 255
    18e4:	7f 4f       	sbci	r23, 0xFF	; 255
    18e6:	ce 01       	movw	r24, r28
    18e8:	45 96       	adiw	r24, 0x15	; 21
    18ea:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZplRK15StringSumHelperRK6String>
    18ee:	bc 01       	movw	r22, r24
    18f0:	f8 01       	movw	r30, r16
    18f2:	84 81       	ldd	r24, Z+4	; 0x04
    18f4:	95 81       	ldd	r25, Z+5	; 0x05
    18f6:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN5Print5printERK6String>
    18fa:	ce 01       	movw	r24, r28
    18fc:	45 96       	adiw	r24, 0x15	; 21
    18fe:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
    1902:	38 c0       	rjmp	.+112    	; 0x1974 <_ZN4Menu7drawSubEv+0x238>
    1904:	d8 01       	movw	r26, r16
    1906:	58 96       	adiw	r26, 0x18	; 24
    1908:	8d 90       	ld	r8, X+
    190a:	9c 90       	ld	r9, X
    190c:	59 97       	sbiw	r26, 0x19	; 25
    190e:	bf ef       	ldi	r27, 0xFF	; 255
    1910:	8b 1a       	sub	r8, r27
    1912:	9b 0a       	sbc	r9, r27
    1914:	63 e7       	ldi	r22, 0x73	; 115
    1916:	71 e0       	ldi	r23, 0x01	; 1
    1918:	ce 01       	movw	r24, r28
    191a:	81 96       	adiw	r24, 0x21	; 33
    191c:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
    1920:	94 01       	movw	r18, r8
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	be 01       	movw	r22, r28
    1928:	6f 5d       	subi	r22, 0xDF	; 223
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	ce 01       	movw	r24, r28
    192e:	4b 96       	adiw	r24, 0x1b	; 27
    1930:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <_ZNK6String9substringEjj>
    1934:	be 01       	movw	r22, r28
    1936:	65 5e       	subi	r22, 0xE5	; 229
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	ce 01       	movw	r24, r28
    193c:	45 96       	adiw	r24, 0x15	; 21
    193e:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN6StringC1ERKS_>
    1942:	be 01       	movw	r22, r28
    1944:	6f 5f       	subi	r22, 0xFF	; 255
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	ce 01       	movw	r24, r28
    194a:	45 96       	adiw	r24, 0x15	; 21
    194c:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZplRK15StringSumHelperRK6String>
    1950:	bc 01       	movw	r22, r24
    1952:	f8 01       	movw	r30, r16
    1954:	84 81       	ldd	r24, Z+4	; 0x04
    1956:	95 81       	ldd	r25, Z+5	; 0x05
    1958:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN5Print5printERK6String>
    195c:	ce 01       	movw	r24, r28
    195e:	45 96       	adiw	r24, 0x15	; 21
    1960:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
    1964:	ce 01       	movw	r24, r28
    1966:	4b 96       	adiw	r24, 0x1b	; 27
    1968:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
    196c:	ce 01       	movw	r24, r28
    196e:	81 96       	adiw	r24, 0x21	; 33
    1970:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
    1974:	ff ef       	ldi	r31, 0xFF	; 255
    1976:	cf 1a       	sub	r12, r31
    1978:	df 0a       	sbc	r13, r31
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN4MItmD1Ev>
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	e8 1a       	sub	r14, r24
    1986:	f8 0a       	sbc	r15, r24
    1988:	a4 e1       	ldi	r26, 0x14	; 20
    198a:	6a 0e       	add	r6, r26
    198c:	71 1c       	adc	r7, r1
    198e:	3c cf       	rjmp	.-392    	; 0x1808 <_ZN4Menu7drawSubEv+0xcc>
    1990:	a6 96       	adiw	r28, 0x26	; 38
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	bf 90       	pop	r11
    19ae:	af 90       	pop	r10
    19b0:	9f 90       	pop	r9
    19b2:	8f 90       	pop	r8
    19b4:	7f 90       	pop	r7
    19b6:	6f 90       	pop	r6
    19b8:	5f 90       	pop	r5
    19ba:	4f 90       	pop	r4
    19bc:	3f 90       	pop	r3
    19be:	2f 90       	pop	r2
    19c0:	08 95       	ret

000019c2 <_ZN4Menu6goDownEv>:
    19c2:	fc 01       	movw	r30, r24
    19c4:	82 85       	ldd	r24, Z+10	; 0x0a
    19c6:	93 85       	ldd	r25, Z+11	; 0x0b
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	93 87       	std	Z+11, r25	; 0x0b
    19cc:	82 87       	std	Z+10, r24	; 0x0a
    19ce:	24 85       	ldd	r18, Z+12	; 0x0c
    19d0:	35 85       	ldd	r19, Z+13	; 0x0d
    19d2:	2f 5f       	subi	r18, 0xFF	; 255
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	35 87       	std	Z+13, r19	; 0x0d
    19d8:	24 87       	std	Z+12, r18	; 0x0c
    19da:	40 89       	ldd	r20, Z+16	; 0x10
    19dc:	51 89       	ldd	r21, Z+17	; 0x11
    19de:	84 17       	cp	r24, r20
    19e0:	95 07       	cpc	r25, r21
    19e2:	9c f4       	brge	.+38     	; 0x1a0a <_ZN4Menu6goDownEv+0x48>
    19e4:	64 e1       	ldi	r22, 0x14	; 20
    19e6:	68 9f       	mul	r22, r24
    19e8:	a0 01       	movw	r20, r0
    19ea:	69 9f       	mul	r22, r25
    19ec:	50 0d       	add	r21, r0
    19ee:	11 24       	eor	r1, r1
    19f0:	a2 81       	ldd	r26, Z+2	; 0x02
    19f2:	b3 81       	ldd	r27, Z+3	; 0x03
    19f4:	a4 0f       	add	r26, r20
    19f6:	b5 1f       	adc	r27, r21
    19f8:	1a 96       	adiw	r26, 0x0a	; 10
    19fa:	6d 91       	ld	r22, X+
    19fc:	7c 91       	ld	r23, X
    19fe:	1b 97       	sbiw	r26, 0x0b	; 11
    1a00:	40 85       	ldd	r20, Z+8	; 0x08
    1a02:	51 85       	ldd	r21, Z+9	; 0x09
    1a04:	64 17       	cp	r22, r20
    1a06:	75 07       	cpc	r23, r21
    1a08:	31 f0       	breq	.+12     	; 0x1a16 <_ZN4Menu6goDownEv+0x54>
    1a0a:	82 1b       	sub	r24, r18
    1a0c:	93 0b       	sbc	r25, r19
    1a0e:	93 87       	std	Z+11, r25	; 0x0b
    1a10:	82 87       	std	Z+10, r24	; 0x0a
    1a12:	15 86       	std	Z+13, r1	; 0x0d
    1a14:	14 86       	std	Z+12, r1	; 0x0c
    1a16:	cf 01       	movw	r24, r30
    1a18:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <_ZN4Menu7drawSubEv>

00001a1c <_ZN4Menu4goUpEv>:
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	fc 01       	movw	r30, r24
    1a26:	22 85       	ldd	r18, Z+10	; 0x0a
    1a28:	33 85       	ldd	r19, Z+11	; 0x0b
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	93 87       	std	Z+11, r25	; 0x0b
    1a30:	82 87       	std	Z+10, r24	; 0x0a
    1a32:	44 85       	ldd	r20, Z+12	; 0x0c
    1a34:	55 85       	ldd	r21, Z+13	; 0x0d
    1a36:	41 50       	subi	r20, 0x01	; 1
    1a38:	51 09       	sbc	r21, r1
    1a3a:	55 87       	std	Z+13, r21	; 0x0d
    1a3c:	44 87       	std	Z+12, r20	; 0x0c
    1a3e:	97 fd       	sbrc	r25, 7
    1a40:	13 c0       	rjmp	.+38     	; 0x1a68 <_ZN4Menu4goUpEv+0x4c>
    1a42:	64 e1       	ldi	r22, 0x14	; 20
    1a44:	68 9f       	mul	r22, r24
    1a46:	a0 01       	movw	r20, r0
    1a48:	69 9f       	mul	r22, r25
    1a4a:	50 0d       	add	r21, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a50:	b3 81       	ldd	r27, Z+3	; 0x03
    1a52:	a4 0f       	add	r26, r20
    1a54:	b5 1f       	adc	r27, r21
    1a56:	1a 96       	adiw	r26, 0x0a	; 10
    1a58:	6d 91       	ld	r22, X+
    1a5a:	7c 91       	ld	r23, X
    1a5c:	1b 97       	sbiw	r26, 0x0b	; 11
    1a5e:	40 85       	ldd	r20, Z+8	; 0x08
    1a60:	51 85       	ldd	r21, Z+9	; 0x09
    1a62:	64 17       	cp	r22, r20
    1a64:	75 07       	cpc	r23, r21
    1a66:	99 f1       	breq	.+102    	; 0x1ace <_ZN4Menu4goUpEv+0xb2>
    1a68:	15 86       	std	Z+13, r1	; 0x0d
    1a6a:	14 86       	std	Z+12, r1	; 0x0c
    1a6c:	c0 89       	ldd	r28, Z+16	; 0x10
    1a6e:	d1 89       	ldd	r29, Z+17	; 0x11
    1a70:	44 e1       	ldi	r20, 0x14	; 20
    1a72:	42 9f       	mul	r20, r18
    1a74:	80 01       	movw	r16, r0
    1a76:	43 9f       	mul	r20, r19
    1a78:	10 0d       	add	r17, r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	2c 17       	cp	r18, r28
    1a82:	3d 07       	cpc	r19, r29
    1a84:	d4 f4       	brge	.+52     	; 0x1aba <_ZN4Menu4goUpEv+0x9e>
    1a86:	a2 81       	ldd	r26, Z+2	; 0x02
    1a88:	b3 81       	ldd	r27, Z+3	; 0x03
    1a8a:	a4 0f       	add	r26, r20
    1a8c:	b5 1f       	adc	r27, r21
    1a8e:	a0 0f       	add	r26, r16
    1a90:	b1 1f       	adc	r27, r17
    1a92:	1a 96       	adiw	r26, 0x0a	; 10
    1a94:	0d 90       	ld	r0, X+
    1a96:	bc 91       	ld	r27, X
    1a98:	a0 2d       	mov	r26, r0
    1a9a:	60 85       	ldd	r22, Z+8	; 0x08
    1a9c:	71 85       	ldd	r23, Z+9	; 0x09
    1a9e:	a6 17       	cp	r26, r22
    1aa0:	b7 07       	cpc	r27, r23
    1aa2:	31 f4       	brne	.+12     	; 0x1ab0 <_ZN4Menu4goUpEv+0x94>
    1aa4:	64 85       	ldd	r22, Z+12	; 0x0c
    1aa6:	75 85       	ldd	r23, Z+13	; 0x0d
    1aa8:	6f 5f       	subi	r22, 0xFF	; 255
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	75 87       	std	Z+13, r23	; 0x0d
    1aae:	64 87       	std	Z+12, r22	; 0x0c
    1ab0:	2f 5f       	subi	r18, 0xFF	; 255
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	4c 5e       	subi	r20, 0xEC	; 236
    1ab6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab8:	e3 cf       	rjmp	.-58     	; 0x1a80 <_ZN4Menu4goUpEv+0x64>
    1aba:	24 85       	ldd	r18, Z+12	; 0x0c
    1abc:	35 85       	ldd	r19, Z+13	; 0x0d
    1abe:	82 0f       	add	r24, r18
    1ac0:	93 1f       	adc	r25, r19
    1ac2:	93 87       	std	Z+11, r25	; 0x0b
    1ac4:	82 87       	std	Z+10, r24	; 0x0a
    1ac6:	21 50       	subi	r18, 0x01	; 1
    1ac8:	31 09       	sbc	r19, r1
    1aca:	35 87       	std	Z+13, r19	; 0x0d
    1acc:	24 87       	std	Z+12, r18	; 0x0c
    1ace:	cf 01       	movw	r24, r30
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <_ZN4Menu7drawSubEv>

00001adc <_ZN4Menu5goSubEi>:
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	ec 01       	movw	r28, r24
    1ae2:	48 89       	ldd	r20, Y+16	; 0x10
    1ae4:	59 89       	ldd	r21, Y+17	; 0x11
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	24 17       	cp	r18, r20
    1af0:	35 07       	cpc	r19, r21
    1af2:	0c f5       	brge	.+66     	; 0x1b36 <_ZN4Menu5goSubEi+0x5a>
    1af4:	ea 81       	ldd	r30, Y+2	; 0x02
    1af6:	fb 81       	ldd	r31, Y+3	; 0x03
    1af8:	e8 0f       	add	r30, r24
    1afa:	f9 1f       	adc	r31, r25
    1afc:	a0 85       	ldd	r26, Z+8	; 0x08
    1afe:	b1 85       	ldd	r27, Z+9	; 0x09
    1b00:	2f 5f       	subi	r18, 0xFF	; 255
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	b7 fd       	sbrc	r27, 7
    1b06:	15 c0       	rjmp	.+42     	; 0x1b32 <_ZN4Menu5goSubEi+0x56>
    1b08:	a6 81       	ldd	r26, Z+6	; 0x06
    1b0a:	b7 81       	ldd	r27, Z+7	; 0x07
    1b0c:	a6 17       	cp	r26, r22
    1b0e:	b7 07       	cpc	r27, r23
    1b10:	81 f4       	brne	.+32     	; 0x1b32 <_ZN4Menu5goSubEi+0x56>
    1b12:	79 87       	std	Y+9, r23	; 0x09
    1b14:	68 87       	std	Y+8, r22	; 0x08
    1b16:	3b 87       	std	Y+11, r19	; 0x0b
    1b18:	2a 87       	std	Y+10, r18	; 0x0a
    1b1a:	1d 86       	std	Y+13, r1	; 0x0d
    1b1c:	1c 86       	std	Y+12, r1	; 0x0c
    1b1e:	bf 01       	movw	r22, r30
    1b20:	ce 01       	movw	r24, r28
    1b22:	4a 96       	adiw	r24, 0x1a	; 26
    1b24:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>
    1b28:	ce 01       	movw	r24, r28
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <_ZN4Menu7drawSubEv>
    1b32:	44 96       	adiw	r24, 0x14	; 20
    1b34:	dc cf       	rjmp	.-72     	; 0x1aee <_ZN4Menu5goSubEi+0x12>
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	08 95       	ret

00001b3c <_ZN4Menu6goBackEv>:
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	1a 96       	adiw	r26, 0x0a	; 10
    1b40:	4d 91       	ld	r20, X+
    1b42:	5c 91       	ld	r21, X
    1b44:	1b 97       	sbiw	r26, 0x0b	; 11
    1b46:	64 e1       	ldi	r22, 0x14	; 20
    1b48:	64 9f       	mul	r22, r20
    1b4a:	90 01       	movw	r18, r0
    1b4c:	65 9f       	mul	r22, r21
    1b4e:	30 0d       	add	r19, r0
    1b50:	11 24       	eor	r1, r1
    1b52:	12 96       	adiw	r26, 0x02	; 2
    1b54:	ed 91       	ld	r30, X+
    1b56:	fc 91       	ld	r31, X
    1b58:	13 97       	sbiw	r26, 0x03	; 3
    1b5a:	e2 0f       	add	r30, r18
    1b5c:	f3 1f       	adc	r31, r19
    1b5e:	64 85       	ldd	r22, Z+12	; 0x0c
    1b60:	75 85       	ldd	r23, Z+13	; 0x0d
    1b62:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <_ZN4Menu5goSubEi>

00001b66 <_ZN4Menu9findFirstE4MItm>:
    1b66:	af 92       	push	r10
    1b68:	bf 92       	push	r11
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	64 97       	sbiw	r28, 0x14	; 20
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	6c 01       	movw	r12, r24
    1b8c:	5b 01       	movw	r10, r22
    1b8e:	e1 2c       	mov	r14, r1
    1b90:	f1 2c       	mov	r15, r1
    1b92:	00 e0       	ldi	r16, 0x00	; 0
    1b94:	10 e0       	ldi	r17, 0x00	; 0
    1b96:	f6 01       	movw	r30, r12
    1b98:	80 89       	ldd	r24, Z+16	; 0x10
    1b9a:	91 89       	ldd	r25, Z+17	; 0x11
    1b9c:	08 17       	cp	r16, r24
    1b9e:	19 07       	cpc	r17, r25
    1ba0:	04 f5       	brge	.+64     	; 0x1be2 <_ZN4Menu9findFirstE4MItm+0x7c>
    1ba2:	62 81       	ldd	r22, Z+2	; 0x02
    1ba4:	73 81       	ldd	r23, Z+3	; 0x03
    1ba6:	6e 0d       	add	r22, r14
    1ba8:	7f 1d       	adc	r23, r15
    1baa:	ce 01       	movw	r24, r28
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN4MItmC1ERKS_>
    1bb2:	f4 e1       	ldi	r31, 0x14	; 20
    1bb4:	ef 0e       	add	r14, r31
    1bb6:	f1 1c       	adc	r15, r1
    1bb8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1bba:	3c 85       	ldd	r19, Y+12	; 0x0c
    1bbc:	f5 01       	movw	r30, r10
    1bbe:	86 81       	ldd	r24, Z+6	; 0x06
    1bc0:	97 81       	ldd	r25, Z+7	; 0x07
    1bc2:	28 17       	cp	r18, r24
    1bc4:	39 07       	cpc	r19, r25
    1bc6:	31 f4       	brne	.+12     	; 0x1bd4 <_ZN4Menu9findFirstE4MItm+0x6e>
    1bc8:	ce 01       	movw	r24, r28
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN4MItmD1Ev>
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	09 c0       	rjmp	.+18     	; 0x1be6 <_ZN4Menu9findFirstE4MItm+0x80>
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN4MItmD1Ev>
    1bdc:	0f 5f       	subi	r16, 0xFF	; 255
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	da cf       	rjmp	.-76     	; 0x1b96 <_ZN4Menu9findFirstE4MItm+0x30>
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	9f ef       	ldi	r25, 0xFF	; 255
    1be6:	64 96       	adiw	r28, 0x14	; 20
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	08 95       	ret

00001c08 <_ZN4Menu6goNextEv>:
    1c08:	df 92       	push	r13
    1c0a:	ef 92       	push	r14
    1c0c:	ff 92       	push	r15
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	64 97       	sbiw	r28, 0x14	; 20
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	8c 01       	movw	r16, r24
    1c28:	fc 01       	movw	r30, r24
    1c2a:	22 85       	ldd	r18, Z+10	; 0x0a
    1c2c:	33 85       	ldd	r19, Z+11	; 0x0b
    1c2e:	2f 3f       	cpi	r18, 0xFF	; 255
    1c30:	ff ef       	ldi	r31, 0xFF	; 255
    1c32:	3f 07       	cpc	r19, r31
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <_ZN4Menu6goNextEv+0x30>
    1c36:	5a c0       	rjmp	.+180    	; 0x1cec <_ZN4Menu6goNextEv+0xe4>
    1c38:	84 e1       	ldi	r24, 0x14	; 20
    1c3a:	d8 2e       	mov	r13, r24
    1c3c:	d2 9e       	mul	r13, r18
    1c3e:	c0 01       	movw	r24, r0
    1c40:	d3 9e       	mul	r13, r19
    1c42:	90 0d       	add	r25, r0
    1c44:	11 24       	eor	r1, r1
    1c46:	f8 01       	movw	r30, r16
    1c48:	62 81       	ldd	r22, Z+2	; 0x02
    1c4a:	73 81       	ldd	r23, Z+3	; 0x03
    1c4c:	68 0f       	add	r22, r24
    1c4e:	79 1f       	adc	r23, r25
    1c50:	ce 01       	movw	r24, r28
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN4MItmC1ERKS_>
    1c58:	be 01       	movw	r22, r28
    1c5a:	6f 5f       	subi	r22, 0xFF	; 255
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	c8 01       	movw	r24, r16
    1c60:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_ZN4Menu9findFirstE4MItm>
    1c64:	7c 01       	movw	r14, r24
    1c66:	ce 01       	movw	r24, r28
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN4MItmD1Ev>
    1c6e:	f8 01       	movw	r30, r16
    1c70:	62 81       	ldd	r22, Z+2	; 0x02
    1c72:	73 81       	ldd	r23, Z+3	; 0x03
    1c74:	ff ef       	ldi	r31, 0xFF	; 255
    1c76:	ef 16       	cp	r14, r31
    1c78:	ff 06       	cpc	r15, r31
    1c7a:	a1 f4       	brne	.+40     	; 0x1ca4 <_ZN4Menu6goNextEv+0x9c>
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	22 85       	ldd	r18, Z+10	; 0x0a
    1c80:	33 85       	ldd	r19, Z+11	; 0x0b
    1c82:	d2 9e       	mul	r13, r18
    1c84:	c0 01       	movw	r24, r0
    1c86:	d3 9e       	mul	r13, r19
    1c88:	90 0d       	add	r25, r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	db 01       	movw	r26, r22
    1c8e:	a8 0f       	add	r26, r24
    1c90:	b9 1f       	adc	r27, r25
    1c92:	20 81       	ld	r18, Z
    1c94:	31 81       	ldd	r19, Z+1	; 0x01
    1c96:	16 96       	adiw	r26, 0x06	; 6
    1c98:	8d 91       	ld	r24, X+
    1c9a:	9c 91       	ld	r25, X
    1c9c:	17 97       	sbiw	r26, 0x07	; 7
    1c9e:	f9 01       	movw	r30, r18
    1ca0:	09 95       	icall
    1ca2:	36 c0       	rjmp	.+108    	; 0x1d10 <_ZN4Menu6goNextEv+0x108>
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	f3 86       	std	Z+11, r15	; 0x0b
    1ca8:	e2 86       	std	Z+10, r14	; 0x0a
    1caa:	de 9c       	mul	r13, r14
    1cac:	c0 01       	movw	r24, r0
    1cae:	df 9c       	mul	r13, r15
    1cb0:	90 0d       	add	r25, r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	68 0f       	add	r22, r24
    1cb6:	79 1f       	adc	r23, r25
    1cb8:	ce 01       	movw	r24, r28
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN4MItmC1ERKS_>
    1cc0:	be 01       	movw	r22, r28
    1cc2:	61 5f       	subi	r22, 0xF1	; 241
    1cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc6:	c8 01       	movw	r24, r16
    1cc8:	4a 96       	adiw	r24, 0x1a	; 26
    1cca:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>
    1cce:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	91 87       	std	Z+9, r25	; 0x09
    1cd6:	80 87       	std	Z+8, r24	; 0x08
    1cd8:	15 86       	std	Z+13, r1	; 0x0d
    1cda:	14 86       	std	Z+12, r1	; 0x0c
    1cdc:	c8 01       	movw	r24, r16
    1cde:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN4Menu7drawSubEv>
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN4MItmD1Ev>
    1cea:	12 c0       	rjmp	.+36     	; 0x1d10 <_ZN4Menu6goNextEv+0x108>
    1cec:	bc 01       	movw	r22, r24
    1cee:	60 5e       	subi	r22, 0xE0	; 224
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf2:	4a 96       	adiw	r24, 0x1a	; 26
    1cf4:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	11 86       	std	Z+9, r1	; 0x09
    1cfc:	10 86       	std	Z+8, r1	; 0x08
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	93 87       	std	Z+11, r25	; 0x0b
    1d04:	82 87       	std	Z+10, r24	; 0x0a
    1d06:	15 86       	std	Z+13, r1	; 0x0d
    1d08:	14 86       	std	Z+12, r1	; 0x0c
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN4Menu7drawSubEv>
    1d10:	64 96       	adiw	r28, 0x14	; 20
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	08 95       	ret

00001d2c <_GLOBAL__sub_I_name>:
  #include <Arduino.h>
#else
  #include <WProgram.h>
#endif

String name;
    1d2c:	67 e8       	ldi	r22, 0x87	; 135
    1d2e:	71 e0       	ldi	r23, 0x01	; 1
    1d30:	82 ee       	ldi	r24, 0xE2	; 226
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
int first;
int second;
int sub_id;
int back_id;
String sub_title;
    1d38:	67 e8       	ldi	r22, 0x87	; 135
    1d3a:	71 e0       	ldi	r23, 0x01	; 1
    1d3c:	8c ed       	ldi	r24, 0xDC	; 220
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	0c 94 46 1a 	jmp	0x348c	; 0x348c <_ZN6StringC1EPKc>

00001d44 <_GLOBAL__sub_D_name>:
    1d44:	8c ed       	ldi	r24, 0xDC	; 220
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_ZN6StringD1Ev>
  #include <Arduino.h>
#else
  #include <WProgram.h>
#endif

String name;
    1d4c:	82 ee       	ldi	r24, 0xE2	; 226
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <_ZN6StringD1Ev>

00001d54 <_ZN13RotaryEncoderC1Eiiiii>:
#include "RotaryEncoder.h"

RotaryEncoder::RotaryEncoder(int ENC_A, int ENC_B, int multiplier, int stepSize, int pauseLength) {
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	ec 01       	movw	r28, r24
  _ENC_A = ENC_A;
    1d62:	79 83       	std	Y+1, r23	; 0x01
    1d64:	68 83       	st	Y, r22
  _ENC_B = ENC_B;
    1d66:	5b 83       	std	Y+3, r21	; 0x03
    1d68:	4a 83       	std	Y+2, r20	; 0x02
  _multiplier = multiplier;
    1d6a:	3f 87       	std	Y+15, r19	; 0x0f
    1d6c:	2e 87       	std	Y+14, r18	; 0x0e
  _stepSize = stepSize;
    1d6e:	19 8b       	std	Y+17, r17	; 0x11
    1d70:	08 8b       	std	Y+16, r16	; 0x10
  _pauseLength = pauseLength;
    1d72:	fd 86       	std	Y+13, r15	; 0x0d
    1d74:	ec 86       	std	Y+12, r14	; 0x0c
  _oldENC_A = 0;
    1d76:	1d 82       	std	Y+5, r1	; 0x05
    1d78:	1c 82       	std	Y+4, r1	; 0x04
  _oldENC_B = 0;
    1d7a:	1f 82       	std	Y+7, r1	; 0x07
    1d7c:	1e 82       	std	Y+6, r1	; 0x06
  _lastENCread = 0;
    1d7e:	19 86       	std	Y+9, r1	; 0x09
    1d80:	18 86       	std	Y+8, r1	; 0x08
  _ENCcounter = 0;
    1d82:	1b 86       	std	Y+11, r1	; 0x0b
    1d84:	1a 86       	std	Y+10, r1	; 0x0a
  _lastENCreadTime = micros();  
    1d86:	0e 94 74 18 	call	0x30e8	; 0x30e8 <micros>
    1d8a:	6a 8b       	std	Y+18, r22	; 0x12
    1d8c:	7b 8b       	std	Y+19, r23	; 0x13
    1d8e:	8c 8b       	std	Y+20, r24	; 0x14
    1d90:	9d 8b       	std	Y+21, r25	; 0x15
  //define pin modes
  pinMode(_ENC_A, INPUT);
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	88 81       	ld	r24, Y
    1d96:	0e 94 44 19 	call	0x3288	; 0x3288 <pinMode>
  pinMode(_ENC_B, INPUT);
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	0e 94 44 19 	call	0x3288	; 0x3288 <pinMode>
  digitalWrite(_ENC_A,HIGH); //these pins do not have pull up resistors on an attiny...
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	88 81       	ld	r24, Y
    1da6:	0e 94 80 19 	call	0x3300	; 0x3300 <digitalWrite>
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
  _lastENCreadTime = micros();  
  //define pin modes
  pinMode(_ENC_A, INPUT);
  pinMode(_ENC_B, INPUT);
  digitalWrite(_ENC_A,HIGH); //these pins do not have pull up resistors on an attiny...
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
    1dba:	0c 94 80 19 	jmp	0x3300	; 0x3300 <digitalWrite>

00001dbe <_ZN13RotaryEncoder11readEncoderEv>:
}
int RotaryEncoder::readEncoder() {
    1dbe:	cf 92       	push	r12
    1dc0:	df 92       	push	r13
    1dc2:	ef 92       	push	r14
    1dc4:	ff 92       	push	r15
    1dc6:	0f 93       	push	r16
    1dc8:	1f 93       	push	r17
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	ec 01       	movw	r28, r24
  int a0Pin = digitalRead(_ENC_A);
    1dd0:	88 81       	ld	r24, Y
    1dd2:	0e 94 af 19 	call	0x335e	; 0x335e <digitalRead>
    1dd6:	7c 01       	movw	r14, r24
  int a1Pin = digitalRead(_ENC_B);
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	0e 94 af 19 	call	0x335e	; 0x335e <digitalRead>
  int changevalue = 1;
  int returnVal = 0;
  if(a0Pin != _oldENC_A || a1Pin != _oldENC_B) {
    1dde:	2c 81       	ldd	r18, Y+4	; 0x04
    1de0:	3d 81       	ldd	r19, Y+5	; 0x05
    1de2:	4e 81       	ldd	r20, Y+6	; 0x06
    1de4:	5f 81       	ldd	r21, Y+7	; 0x07
    1de6:	e2 16       	cp	r14, r18
    1de8:	f3 06       	cpc	r15, r19
    1dea:	21 f4       	brne	.+8      	; 0x1df4 <_ZN13RotaryEncoder11readEncoderEv+0x36>
    1dec:	84 17       	cp	r24, r20
    1dee:	95 07       	cpc	r25, r21
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <_ZN13RotaryEncoder11readEncoderEv+0x36>
    1df2:	6f c0       	rjmp	.+222    	; 0x1ed2 <_ZN13RotaryEncoder11readEncoderEv+0x114>
    if(_oldENC_A == a1Pin && _oldENC_B != a0Pin) {
    1df4:	82 17       	cp	r24, r18
    1df6:	93 07       	cpc	r25, r19
    1df8:	19 f4       	brne	.+6      	; 0x1e00 <_ZN13RotaryEncoder11readEncoderEv+0x42>
    1dfa:	e4 16       	cp	r14, r20
    1dfc:	f5 06       	cpc	r15, r21
    1dfe:	61 f4       	brne	.+24     	; 0x1e18 <_ZN13RotaryEncoder11readEncoderEv+0x5a>
      returnVal = -1;
    } else if (_oldENC_B == a0Pin && _oldENC_A != a1Pin) {
    1e00:	e4 16       	cp	r14, r20
    1e02:	f5 06       	cpc	r15, r21
    1e04:	61 f4       	brne	.+24     	; 0x1e1e <_ZN13RotaryEncoder11readEncoderEv+0x60>
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
  int returnVal = 0;
  if(a0Pin != _oldENC_A || a1Pin != _oldENC_B) {
    if(_oldENC_A == a1Pin && _oldENC_B != a0Pin) {
      returnVal = -1;
    1e06:	51 e0       	ldi	r21, 0x01	; 1
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	82 17       	cp	r24, r18
    1e0c:	93 07       	cpc	r25, r19
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <_ZN13RotaryEncoder11readEncoderEv+0x54>
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	05 2f       	mov	r16, r21
    1e14:	14 2f       	mov	r17, r20
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <_ZN13RotaryEncoder11readEncoderEv+0x64>
    1e18:	0f ef       	ldi	r16, 0xFF	; 255
    1e1a:	1f ef       	ldi	r17, 0xFF	; 255
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <_ZN13RotaryEncoder11readEncoderEv+0x64>
}
int RotaryEncoder::readEncoder() {
  int a0Pin = digitalRead(_ENC_A);
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
  int returnVal = 0;
    1e1e:	00 e0       	ldi	r16, 0x00	; 0
    1e20:	10 e0       	ldi	r17, 0x00	; 0
    if(_oldENC_A == a1Pin && _oldENC_B != a0Pin) {
      returnVal = -1;
    } else if (_oldENC_B == a0Pin && _oldENC_A != a1Pin) {
      returnVal = 1;
    }
    _oldENC_A = a0Pin;
    1e22:	fd 82       	std	Y+5, r15	; 0x05
    1e24:	ec 82       	std	Y+4, r14	; 0x04
    _oldENC_B = a1Pin;
    1e26:	9f 83       	std	Y+7, r25	; 0x07
    1e28:	8e 83       	std	Y+6, r24	; 0x06
    
    if(returnVal != 0) {
    1e2a:	01 15       	cp	r16, r1
    1e2c:	11 05       	cpc	r17, r1
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <_ZN13RotaryEncoder11readEncoderEv+0x74>
    1e30:	45 c0       	rjmp	.+138    	; 0x1ebc <_ZN13RotaryEncoder11readEncoderEv+0xfe>
      if(returnVal == _lastENCread) {
    1e32:	88 85       	ldd	r24, Y+8	; 0x08
    1e34:	99 85       	ldd	r25, Y+9	; 0x09
    1e36:	08 17       	cp	r16, r24
    1e38:	19 07       	cpc	r17, r25
    1e3a:	c1 f5       	brne	.+112    	; 0x1eac <_ZN13RotaryEncoder11readEncoderEv+0xee>
          _ENCcounter++;
    1e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	9b 87       	std	Y+11, r25	; 0x0b
    1e44:	8a 87       	std	Y+10, r24	; 0x0a
          if((micros() - _lastENCreadTime) < _pauseLength) {
    1e46:	0e 94 74 18 	call	0x30e8	; 0x30e8 <micros>
    1e4a:	ca 88       	ldd	r12, Y+18	; 0x12
    1e4c:	db 88       	ldd	r13, Y+19	; 0x13
    1e4e:	ec 88       	ldd	r14, Y+20	; 0x14
    1e50:	fd 88       	ldd	r15, Y+21	; 0x15
    1e52:	ab 01       	movw	r20, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	4c 19       	sub	r20, r12
    1e58:	5d 09       	sbc	r21, r13
    1e5a:	6e 09       	sbc	r22, r14
    1e5c:	7f 09       	sbc	r23, r15
    1e5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e60:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e62:	09 2e       	mov	r0, r25
    1e64:	00 0c       	add	r0, r0
    1e66:	aa 0b       	sbc	r26, r26
    1e68:	bb 0b       	sbc	r27, r27
    1e6a:	48 17       	cp	r20, r24
    1e6c:	59 07       	cpc	r21, r25
    1e6e:	6a 07       	cpc	r22, r26
    1e70:	7b 07       	cpc	r23, r27
    1e72:	90 f4       	brcc	.+36     	; 0x1e98 <_ZN13RotaryEncoder11readEncoderEv+0xda>
            changevalue = max((_ENCcounter/_stepSize)*_multiplier,1);
    1e74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e76:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e78:	68 89       	ldd	r22, Y+16	; 0x10
    1e7a:	79 89       	ldd	r23, Y+17	; 0x11
    1e7c:	0e 94 32 1b 	call	0x3664	; 0x3664 <__divmodhi4>
    1e80:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e82:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e84:	68 9f       	mul	r22, r24
    1e86:	70 01       	movw	r14, r0
    1e88:	69 9f       	mul	r22, r25
    1e8a:	f0 0c       	add	r15, r0
    1e8c:	78 9f       	mul	r23, r24
    1e8e:	f0 0c       	add	r15, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	1e 14       	cp	r1, r14
    1e94:	1f 04       	cpc	r1, r15
    1e96:	1c f0       	brlt	.+6      	; 0x1e9e <_ZN13RotaryEncoder11readEncoderEv+0xe0>
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
}
int RotaryEncoder::readEncoder() {
  int a0Pin = digitalRead(_ENC_A);
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
    1e98:	ee 24       	eor	r14, r14
    1e9a:	e3 94       	inc	r14
    1e9c:	f1 2c       	mov	r15, r1
      if(returnVal == _lastENCread) {
          _ENCcounter++;
          if((micros() - _lastENCreadTime) < _pauseLength) {
            changevalue = max((_ENCcounter/_stepSize)*_multiplier,1);
          }
          _lastENCreadTime = micros();
    1e9e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <micros>
    1ea2:	6a 8b       	std	Y+18, r22	; 0x12
    1ea4:	7b 8b       	std	Y+19, r23	; 0x13
    1ea6:	8c 8b       	std	Y+20, r24	; 0x14
    1ea8:	9d 8b       	std	Y+21, r25	; 0x15
    1eaa:	05 c0       	rjmp	.+10     	; 0x1eb6 <_ZN13RotaryEncoder11readEncoderEv+0xf8>
        } else {
          _ENCcounter=0;
    1eac:	1b 86       	std	Y+11, r1	; 0x0b
    1eae:	1a 86       	std	Y+10, r1	; 0x0a
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
}
int RotaryEncoder::readEncoder() {
  int a0Pin = digitalRead(_ENC_A);
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
    1eb0:	ee 24       	eor	r14, r14
    1eb2:	e3 94       	inc	r14
    1eb4:	f1 2c       	mov	r15, r1
          }
          _lastENCreadTime = micros();
        } else {
          _ENCcounter=0;
      }
      _lastENCread = returnVal;
    1eb6:	19 87       	std	Y+9, r17	; 0x09
    1eb8:	08 87       	std	Y+8, r16	; 0x08
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <_ZN13RotaryEncoder11readEncoderEv+0x104>
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
}
int RotaryEncoder::readEncoder() {
  int a0Pin = digitalRead(_ENC_A);
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
    1ebc:	ee 24       	eor	r14, r14
    1ebe:	e3 94       	inc	r14
    1ec0:	f1 2c       	mov	r15, r1
          _ENCcounter=0;
      }
      _lastENCread = returnVal;
    }
    
    return returnVal*changevalue;
    1ec2:	e0 9e       	mul	r14, r16
    1ec4:	c0 01       	movw	r24, r0
    1ec6:	e1 9e       	mul	r14, r17
    1ec8:	90 0d       	add	r25, r0
    1eca:	f0 9e       	mul	r15, r16
    1ecc:	90 0d       	add	r25, r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <_ZN13RotaryEncoder11readEncoderEv+0x118>
  } else {
    return 0;
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	1f 91       	pop	r17
    1edc:	0f 91       	pop	r16
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	df 90       	pop	r13
    1ee4:	cf 90       	pop	r12
    1ee6:	08 95       	ret

00001ee8 <_ZN11SimpleTimerC1Ev>:
    if (numTimer >= MAX_TIMERS) {
        return false;
    }

    return enabled[numTimer];
}
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	ec 01       	movw	r28, r24
    1ef6:	0e 94 68 18 	call	0x30d0	; 0x30d0 <millis>
    1efa:	7e 01       	movw	r14, r28
    1efc:	2c e8       	ldi	r18, 0x8C	; 140
    1efe:	e2 0e       	add	r14, r18
    1f00:	f1 1c       	adc	r15, r1
    1f02:	fe 01       	movw	r30, r28
    1f04:	b8 96       	adiw	r30, 0x28	; 40
    1f06:	6e 01       	movw	r12, r28
    1f08:	9e 01       	movw	r18, r28
    1f0a:	24 5c       	subi	r18, 0xC4	; 196
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	d7 01       	movw	r26, r14
    1f10:	1d 92       	st	X+, r1
    1f12:	7d 01       	movw	r14, r26
    1f14:	11 92       	st	Z+, r1
    1f16:	11 92       	st	Z+, r1
    1f18:	d6 01       	movw	r26, r12
    1f1a:	6d 93       	st	X+, r22
    1f1c:	7d 93       	st	X+, r23
    1f1e:	8d 93       	st	X+, r24
    1f20:	9d 93       	st	X+, r25
    1f22:	6d 01       	movw	r12, r26
    1f24:	af 01       	movw	r20, r30
    1f26:	42 5b       	subi	r20, 0xB2	; 178
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	da 01       	movw	r26, r20
    1f2c:	1d 92       	st	X+, r1
    1f2e:	1c 92       	st	X, r1
    1f30:	e2 17       	cp	r30, r18
    1f32:	f3 07       	cpc	r31, r19
    1f34:	61 f7       	brne	.-40     	; 0x1f0e <_ZN11SimpleTimerC1Ev+0x26>
    1f36:	c6 55       	subi	r28, 0x56	; 86
    1f38:	df 4f       	sbci	r29, 0xFF	; 255
    1f3a:	19 82       	std	Y+1, r1	; 0x01
    1f3c:	18 82       	st	Y, r1
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	08 95       	ret

00001f4c <_ZN11SimpleTimer17findFirstFreeSlotEv>:
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e6 55       	subi	r30, 0x56	; 86
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	20 81       	ld	r18, Z
    1f54:	31 81       	ldd	r19, Z+1	; 0x01
    1f56:	2a 30       	cpi	r18, 0x0A	; 10
    1f58:	31 05       	cpc	r19, r1
    1f5a:	6c f4       	brge	.+26     	; 0x1f76 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2a>
    1f5c:	e2 58       	subi	r30, 0x82	; 130
    1f5e:	f1 09       	sbc	r31, r1
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 91       	ld	r24, Z+
    1f66:	91 91       	ld	r25, Z+
    1f68:	89 2b       	or	r24, r25
    1f6a:	41 f0       	breq	.+16     	; 0x1f7c <_ZN11SimpleTimer17findFirstFreeSlotEv+0x30>
    1f6c:	2f 5f       	subi	r18, 0xFF	; 255
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	2a 30       	cpi	r18, 0x0A	; 10
    1f72:	31 05       	cpc	r19, r1
    1f74:	b9 f7       	brne	.-18     	; 0x1f64 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x18>
    1f76:	8f ef       	ldi	r24, 0xFF	; 255
    1f78:	9f ef       	ldi	r25, 0xFF	; 255
    1f7a:	08 95       	ret
    1f7c:	c9 01       	movw	r24, r18
    1f7e:	08 95       	ret

00001f80 <_ZN11SimpleTimer8setTimerElPFvvEi>:
    1f80:	4f 92       	push	r4
    1f82:	5f 92       	push	r5
    1f84:	6f 92       	push	r6
    1f86:	7f 92       	push	r7
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	ec 01       	movw	r28, r24
    1f9e:	2a 01       	movw	r4, r20
    1fa0:	3b 01       	movw	r6, r22
    1fa2:	69 01       	movw	r12, r18
    1fa4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1fa8:	7c 01       	movw	r14, r24
    1faa:	97 fd       	sbrc	r25, 7
    1fac:	31 c0       	rjmp	.+98     	; 0x2010 <_ZN11SimpleTimer8setTimerElPFvvEi+0x90>
    1fae:	c1 14       	cp	r12, r1
    1fb0:	d1 04       	cpc	r13, r1
    1fb2:	71 f1       	breq	.+92     	; 0x2010 <_ZN11SimpleTimer8setTimerElPFvvEi+0x90>
    1fb4:	5c 01       	movw	r10, r24
    1fb6:	aa 0c       	add	r10, r10
    1fb8:	bb 1c       	adc	r11, r11
    1fba:	aa 0c       	add	r10, r10
    1fbc:	bb 1c       	adc	r11, r11
    1fbe:	ac 0e       	add	r10, r28
    1fc0:	bd 1e       	adc	r11, r29
    1fc2:	f5 01       	movw	r30, r10
    1fc4:	44 ae       	std	Z+60, r4	; 0x3c
    1fc6:	55 ae       	std	Z+61, r5	; 0x3d
    1fc8:	66 ae       	std	Z+62, r6	; 0x3e
    1fca:	77 ae       	std	Z+63, r7	; 0x3f
    1fcc:	f7 01       	movw	r30, r14
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	ec 0f       	add	r30, r28
    1fd4:	fd 1f       	adc	r31, r29
    1fd6:	d1 a6       	std	Z+41, r13	; 0x29
    1fd8:	c0 a6       	std	Z+40, r12	; 0x28
    1fda:	ec 59       	subi	r30, 0x9C	; 156
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	11 83       	std	Z+1, r17	; 0x01
    1fe0:	00 83       	st	Z, r16
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ee 0d       	add	r30, r14
    1fe6:	ff 1d       	adc	r31, r15
    1fe8:	e4 57       	subi	r30, 0x74	; 116
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	80 83       	st	Z, r24
    1ff0:	0e 94 68 18 	call	0x30d0	; 0x30d0 <millis>
    1ff4:	f5 01       	movw	r30, r10
    1ff6:	60 83       	st	Z, r22
    1ff8:	71 83       	std	Z+1, r23	; 0x01
    1ffa:	82 83       	std	Z+2, r24	; 0x02
    1ffc:	93 83       	std	Z+3, r25	; 0x03
    1ffe:	c6 55       	subi	r28, 0x56	; 86
    2000:	df 4f       	sbci	r29, 0xFF	; 255
    2002:	88 81       	ld	r24, Y
    2004:	99 81       	ldd	r25, Y+1	; 0x01
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	99 83       	std	Y+1, r25	; 0x01
    200a:	88 83       	st	Y, r24
    200c:	c7 01       	movw	r24, r14
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <_ZN11SimpleTimer8setTimerElPFvvEi+0x94>
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	9f ef       	ldi	r25, 0xFF	; 255
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	df 90       	pop	r13
    2022:	cf 90       	pop	r12
    2024:	bf 90       	pop	r11
    2026:	af 90       	pop	r10
    2028:	7f 90       	pop	r7
    202a:	6f 90       	pop	r6
    202c:	5f 90       	pop	r5
    202e:	4f 90       	pop	r4
    2030:	08 95       	ret

00002032 <_ZN11SimpleTimer11setIntervalElPFvvE>:
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	00 e0       	ldi	r16, 0x00	; 0
    2038:	10 e0       	ldi	r17, 0x00	; 0
    203a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN11SimpleTimer8setTimerElPFvvEi>
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	08 95       	ret

00002044 <_ZN11SimpleTimer11deleteTimerEi>:
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	6a 30       	cpi	r22, 0x0A	; 10
    204a:	71 05       	cpc	r23, r1
    204c:	bc f5       	brge	.+110    	; 0x20bc <_ZN11SimpleTimer11deleteTimerEi+0x78>
    204e:	ec 01       	movw	r28, r24
    2050:	c6 55       	subi	r28, 0x56	; 86
    2052:	df 4f       	sbci	r29, 0xFF	; 255
    2054:	28 81       	ld	r18, Y
    2056:	39 81       	ldd	r19, Y+1	; 0x01
    2058:	21 15       	cp	r18, r1
    205a:	31 05       	cpc	r19, r1
    205c:	79 f1       	breq	.+94     	; 0x20bc <_ZN11SimpleTimer11deleteTimerEi+0x78>
    205e:	db 01       	movw	r26, r22
    2060:	aa 0f       	add	r26, r26
    2062:	bb 1f       	adc	r27, r27
    2064:	a8 0f       	add	r26, r24
    2066:	b9 1f       	adc	r27, r25
    2068:	98 96       	adiw	r26, 0x28	; 40
    206a:	4d 91       	ld	r20, X+
    206c:	5c 91       	ld	r21, X
    206e:	99 97       	sbiw	r26, 0x29	; 41
    2070:	45 2b       	or	r20, r21
    2072:	21 f1       	breq	.+72     	; 0x20bc <_ZN11SimpleTimer11deleteTimerEi+0x78>
    2074:	99 96       	adiw	r26, 0x29	; 41
    2076:	1c 92       	st	X, r1
    2078:	1e 92       	st	-X, r1
    207a:	98 97       	sbiw	r26, 0x28	; 40
    207c:	fc 01       	movw	r30, r24
    207e:	e6 0f       	add	r30, r22
    2080:	f7 1f       	adc	r31, r23
    2082:	e4 57       	subi	r30, 0x74	; 116
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	10 82       	st	Z, r1
    2088:	fd 01       	movw	r30, r26
    208a:	ea 56       	subi	r30, 0x6A	; 106
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	11 82       	std	Z+1, r1	; 0x01
    2090:	10 82       	st	Z, r1
    2092:	61 5f       	subi	r22, 0xF1	; 241
    2094:	7f 4f       	sbci	r23, 0xFF	; 255
    2096:	66 0f       	add	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	66 0f       	add	r22, r22
    209c:	77 1f       	adc	r23, r23
    209e:	fc 01       	movw	r30, r24
    20a0:	e6 0f       	add	r30, r22
    20a2:	f7 1f       	adc	r31, r23
    20a4:	10 82       	st	Z, r1
    20a6:	11 82       	std	Z+1, r1	; 0x01
    20a8:	12 82       	std	Z+2, r1	; 0x02
    20aa:	13 82       	std	Z+3, r1	; 0x03
    20ac:	a8 58       	subi	r26, 0x88	; 136
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	1d 92       	st	X+, r1
    20b2:	1c 92       	st	X, r1
    20b4:	21 50       	subi	r18, 0x01	; 1
    20b6:	31 09       	sbc	r19, r1
    20b8:	39 83       	std	Y+1, r19	; 0x01
    20ba:	28 83       	st	Y, r18
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	08 95       	ret

000020c2 <_ZN11SimpleTimer3runEv>:
    20c2:	2f 92       	push	r2
    20c4:	3f 92       	push	r3
    20c6:	4f 92       	push	r4
    20c8:	5f 92       	push	r5
    20ca:	6f 92       	push	r6
    20cc:	7f 92       	push	r7
    20ce:	8f 92       	push	r8
    20d0:	9f 92       	push	r9
    20d2:	af 92       	push	r10
    20d4:	bf 92       	push	r11
    20d6:	cf 92       	push	r12
    20d8:	df 92       	push	r13
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <_ZN11SimpleTimer3runEv+0x26>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <_ZN11SimpleTimer3runEv+0x28>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <_ZN11SimpleTimer3runEv+0x2a>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <millis>
    20f8:	6b 01       	movw	r12, r22
    20fa:	7c 01       	movw	r14, r24
    20fc:	eb 81       	ldd	r30, Y+3	; 0x03
    20fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2100:	ec 59       	subi	r30, 0x9C	; 156
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	0b 81       	ldd	r16, Y+3	; 0x03
    2106:	1c 81       	ldd	r17, Y+4	; 0x04
    2108:	98 01       	movw	r18, r16
    210a:	24 57       	subi	r18, 0x74	; 116
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	c8 01       	movw	r24, r16
    2110:	88 58       	subi	r24, 0x88	; 136
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	1e 83       	std	Y+6, r17	; 0x06
    211a:	0d 83       	std	Y+5, r16	; 0x05
    211c:	22 24       	eor	r2, r2
    211e:	23 94       	inc	r2
    2120:	31 2c       	mov	r3, r1
    2122:	13 aa       	std	Z+51, r1	; 0x33
    2124:	12 aa       	std	Z+50, r1	; 0x32
    2126:	cf 01       	movw	r24, r30
    2128:	cc 97       	sbiw	r24, 0x3c	; 60
    212a:	dc 01       	movw	r26, r24
    212c:	8d 91       	ld	r24, X+
    212e:	9c 91       	ld	r25, X
    2130:	89 2b       	or	r24, r25
    2132:	f1 f1       	breq	.+124    	; 0x21b0 <_ZN11SimpleTimer3runEv+0xee>
    2134:	ad 81       	ldd	r26, Y+5	; 0x05
    2136:	be 81       	ldd	r27, Y+6	; 0x06
    2138:	8d 90       	ld	r8, X+
    213a:	9d 90       	ld	r9, X+
    213c:	ad 90       	ld	r10, X+
    213e:	bc 90       	ld	r11, X
    2140:	13 97       	sbiw	r26, 0x03	; 3
    2142:	dc 96       	adiw	r26, 0x3c	; 60
    2144:	4d 91       	ld	r20, X+
    2146:	5d 91       	ld	r21, X+
    2148:	6d 91       	ld	r22, X+
    214a:	7c 91       	ld	r23, X
    214c:	df 97       	sbiw	r26, 0x3f	; 63
    214e:	26 01       	movw	r4, r12
    2150:	37 01       	movw	r6, r14
    2152:	48 18       	sub	r4, r8
    2154:	59 08       	sbc	r5, r9
    2156:	6a 08       	sbc	r6, r10
    2158:	7b 08       	sbc	r7, r11
    215a:	44 16       	cp	r4, r20
    215c:	55 06       	cpc	r5, r21
    215e:	66 06       	cpc	r6, r22
    2160:	77 06       	cpc	r7, r23
    2162:	30 f1       	brcs	.+76     	; 0x21b0 <_ZN11SimpleTimer3runEv+0xee>
    2164:	48 0d       	add	r20, r8
    2166:	59 1d       	adc	r21, r9
    2168:	6a 1d       	adc	r22, r10
    216a:	7b 1d       	adc	r23, r11
    216c:	4d 93       	st	X+, r20
    216e:	5d 93       	st	X+, r21
    2170:	6d 93       	st	X+, r22
    2172:	7c 93       	st	X, r23
    2174:	13 97       	sbiw	r26, 0x03	; 3
    2176:	d9 01       	movw	r26, r18
    2178:	8c 91       	ld	r24, X
    217a:	88 23       	and	r24, r24
    217c:	c9 f0       	breq	.+50     	; 0x21b0 <_ZN11SimpleTimer3runEv+0xee>
    217e:	40 81       	ld	r20, Z
    2180:	51 81       	ldd	r21, Z+1	; 0x01
    2182:	41 15       	cp	r20, r1
    2184:	51 05       	cpc	r21, r1
    2186:	19 f4       	brne	.+6      	; 0x218e <_ZN11SimpleTimer3runEv+0xcc>
    2188:	33 aa       	std	Z+51, r3	; 0x33
    218a:	22 aa       	std	Z+50, r2	; 0x32
    218c:	11 c0       	rjmp	.+34     	; 0x21b0 <_ZN11SimpleTimer3runEv+0xee>
    218e:	84 89       	ldd	r24, Z+20	; 0x14
    2190:	95 89       	ldd	r25, Z+21	; 0x15
    2192:	84 17       	cp	r24, r20
    2194:	95 07       	cpc	r25, r21
    2196:	64 f4       	brge	.+24     	; 0x21b0 <_ZN11SimpleTimer3runEv+0xee>
    2198:	33 aa       	std	Z+51, r3	; 0x33
    219a:	22 aa       	std	Z+50, r2	; 0x32
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	95 8b       	std	Z+21, r25	; 0x15
    21a0:	84 8b       	std	Z+20, r24	; 0x14
    21a2:	84 17       	cp	r24, r20
    21a4:	95 07       	cpc	r25, r21
    21a6:	24 f0       	brlt	.+8      	; 0x21b0 <_ZN11SimpleTimer3runEv+0xee>
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	93 ab       	std	Z+51, r25	; 0x33
    21ae:	82 ab       	std	Z+50, r24	; 0x32
    21b0:	32 96       	adiw	r30, 0x02	; 2
    21b2:	ad 81       	ldd	r26, Y+5	; 0x05
    21b4:	be 81       	ldd	r27, Y+6	; 0x06
    21b6:	14 96       	adiw	r26, 0x04	; 4
    21b8:	be 83       	std	Y+6, r27	; 0x06
    21ba:	ad 83       	std	Y+5, r26	; 0x05
    21bc:	2f 5f       	subi	r18, 0xFF	; 255
    21be:	3f 4f       	sbci	r19, 0xFF	; 255
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	9a 81       	ldd	r25, Y+2	; 0x02
    21c4:	e8 17       	cp	r30, r24
    21c6:	f9 07       	cpc	r31, r25
    21c8:	09 f0       	breq	.+2      	; 0x21cc <_ZN11SimpleTimer3runEv+0x10a>
    21ca:	ab cf       	rjmp	.-170    	; 0x2122 <_ZN11SimpleTimer3runEv+0x60>
    21cc:	e1 2c       	mov	r14, r1
    21ce:	f1 2c       	mov	r15, r1
    21d0:	f8 01       	movw	r30, r16
    21d2:	ea 56       	subi	r30, 0x6A	; 106
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	91 05       	cpc	r25, r1
    21de:	71 f0       	breq	.+28     	; 0x21fc <_ZN11SimpleTimer3runEv+0x13a>
    21e0:	02 97       	sbiw	r24, 0x02	; 2
    21e2:	91 f4       	brne	.+36     	; 0x2208 <_ZN11SimpleTimer3runEv+0x146>
    21e4:	d8 01       	movw	r26, r16
    21e6:	98 96       	adiw	r26, 0x28	; 40
    21e8:	ed 91       	ld	r30, X+
    21ea:	fc 91       	ld	r31, X
    21ec:	99 97       	sbiw	r26, 0x29	; 41
    21ee:	09 95       	icall
    21f0:	b7 01       	movw	r22, r14
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	0e 94 22 10 	call	0x2044	; 0x2044 <_ZN11SimpleTimer11deleteTimerEi>
    21fa:	06 c0       	rjmp	.+12     	; 0x2208 <_ZN11SimpleTimer3runEv+0x146>
    21fc:	d8 01       	movw	r26, r16
    21fe:	98 96       	adiw	r26, 0x28	; 40
    2200:	ed 91       	ld	r30, X+
    2202:	fc 91       	ld	r31, X
    2204:	99 97       	sbiw	r26, 0x29	; 41
    2206:	09 95       	icall
    2208:	bf ef       	ldi	r27, 0xFF	; 255
    220a:	eb 1a       	sub	r14, r27
    220c:	fb 0a       	sbc	r15, r27
    220e:	0e 5f       	subi	r16, 0xFE	; 254
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	8a e0       	ldi	r24, 0x0A	; 10
    2214:	e8 16       	cp	r14, r24
    2216:	f1 04       	cpc	r15, r1
    2218:	d9 f6       	brne	.-74     	; 0x21d0 <_ZN11SimpleTimer3runEv+0x10e>
    221a:	26 96       	adiw	r28, 0x06	; 6
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	bf 90       	pop	r11
    2238:	af 90       	pop	r10
    223a:	9f 90       	pop	r9
    223c:	8f 90       	pop	r8
    223e:	7f 90       	pop	r7
    2240:	6f 90       	pop	r6
    2242:	5f 90       	pop	r5
    2244:	4f 90       	pop	r4
    2246:	3f 90       	pop	r3
    2248:	2f 90       	pop	r2
    224a:	08 95       	ret

0000224c <_ZN11SimpleTimer12restartTimerEi>:
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	6a 30       	cpi	r22, 0x0A	; 10
    2256:	71 05       	cpc	r23, r1
    2258:	74 f4       	brge	.+28     	; 0x2276 <_ZN11SimpleTimer12restartTimerEi+0x2a>
    225a:	eb 01       	movw	r28, r22
    225c:	8c 01       	movw	r16, r24
    225e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <millis>
    2262:	cc 0f       	add	r28, r28
    2264:	dd 1f       	adc	r29, r29
    2266:	cc 0f       	add	r28, r28
    2268:	dd 1f       	adc	r29, r29
    226a:	c0 0f       	add	r28, r16
    226c:	d1 1f       	adc	r29, r17
    226e:	68 83       	st	Y, r22
    2270:	79 83       	std	Y+1, r23	; 0x01
    2272:	8a 83       	std	Y+2, r24	; 0x02
    2274:	9b 83       	std	Y+3, r25	; 0x03
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	08 95       	ret

00002280 <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
    2280:	6a 30       	cpi	r22, 0x0A	; 10
    2282:	71 05       	cpc	r23, r1
    2284:	3c f4       	brge	.+14     	; 0x2294 <_ZN11SimpleTimer6enableEi+0x14>
        return;
    }

    enabled[numTimer] = true;
    2286:	68 0f       	add	r22, r24
    2288:	79 1f       	adc	r23, r25
    228a:	fb 01       	movw	r30, r22
    228c:	e4 57       	subi	r30, 0x74	; 116
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	80 83       	st	Z, r24
    2294:	08 95       	ret

00002296 <_ZN11SimpleTimer7disableEi>:
}


void SimpleTimer::disable(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
    2296:	6a 30       	cpi	r22, 0x0A	; 10
    2298:	71 05       	cpc	r23, r1
    229a:	34 f4       	brge	.+12     	; 0x22a8 <_ZN11SimpleTimer7disableEi+0x12>
        return;
    }

    enabled[numTimer] = false;
    229c:	68 0f       	add	r22, r24
    229e:	79 1f       	adc	r23, r25
    22a0:	fb 01       	movw	r30, r22
    22a2:	e4 57       	subi	r30, 0x74	; 116
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	10 82       	st	Z, r1
    22a8:	08 95       	ret

000022aa <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22aa:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi_state>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <twi_sendStop>
    22b4:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <twi_inRepStart>
    22b8:	61 e0       	ldi	r22, 0x01	; 1
    22ba:	82 e1       	ldi	r24, 0x12	; 18
    22bc:	0e 94 80 19 	call	0x3300	; 0x3300 <digitalWrite>
    22c0:	61 e0       	ldi	r22, 0x01	; 1
    22c2:	83 e1       	ldi	r24, 0x13	; 19
    22c4:	0e 94 80 19 	call	0x3300	; 0x3300 <digitalWrite>
    22c8:	e9 eb       	ldi	r30, 0xB9	; 185
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8e 7f       	andi	r24, 0xFE	; 254
    22d0:	80 83       	st	Z, r24
    22d2:	80 81       	ld	r24, Z
    22d4:	8d 7f       	andi	r24, 0xFD	; 253
    22d6:	80 83       	st	Z, r24
    22d8:	88 e4       	ldi	r24, 0x48	; 72
    22da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    22de:	85 e4       	ldi	r24, 0x45	; 69
    22e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22e4:	08 95       	ret

000022e6 <twi_writeTo>:
    22e6:	0f 93       	push	r16
    22e8:	41 32       	cpi	r20, 0x21	; 33
    22ea:	08 f0       	brcs	.+2      	; 0x22ee <twi_writeTo+0x8>
    22ec:	4a c0       	rjmp	.+148    	; 0x2382 <twi_writeTo+0x9c>
    22ee:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <twi_state>
    22f2:	91 11       	cpse	r25, r1
    22f4:	fc cf       	rjmp	.-8      	; 0x22ee <twi_writeTo+0x8>
    22f6:	32 e0       	ldi	r19, 0x02	; 2
    22f8:	30 93 55 02 	sts	0x0255, r19	; 0x800255 <twi_state>
    22fc:	00 93 53 02 	sts	0x0253, r16	; 0x800253 <twi_sendStop>
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	30 93 e8 01 	sts	0x01E8, r19	; 0x8001e8 <twi_error>
    2306:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <twi_masterBufferIndex>
    230a:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <twi_masterBufferLength>
    230e:	56 2f       	mov	r21, r22
    2310:	ae e2       	ldi	r26, 0x2E	; 46
    2312:	b2 e0       	ldi	r27, 0x02	; 2
    2314:	fb 01       	movw	r30, r22
    2316:	3e 2f       	mov	r19, r30
    2318:	35 1b       	sub	r19, r21
    231a:	34 17       	cp	r19, r20
    231c:	18 f4       	brcc	.+6      	; 0x2324 <twi_writeTo+0x3e>
    231e:	31 91       	ld	r19, Z+
    2320:	3d 93       	st	X+, r19
    2322:	f9 cf       	rjmp	.-14     	; 0x2316 <twi_writeTo+0x30>
    2324:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <twi_slarw>
    2328:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <twi_slarw>
    232c:	88 0f       	add	r24, r24
    232e:	83 2b       	or	r24, r19
    2330:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <twi_slarw>
    2334:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <twi_inRepStart>
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	61 f4       	brne	.+24     	; 0x2354 <twi_writeTo+0x6e>
    233c:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <twi_inRepStart>
    2340:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <twi_slarw>
    2344:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2348:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    234c:	83 fd       	sbrc	r24, 3
    234e:	f8 cf       	rjmp	.-16     	; 0x2340 <twi_writeTo+0x5a>
    2350:	85 ec       	ldi	r24, 0xC5	; 197
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <twi_writeTo+0x70>
    2354:	85 ee       	ldi	r24, 0xE5	; 229
    2356:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    235a:	22 23       	and	r18, r18
    235c:	21 f0       	breq	.+8      	; 0x2366 <twi_writeTo+0x80>
    235e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <twi_state>
    2362:	82 30       	cpi	r24, 0x02	; 2
    2364:	d1 f3       	breq	.-12     	; 0x235a <twi_writeTo+0x74>
    2366:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <twi_error>
    236a:	8f 3f       	cpi	r24, 0xFF	; 255
    236c:	79 f0       	breq	.+30     	; 0x238c <twi_writeTo+0xa6>
    236e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <twi_error>
    2372:	80 32       	cpi	r24, 0x20	; 32
    2374:	41 f0       	breq	.+16     	; 0x2386 <twi_writeTo+0xa0>
    2376:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <twi_error>
    237a:	80 33       	cpi	r24, 0x30	; 48
    237c:	31 f0       	breq	.+12     	; 0x238a <twi_writeTo+0xa4>
    237e:	94 e0       	ldi	r25, 0x04	; 4
    2380:	05 c0       	rjmp	.+10     	; 0x238c <twi_writeTo+0xa6>
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	03 c0       	rjmp	.+6      	; 0x238c <twi_writeTo+0xa6>
    2386:	92 e0       	ldi	r25, 0x02	; 2
    2388:	01 c0       	rjmp	.+2      	; 0x238c <twi_writeTo+0xa6>
    238a:	93 e0       	ldi	r25, 0x03	; 3
    238c:	89 2f       	mov	r24, r25
    238e:	0f 91       	pop	r16
    2390:	08 95       	ret

00002392 <twi_transmit>:
    2392:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <twi_txBufferLength>
    2396:	26 2f       	mov	r18, r22
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	24 0f       	add	r18, r20
    239c:	31 1d       	adc	r19, r1
    239e:	21 32       	cpi	r18, 0x21	; 33
    23a0:	31 05       	cpc	r19, r1
    23a2:	dc f4       	brge	.+54     	; 0x23da <twi_transmit+0x48>
    23a4:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <twi_state>
    23a8:	24 30       	cpi	r18, 0x04	; 4
    23aa:	c9 f4       	brne	.+50     	; 0x23de <twi_transmit+0x4c>
    23ac:	fc 01       	movw	r30, r24
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	86 17       	cp	r24, r22
    23b4:	58 f4       	brcc	.+22     	; 0x23cc <twi_transmit+0x3a>
    23b6:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <twi_txBufferLength>
    23ba:	21 91       	ld	r18, Z+
    23bc:	dc 01       	movw	r26, r24
    23be:	a4 5f       	subi	r26, 0xF4	; 244
    23c0:	bd 4f       	sbci	r27, 0xFD	; 253
    23c2:	a3 0f       	add	r26, r19
    23c4:	b1 1d       	adc	r27, r1
    23c6:	2c 93       	st	X, r18
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	f3 cf       	rjmp	.-26     	; 0x23b2 <twi_transmit+0x20>
    23cc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <twi_txBufferLength>
    23d0:	68 0f       	add	r22, r24
    23d2:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <twi_txBufferLength>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	08 95       	ret
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	08 95       	ret
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	08 95       	ret

000023e2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    23e2:	85 ed       	ldi	r24, 0xD5	; 213
    23e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    23e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23ec:	84 fd       	sbrc	r24, 4
    23ee:	fc cf       	rjmp	.-8      	; 0x23e8 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    23f0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi_state>
    23f4:	08 95       	ret

000023f6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    23f6:	85 ec       	ldi	r24, 0xC5	; 197
    23f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    23fc:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi_state>
    2400:	08 95       	ret

00002402 <__vector_24>:
}

ISR(TWI_vect)
{
    2402:	1f 92       	push	r1
    2404:	0f 92       	push	r0
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	0f 92       	push	r0
    240a:	11 24       	eor	r1, r1
    240c:	2f 93       	push	r18
    240e:	3f 93       	push	r19
    2410:	4f 93       	push	r20
    2412:	5f 93       	push	r21
    2414:	6f 93       	push	r22
    2416:	7f 93       	push	r23
    2418:	8f 93       	push	r24
    241a:	9f 93       	push	r25
    241c:	af 93       	push	r26
    241e:	bf 93       	push	r27
    2420:	ef 93       	push	r30
    2422:	ff 93       	push	r31
  switch(TW_STATUS){
    2424:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2428:	88 7f       	andi	r24, 0xF8	; 248
    242a:	80 36       	cpi	r24, 0x60	; 96
    242c:	09 f4       	brne	.+2      	; 0x2430 <__vector_24+0x2e>
    242e:	9e c0       	rjmp	.+316    	; 0x256c <__vector_24+0x16a>
    2430:	78 f5       	brcc	.+94     	; 0x2490 <__vector_24+0x8e>
    2432:	88 32       	cpi	r24, 0x28	; 40
    2434:	09 f4       	brne	.+2      	; 0x2438 <__vector_24+0x36>
    2436:	5d c0       	rjmp	.+186    	; 0x24f2 <__vector_24+0xf0>
    2438:	90 f4       	brcc	.+36     	; 0x245e <__vector_24+0x5c>
    243a:	80 31       	cpi	r24, 0x10	; 16
    243c:	09 f4       	brne	.+2      	; 0x2440 <__vector_24+0x3e>
    243e:	56 c0       	rjmp	.+172    	; 0x24ec <__vector_24+0xea>
    2440:	38 f4       	brcc	.+14     	; 0x2450 <__vector_24+0x4e>
    2442:	88 23       	and	r24, r24
    2444:	09 f4       	brne	.+2      	; 0x2448 <__vector_24+0x46>
    2446:	f5 c0       	rjmp	.+490    	; 0x2632 <__vector_24+0x230>
    2448:	88 30       	cpi	r24, 0x08	; 8
    244a:	09 f4       	brne	.+2      	; 0x244e <__vector_24+0x4c>
    244c:	4f c0       	rjmp	.+158    	; 0x24ec <__vector_24+0xea>
    244e:	f5 c0       	rjmp	.+490    	; 0x263a <__vector_24+0x238>
    2450:	88 31       	cpi	r24, 0x18	; 24
    2452:	09 f4       	brne	.+2      	; 0x2456 <__vector_24+0x54>
    2454:	4e c0       	rjmp	.+156    	; 0x24f2 <__vector_24+0xf0>
    2456:	80 32       	cpi	r24, 0x20	; 32
    2458:	09 f4       	brne	.+2      	; 0x245c <__vector_24+0x5a>
    245a:	5f c0       	rjmp	.+190    	; 0x251a <__vector_24+0x118>
    245c:	ee c0       	rjmp	.+476    	; 0x263a <__vector_24+0x238>
    245e:	80 34       	cpi	r24, 0x40	; 64
    2460:	09 f4       	brne	.+2      	; 0x2464 <__vector_24+0x62>
    2462:	6a c0       	rjmp	.+212    	; 0x2538 <__vector_24+0x136>
    2464:	58 f4       	brcc	.+22     	; 0x247c <__vector_24+0x7a>
    2466:	80 33       	cpi	r24, 0x30	; 48
    2468:	09 f4       	brne	.+2      	; 0x246c <__vector_24+0x6a>
    246a:	57 c0       	rjmp	.+174    	; 0x251a <__vector_24+0x118>
    246c:	88 33       	cpi	r24, 0x38	; 56
    246e:	09 f0       	breq	.+2      	; 0x2472 <__vector_24+0x70>
    2470:	e4 c0       	rjmp	.+456    	; 0x263a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2472:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <twi_error>
      twi_releaseBus();
    2476:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <twi_releaseBus>
      break;
    247a:	df c0       	rjmp	.+446    	; 0x263a <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    247c:	80 35       	cpi	r24, 0x50	; 80
    247e:	09 f4       	brne	.+2      	; 0x2482 <__vector_24+0x80>
    2480:	4f c0       	rjmp	.+158    	; 0x2520 <__vector_24+0x11e>
    2482:	88 35       	cpi	r24, 0x58	; 88
    2484:	09 f4       	brne	.+2      	; 0x2488 <__vector_24+0x86>
    2486:	5d c0       	rjmp	.+186    	; 0x2542 <__vector_24+0x140>
    2488:	88 34       	cpi	r24, 0x48	; 72
    248a:	09 f0       	breq	.+2      	; 0x248e <__vector_24+0x8c>
    248c:	d6 c0       	rjmp	.+428    	; 0x263a <__vector_24+0x238>
    248e:	d3 c0       	rjmp	.+422    	; 0x2636 <__vector_24+0x234>
    2490:	88 39       	cpi	r24, 0x98	; 152
    2492:	09 f4       	brne	.+2      	; 0x2496 <__vector_24+0x94>
    2494:	c4 c0       	rjmp	.+392    	; 0x261e <__vector_24+0x21c>
    2496:	a8 f4       	brcc	.+42     	; 0x24c2 <__vector_24+0xc0>
    2498:	88 37       	cpi	r24, 0x78	; 120
    249a:	09 f4       	brne	.+2      	; 0x249e <__vector_24+0x9c>
    249c:	67 c0       	rjmp	.+206    	; 0x256c <__vector_24+0x16a>
    249e:	38 f4       	brcc	.+14     	; 0x24ae <__vector_24+0xac>
    24a0:	88 36       	cpi	r24, 0x68	; 104
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <__vector_24+0xa4>
    24a4:	63 c0       	rjmp	.+198    	; 0x256c <__vector_24+0x16a>
    24a6:	80 37       	cpi	r24, 0x70	; 112
    24a8:	09 f4       	brne	.+2      	; 0x24ac <__vector_24+0xaa>
    24aa:	60 c0       	rjmp	.+192    	; 0x256c <__vector_24+0x16a>
    24ac:	c6 c0       	rjmp	.+396    	; 0x263a <__vector_24+0x238>
    24ae:	88 38       	cpi	r24, 0x88	; 136
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <__vector_24+0xb2>
    24b2:	b5 c0       	rjmp	.+362    	; 0x261e <__vector_24+0x21c>
    24b4:	80 39       	cpi	r24, 0x90	; 144
    24b6:	09 f4       	brne	.+2      	; 0x24ba <__vector_24+0xb8>
    24b8:	5f c0       	rjmp	.+190    	; 0x2578 <__vector_24+0x176>
    24ba:	80 38       	cpi	r24, 0x80	; 128
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <__vector_24+0xbe>
    24be:	bd c0       	rjmp	.+378    	; 0x263a <__vector_24+0x238>
    24c0:	5b c0       	rjmp	.+182    	; 0x2578 <__vector_24+0x176>
    24c2:	80 3b       	cpi	r24, 0xB0	; 176
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <__vector_24+0xc6>
    24c6:	83 c0       	rjmp	.+262    	; 0x25ce <__vector_24+0x1cc>
    24c8:	38 f4       	brcc	.+14     	; 0x24d8 <__vector_24+0xd6>
    24ca:	80 3a       	cpi	r24, 0xA0	; 160
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <__vector_24+0xce>
    24ce:	66 c0       	rjmp	.+204    	; 0x259c <__vector_24+0x19a>
    24d0:	88 3a       	cpi	r24, 0xA8	; 168
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <__vector_24+0xd4>
    24d4:	7c c0       	rjmp	.+248    	; 0x25ce <__vector_24+0x1cc>
    24d6:	b1 c0       	rjmp	.+354    	; 0x263a <__vector_24+0x238>
    24d8:	80 3c       	cpi	r24, 0xC0	; 192
    24da:	09 f4       	brne	.+2      	; 0x24de <__vector_24+0xdc>
    24dc:	a4 c0       	rjmp	.+328    	; 0x2626 <__vector_24+0x224>
    24de:	88 3c       	cpi	r24, 0xC8	; 200
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <__vector_24+0xe2>
    24e2:	a1 c0       	rjmp	.+322    	; 0x2626 <__vector_24+0x224>
    24e4:	88 3b       	cpi	r24, 0xB8	; 184
    24e6:	09 f4       	brne	.+2      	; 0x24ea <__vector_24+0xe8>
    24e8:	87 c0       	rjmp	.+270    	; 0x25f8 <__vector_24+0x1f6>
    24ea:	a7 c0       	rjmp	.+334    	; 0x263a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    24ec:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <twi_slarw>
    24f0:	10 c0       	rjmp	.+32     	; 0x2512 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    24f2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <twi_masterBufferIndex>
    24f6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <twi_masterBufferLength>
    24fa:	98 17       	cp	r25, r24
    24fc:	70 f5       	brcc	.+92     	; 0x255a <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    24fe:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <twi_masterBufferIndex>
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	8e 0f       	add	r24, r30
    2506:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <twi_masterBufferIndex>
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	e2 5d       	subi	r30, 0xD2	; 210
    250e:	fd 4f       	sbci	r31, 0xFD	; 253
    2510:	80 81       	ld	r24, Z
    2512:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2516:	85 ec       	ldi	r24, 0xC5	; 197
    2518:	83 c0       	rjmp	.+262    	; 0x2620 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    251a:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <twi_error>
    251e:	8b c0       	rjmp	.+278    	; 0x2636 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2520:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <twi_masterBufferIndex>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8e 0f       	add	r24, r30
    2528:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <twi_masterBufferIndex>
    252c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	e2 5d       	subi	r30, 0xD2	; 210
    2534:	fd 4f       	sbci	r31, 0xFD	; 253
    2536:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2538:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <twi_masterBufferIndex>
    253c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <twi_masterBufferLength>
    2540:	6b c0       	rjmp	.+214    	; 0x2618 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2542:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <twi_masterBufferIndex>
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	8e 0f       	add	r24, r30
    254a:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <twi_masterBufferIndex>
    254e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	e2 5d       	subi	r30, 0xD2	; 210
    2556:	fd 4f       	sbci	r31, 0xFD	; 253
    2558:	80 83       	st	Z, r24
	if (twi_sendStop)
    255a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <twi_sendStop>
    255e:	81 11       	cpse	r24, r1
    2560:	6a c0       	rjmp	.+212    	; 0x2636 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2568:	84 ea       	ldi	r24, 0xA4	; 164
    256a:	5e c0       	rjmp	.+188    	; 0x2628 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2572:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <twi_rxBufferIndex>
    2576:	cf cf       	rjmp	.-98     	; 0x2516 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2578:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <twi_rxBufferIndex>
    257c:	80 32       	cpi	r24, 0x20	; 32
    257e:	08 f0       	brcs	.+2      	; 0x2582 <__vector_24+0x180>
    2580:	4e c0       	rjmp	.+156    	; 0x261e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2582:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <twi_rxBufferIndex>
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	8e 0f       	add	r24, r30
    258a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <twi_rxBufferIndex>
    258e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	e6 51       	subi	r30, 0x16	; 22
    2596:	fe 4f       	sbci	r31, 0xFE	; 254
    2598:	80 83       	st	Z, r24
    259a:	bd cf       	rjmp	.-134    	; 0x2516 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    259c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    25a0:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <twi_rxBufferIndex>
    25a4:	80 32       	cpi	r24, 0x20	; 32
    25a6:	30 f4       	brcc	.+12     	; 0x25b4 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    25a8:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <twi_rxBufferIndex>
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	e6 51       	subi	r30, 0x16	; 22
    25b0:	fe 4f       	sbci	r31, 0xFE	; 254
    25b2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    25b4:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <twi_rxBufferIndex>
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <twi_onSlaveReceive>
    25be:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <twi_onSlaveReceive+0x1>
    25c2:	8a ee       	ldi	r24, 0xEA	; 234
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    25c8:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <twi_rxBufferIndex>
      break;
    25cc:	36 c0       	rjmp	.+108    	; 0x263a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    25ce:	84 e0       	ldi	r24, 0x04	; 4
    25d0:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    25d4:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    25d8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    25dc:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <twi_onSlaveTransmit>
    25e0:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <twi_onSlaveTransmit+0x1>
    25e4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    25e6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <twi_txBufferLength>
    25ea:	81 11       	cpse	r24, r1
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    25f4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    25f8:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <twi_txBufferIndex>
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	8e 0f       	add	r24, r30
    2600:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <twi_txBufferIndex>
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	e4 5f       	subi	r30, 0xF4	; 244
    2608:	fd 4f       	sbci	r31, 0xFD	; 253
    260a:	80 81       	ld	r24, Z
    260c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2610:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <twi_txBufferIndex>
    2614:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <twi_txBufferLength>
    2618:	98 17       	cp	r25, r24
    261a:	08 f4       	brcc	.+2      	; 0x261e <__vector_24+0x21c>
    261c:	7c cf       	rjmp	.-264    	; 0x2516 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    261e:	85 e8       	ldi	r24, 0x85	; 133
    2620:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2624:	0a c0       	rjmp	.+20     	; 0x263a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2626:	85 ec       	ldi	r24, 0xC5	; 197
    2628:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    262c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi_state>
      break;
    2630:	04 c0       	rjmp	.+8      	; 0x263a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2632:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <twi_error>
      twi_stop();
    2636:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <twi_stop>
      break;
  }
}
    263a:	ff 91       	pop	r31
    263c:	ef 91       	pop	r30
    263e:	bf 91       	pop	r27
    2640:	af 91       	pop	r26
    2642:	9f 91       	pop	r25
    2644:	8f 91       	pop	r24
    2646:	7f 91       	pop	r23
    2648:	6f 91       	pop	r22
    264a:	5f 91       	pop	r21
    264c:	4f 91       	pop	r20
    264e:	3f 91       	pop	r19
    2650:	2f 91       	pop	r18
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    265c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <_ZN7TwoWire14rxBufferLengthE>
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <_ZN7TwoWire13rxBufferIndexE>
    2666:	82 1b       	sub	r24, r18
    2668:	91 09       	sbc	r25, r1
    266a:	08 95       	ret

0000266c <_ZN7TwoWire4readEv>:
    266c:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <_ZN7TwoWire13rxBufferIndexE>
    2670:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <_ZN7TwoWire14rxBufferLengthE>
    2674:	98 17       	cp	r25, r24
    2676:	50 f4       	brcc	.+20     	; 0x268c <_ZN7TwoWire4readEv+0x20>
    2678:	e9 2f       	mov	r30, r25
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	e8 57       	subi	r30, 0x78	; 120
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	20 81       	ld	r18, Z
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	9f 5f       	subi	r25, 0xFF	; 255
    2686:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <_ZN7TwoWire13rxBufferIndexE>
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <_ZN7TwoWire4readEv+0x24>
    268c:	2f ef       	ldi	r18, 0xFF	; 255
    268e:	3f ef       	ldi	r19, 0xFF	; 255
    2690:	c9 01       	movw	r24, r18
    2692:	08 95       	ret

00002694 <_ZN7TwoWire4peekEv>:
    2694:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <_ZN7TwoWire13rxBufferIndexE>
    2698:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <_ZN7TwoWire14rxBufferLengthE>
    269c:	e8 17       	cp	r30, r24
    269e:	30 f4       	brcc	.+12     	; 0x26ac <_ZN7TwoWire4peekEv+0x18>
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	e8 57       	subi	r30, 0x78	; 120
    26a4:	fd 4f       	sbci	r31, 0xFD	; 253
    26a6:	80 81       	ld	r24, Z
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	08 95       	ret
    26ac:	8f ef       	ldi	r24, 0xFF	; 255
    26ae:	9f ef       	ldi	r25, 0xFF	; 255
    26b0:	08 95       	ret

000026b2 <_ZN7TwoWire5flushEv>:
    26b2:	08 95       	ret

000026b4 <_ZN7TwoWire5writeEPKhj>:
    26b4:	cf 92       	push	r12
    26b6:	df 92       	push	r13
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	7c 01       	movw	r14, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8a 01       	movw	r16, r20
    26ca:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <_ZN7TwoWire12transmittingE>
    26ce:	22 23       	and	r18, r18
    26d0:	89 f0       	breq	.+34     	; 0x26f4 <_ZN7TwoWire5writeEPKhj+0x40>
    26d2:	eb 01       	movw	r28, r22
    26d4:	6b 01       	movw	r12, r22
    26d6:	c4 0e       	add	r12, r20
    26d8:	d5 1e       	adc	r13, r21
    26da:	cc 15       	cp	r28, r12
    26dc:	dd 05       	cpc	r29, r13
    26de:	69 f0       	breq	.+26     	; 0x26fa <_ZN7TwoWire5writeEPKhj+0x46>
    26e0:	69 91       	ld	r22, Y+
    26e2:	d7 01       	movw	r26, r14
    26e4:	ed 91       	ld	r30, X+
    26e6:	fc 91       	ld	r31, X
    26e8:	01 90       	ld	r0, Z+
    26ea:	f0 81       	ld	r31, Z
    26ec:	e0 2d       	mov	r30, r0
    26ee:	c7 01       	movw	r24, r14
    26f0:	09 95       	icall
    26f2:	f3 cf       	rjmp	.-26     	; 0x26da <_ZN7TwoWire5writeEPKhj+0x26>
    26f4:	64 2f       	mov	r22, r20
    26f6:	0e 94 c9 11 	call	0x2392	; 0x2392 <twi_transmit>
    26fa:	c8 01       	movw	r24, r16
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	df 90       	pop	r13
    270a:	cf 90       	pop	r12
    270c:	08 95       	ret

0000270e <_ZN7TwoWire5writeEh>:
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	1f 92       	push	r1
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	69 83       	std	Y+1, r22	; 0x01
    271a:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <_ZN7TwoWire12transmittingE>
    271e:	22 23       	and	r18, r18
    2720:	d1 f0       	breq	.+52     	; 0x2756 <_ZN7TwoWire5writeEh+0x48>
    2722:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <_ZN7TwoWire14txBufferLengthE>
    2726:	20 32       	cpi	r18, 0x20	; 32
    2728:	40 f0       	brcs	.+16     	; 0x273a <_ZN7TwoWire5writeEh+0x2c>
    272a:	21 e0       	ldi	r18, 0x01	; 1
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	fc 01       	movw	r30, r24
    2730:	33 83       	std	Z+3, r19	; 0x03
    2732:	22 83       	std	Z+2, r18	; 0x02
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	15 c0       	rjmp	.+42     	; 0x2764 <_ZN7TwoWire5writeEh+0x56>
    273a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <_ZN7TwoWire13txBufferIndexE>
    273e:	e8 2f       	mov	r30, r24
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	eb 59       	subi	r30, 0x9B	; 155
    2744:	fd 4f       	sbci	r31, 0xFD	; 253
    2746:	99 81       	ldd	r25, Y+1	; 0x01
    2748:	90 83       	st	Z, r25
    274a:	8f 5f       	subi	r24, 0xFF	; 255
    274c:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <_ZN7TwoWire13txBufferIndexE>
    2750:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <_ZN7TwoWire14txBufferLengthE>
    2754:	05 c0       	rjmp	.+10     	; 0x2760 <_ZN7TwoWire5writeEh+0x52>
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	ce 01       	movw	r24, r28
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	0e 94 c9 11 	call	0x2392	; 0x2392 <twi_transmit>
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0f 90       	pop	r0
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	08 95       	ret

0000276c <_ZN7TwoWireC1Ev>:
    276c:	fc 01       	movw	r30, r24
    276e:	13 82       	std	Z+3, r1	; 0x03
    2770:	12 82       	std	Z+2, r1	; 0x02
    2772:	88 ee       	ldi	r24, 0xE8	; 232
    2774:	93 e0       	ldi	r25, 0x03	; 3
    2776:	a0 e0       	ldi	r26, 0x00	; 0
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	84 83       	std	Z+4, r24	; 0x04
    277c:	95 83       	std	Z+5, r25	; 0x05
    277e:	a6 83       	std	Z+6, r26	; 0x06
    2780:	b7 83       	std	Z+7, r27	; 0x07
    2782:	8c e8       	ldi	r24, 0x8C	; 140
    2784:	91 e0       	ldi	r25, 0x01	; 1
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	08 95       	ret

0000278c <_ZN7TwoWire5beginEv>:
    278c:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_ZN7TwoWire13rxBufferIndexE>
    2790:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <_ZN7TwoWire14rxBufferLengthE>
    2794:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <_ZN7TwoWire13txBufferIndexE>
    2798:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <_ZN7TwoWire14txBufferLengthE>
    279c:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <twi_init>

000027a0 <_ZN7TwoWire17beginTransmissionEh>:
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <_ZN7TwoWire12transmittingE>
    27a6:	60 93 85 02 	sts	0x0285, r22	; 0x800285 <_ZN7TwoWire9txAddressE>
    27aa:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <_ZN7TwoWire13txBufferIndexE>
    27ae:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <_ZN7TwoWire14txBufferLengthE>
    27b2:	08 95       	ret

000027b4 <_ZN7TwoWire15endTransmissionEh>:
    27b4:	0f 93       	push	r16
    27b6:	06 2f       	mov	r16, r22
    27b8:	21 e0       	ldi	r18, 0x01	; 1
    27ba:	40 91 63 02 	lds	r20, 0x0263	; 0x800263 <_ZN7TwoWire14txBufferLengthE>
    27be:	65 e6       	ldi	r22, 0x65	; 101
    27c0:	72 e0       	ldi	r23, 0x02	; 2
    27c2:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN7TwoWire9txAddressE>
    27c6:	0e 94 73 11 	call	0x22e6	; 0x22e6 <twi_writeTo>
    27ca:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <_ZN7TwoWire13txBufferIndexE>
    27ce:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <_ZN7TwoWire14txBufferLengthE>
    27d2:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <_ZN7TwoWire12transmittingE>
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <_ZN7TwoWire15endTransmissionEv>:
    27da:	61 e0       	ldi	r22, 0x01	; 1
    27dc:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <_ZN7TwoWire15endTransmissionEh>

000027e0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    27e0:	86 e5       	ldi	r24, 0x56	; 86
    27e2:	92 e0       	ldi	r25, 0x02	; 2
    27e4:	0c 94 b6 13 	jmp	0x276c	; 0x276c <_ZN7TwoWireC1Ev>

000027e8 <_ZN11ThermometerC1Eiii>:
*/

#include "Thermometer.h"

// default constructor
Thermometer::Thermometer(int pinDO, int pinCS,int pinCLK)
    27e8:	df 92       	push	r13
    27ea:	ef 92       	push	r14
    27ec:	ff 92       	push	r15
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	8c 01       	movw	r16, r24
    27f8:	f6 2e       	mov	r15, r22
    27fa:	e4 2e       	mov	r14, r20
    27fc:	d2 2e       	mov	r13, r18
{
	_thermocouple = new MAX6675(pinDO, pinCS,pinCLK);
    27fe:	83 e0       	ldi	r24, 0x03	; 3
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_Znwj>
    2806:	ec 01       	movw	r28, r24
    2808:	2d 2d       	mov	r18, r13
    280a:	4e 2d       	mov	r20, r14
    280c:	6f 2d       	mov	r22, r15
    280e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN7MAX6675C1Eaaa>
    2812:	f8 01       	movw	r30, r16
    2814:	d1 83       	std	Z+1, r29	; 0x01
    2816:	c0 83       	st	Z, r28
} //Thermometer
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	08 95       	ret

00002828 <_ZN11Thermometer4ReadEv>:

double Thermometer:: Read() {
	// basic readout test, just print the current temp
	return _thermocouple->readCelsius();
    2828:	fc 01       	movw	r30, r24
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <_ZN7MAX667511readCelsiusEv>

00002832 <__subsf3>:
    2832:	50 58       	subi	r21, 0x80	; 128

00002834 <__addsf3>:
    2834:	bb 27       	eor	r27, r27
    2836:	aa 27       	eor	r26, r26
    2838:	0e 94 31 14 	call	0x2862	; 0x2862 <__addsf3x>
    283c:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__fp_round>
    2840:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__fp_pscA>
    2844:	38 f0       	brcs	.+14     	; 0x2854 <__addsf3+0x20>
    2846:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__fp_pscB>
    284a:	20 f0       	brcs	.+8      	; 0x2854 <__addsf3+0x20>
    284c:	39 f4       	brne	.+14     	; 0x285c <__addsf3+0x28>
    284e:	9f 3f       	cpi	r25, 0xFF	; 255
    2850:	19 f4       	brne	.+6      	; 0x2858 <__addsf3+0x24>
    2852:	26 f4       	brtc	.+8      	; 0x285c <__addsf3+0x28>
    2854:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_nan>
    2858:	0e f4       	brtc	.+2      	; 0x285c <__addsf3+0x28>
    285a:	e0 95       	com	r30
    285c:	e7 fb       	bst	r30, 7
    285e:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__fp_inf>

00002862 <__addsf3x>:
    2862:	e9 2f       	mov	r30, r25
    2864:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__fp_split3>
    2868:	58 f3       	brcs	.-42     	; 0x2840 <__addsf3+0xc>
    286a:	ba 17       	cp	r27, r26
    286c:	62 07       	cpc	r22, r18
    286e:	73 07       	cpc	r23, r19
    2870:	84 07       	cpc	r24, r20
    2872:	95 07       	cpc	r25, r21
    2874:	20 f0       	brcs	.+8      	; 0x287e <__addsf3x+0x1c>
    2876:	79 f4       	brne	.+30     	; 0x2896 <__addsf3x+0x34>
    2878:	a6 f5       	brtc	.+104    	; 0x28e2 <__addsf3x+0x80>
    287a:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__fp_zero>
    287e:	0e f4       	brtc	.+2      	; 0x2882 <__addsf3x+0x20>
    2880:	e0 95       	com	r30
    2882:	0b 2e       	mov	r0, r27
    2884:	ba 2f       	mov	r27, r26
    2886:	a0 2d       	mov	r26, r0
    2888:	0b 01       	movw	r0, r22
    288a:	b9 01       	movw	r22, r18
    288c:	90 01       	movw	r18, r0
    288e:	0c 01       	movw	r0, r24
    2890:	ca 01       	movw	r24, r20
    2892:	a0 01       	movw	r20, r0
    2894:	11 24       	eor	r1, r1
    2896:	ff 27       	eor	r31, r31
    2898:	59 1b       	sub	r21, r25
    289a:	99 f0       	breq	.+38     	; 0x28c2 <__addsf3x+0x60>
    289c:	59 3f       	cpi	r21, 0xF9	; 249
    289e:	50 f4       	brcc	.+20     	; 0x28b4 <__addsf3x+0x52>
    28a0:	50 3e       	cpi	r21, 0xE0	; 224
    28a2:	68 f1       	brcs	.+90     	; 0x28fe <__addsf3x+0x9c>
    28a4:	1a 16       	cp	r1, r26
    28a6:	f0 40       	sbci	r31, 0x00	; 0
    28a8:	a2 2f       	mov	r26, r18
    28aa:	23 2f       	mov	r18, r19
    28ac:	34 2f       	mov	r19, r20
    28ae:	44 27       	eor	r20, r20
    28b0:	58 5f       	subi	r21, 0xF8	; 248
    28b2:	f3 cf       	rjmp	.-26     	; 0x289a <__addsf3x+0x38>
    28b4:	46 95       	lsr	r20
    28b6:	37 95       	ror	r19
    28b8:	27 95       	ror	r18
    28ba:	a7 95       	ror	r26
    28bc:	f0 40       	sbci	r31, 0x00	; 0
    28be:	53 95       	inc	r21
    28c0:	c9 f7       	brne	.-14     	; 0x28b4 <__addsf3x+0x52>
    28c2:	7e f4       	brtc	.+30     	; 0x28e2 <__addsf3x+0x80>
    28c4:	1f 16       	cp	r1, r31
    28c6:	ba 0b       	sbc	r27, r26
    28c8:	62 0b       	sbc	r22, r18
    28ca:	73 0b       	sbc	r23, r19
    28cc:	84 0b       	sbc	r24, r20
    28ce:	ba f0       	brmi	.+46     	; 0x28fe <__addsf3x+0x9c>
    28d0:	91 50       	subi	r25, 0x01	; 1
    28d2:	a1 f0       	breq	.+40     	; 0x28fc <__addsf3x+0x9a>
    28d4:	ff 0f       	add	r31, r31
    28d6:	bb 1f       	adc	r27, r27
    28d8:	66 1f       	adc	r22, r22
    28da:	77 1f       	adc	r23, r23
    28dc:	88 1f       	adc	r24, r24
    28de:	c2 f7       	brpl	.-16     	; 0x28d0 <__addsf3x+0x6e>
    28e0:	0e c0       	rjmp	.+28     	; 0x28fe <__addsf3x+0x9c>
    28e2:	ba 0f       	add	r27, r26
    28e4:	62 1f       	adc	r22, r18
    28e6:	73 1f       	adc	r23, r19
    28e8:	84 1f       	adc	r24, r20
    28ea:	48 f4       	brcc	.+18     	; 0x28fe <__addsf3x+0x9c>
    28ec:	87 95       	ror	r24
    28ee:	77 95       	ror	r23
    28f0:	67 95       	ror	r22
    28f2:	b7 95       	ror	r27
    28f4:	f7 95       	ror	r31
    28f6:	9e 3f       	cpi	r25, 0xFE	; 254
    28f8:	08 f0       	brcs	.+2      	; 0x28fc <__addsf3x+0x9a>
    28fa:	b0 cf       	rjmp	.-160    	; 0x285c <__addsf3+0x28>
    28fc:	93 95       	inc	r25
    28fe:	88 0f       	add	r24, r24
    2900:	08 f0       	brcs	.+2      	; 0x2904 <__addsf3x+0xa2>
    2902:	99 27       	eor	r25, r25
    2904:	ee 0f       	add	r30, r30
    2906:	97 95       	ror	r25
    2908:	87 95       	ror	r24
    290a:	08 95       	ret

0000290c <__cmpsf2>:
    290c:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__fp_cmp>
    2910:	08 f4       	brcc	.+2      	; 0x2914 <__cmpsf2+0x8>
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	08 95       	ret

00002916 <__divsf3>:
    2916:	0e 94 9f 14 	call	0x293e	; 0x293e <__divsf3x>
    291a:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__fp_round>
    291e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__fp_pscB>
    2922:	58 f0       	brcs	.+22     	; 0x293a <__divsf3+0x24>
    2924:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__fp_pscA>
    2928:	40 f0       	brcs	.+16     	; 0x293a <__divsf3+0x24>
    292a:	29 f4       	brne	.+10     	; 0x2936 <__divsf3+0x20>
    292c:	5f 3f       	cpi	r21, 0xFF	; 255
    292e:	29 f0       	breq	.+10     	; 0x293a <__divsf3+0x24>
    2930:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__fp_inf>
    2934:	51 11       	cpse	r21, r1
    2936:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__fp_szero>
    293a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_nan>

0000293e <__divsf3x>:
    293e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__fp_split3>
    2942:	68 f3       	brcs	.-38     	; 0x291e <__divsf3+0x8>

00002944 <__divsf3_pse>:
    2944:	99 23       	and	r25, r25
    2946:	b1 f3       	breq	.-20     	; 0x2934 <__divsf3+0x1e>
    2948:	55 23       	and	r21, r21
    294a:	91 f3       	breq	.-28     	; 0x2930 <__divsf3+0x1a>
    294c:	95 1b       	sub	r25, r21
    294e:	55 0b       	sbc	r21, r21
    2950:	bb 27       	eor	r27, r27
    2952:	aa 27       	eor	r26, r26
    2954:	62 17       	cp	r22, r18
    2956:	73 07       	cpc	r23, r19
    2958:	84 07       	cpc	r24, r20
    295a:	38 f0       	brcs	.+14     	; 0x296a <__divsf3_pse+0x26>
    295c:	9f 5f       	subi	r25, 0xFF	; 255
    295e:	5f 4f       	sbci	r21, 0xFF	; 255
    2960:	22 0f       	add	r18, r18
    2962:	33 1f       	adc	r19, r19
    2964:	44 1f       	adc	r20, r20
    2966:	aa 1f       	adc	r26, r26
    2968:	a9 f3       	breq	.-22     	; 0x2954 <__divsf3_pse+0x10>
    296a:	35 d0       	rcall	.+106    	; 0x29d6 <__divsf3_pse+0x92>
    296c:	0e 2e       	mov	r0, r30
    296e:	3a f0       	brmi	.+14     	; 0x297e <__divsf3_pse+0x3a>
    2970:	e0 e8       	ldi	r30, 0x80	; 128
    2972:	32 d0       	rcall	.+100    	; 0x29d8 <__divsf3_pse+0x94>
    2974:	91 50       	subi	r25, 0x01	; 1
    2976:	50 40       	sbci	r21, 0x00	; 0
    2978:	e6 95       	lsr	r30
    297a:	00 1c       	adc	r0, r0
    297c:	ca f7       	brpl	.-14     	; 0x2970 <__divsf3_pse+0x2c>
    297e:	2b d0       	rcall	.+86     	; 0x29d6 <__divsf3_pse+0x92>
    2980:	fe 2f       	mov	r31, r30
    2982:	29 d0       	rcall	.+82     	; 0x29d6 <__divsf3_pse+0x92>
    2984:	66 0f       	add	r22, r22
    2986:	77 1f       	adc	r23, r23
    2988:	88 1f       	adc	r24, r24
    298a:	bb 1f       	adc	r27, r27
    298c:	26 17       	cp	r18, r22
    298e:	37 07       	cpc	r19, r23
    2990:	48 07       	cpc	r20, r24
    2992:	ab 07       	cpc	r26, r27
    2994:	b0 e8       	ldi	r27, 0x80	; 128
    2996:	09 f0       	breq	.+2      	; 0x299a <__divsf3_pse+0x56>
    2998:	bb 0b       	sbc	r27, r27
    299a:	80 2d       	mov	r24, r0
    299c:	bf 01       	movw	r22, r30
    299e:	ff 27       	eor	r31, r31
    29a0:	93 58       	subi	r25, 0x83	; 131
    29a2:	5f 4f       	sbci	r21, 0xFF	; 255
    29a4:	3a f0       	brmi	.+14     	; 0x29b4 <__divsf3_pse+0x70>
    29a6:	9e 3f       	cpi	r25, 0xFE	; 254
    29a8:	51 05       	cpc	r21, r1
    29aa:	78 f0       	brcs	.+30     	; 0x29ca <__divsf3_pse+0x86>
    29ac:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__fp_inf>
    29b0:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__fp_szero>
    29b4:	5f 3f       	cpi	r21, 0xFF	; 255
    29b6:	e4 f3       	brlt	.-8      	; 0x29b0 <__divsf3_pse+0x6c>
    29b8:	98 3e       	cpi	r25, 0xE8	; 232
    29ba:	d4 f3       	brlt	.-12     	; 0x29b0 <__divsf3_pse+0x6c>
    29bc:	86 95       	lsr	r24
    29be:	77 95       	ror	r23
    29c0:	67 95       	ror	r22
    29c2:	b7 95       	ror	r27
    29c4:	f7 95       	ror	r31
    29c6:	9f 5f       	subi	r25, 0xFF	; 255
    29c8:	c9 f7       	brne	.-14     	; 0x29bc <__divsf3_pse+0x78>
    29ca:	88 0f       	add	r24, r24
    29cc:	91 1d       	adc	r25, r1
    29ce:	96 95       	lsr	r25
    29d0:	87 95       	ror	r24
    29d2:	97 f9       	bld	r25, 7
    29d4:	08 95       	ret
    29d6:	e1 e0       	ldi	r30, 0x01	; 1
    29d8:	66 0f       	add	r22, r22
    29da:	77 1f       	adc	r23, r23
    29dc:	88 1f       	adc	r24, r24
    29de:	bb 1f       	adc	r27, r27
    29e0:	62 17       	cp	r22, r18
    29e2:	73 07       	cpc	r23, r19
    29e4:	84 07       	cpc	r24, r20
    29e6:	ba 07       	cpc	r27, r26
    29e8:	20 f0       	brcs	.+8      	; 0x29f2 <__divsf3_pse+0xae>
    29ea:	62 1b       	sub	r22, r18
    29ec:	73 0b       	sbc	r23, r19
    29ee:	84 0b       	sbc	r24, r20
    29f0:	ba 0b       	sbc	r27, r26
    29f2:	ee 1f       	adc	r30, r30
    29f4:	88 f7       	brcc	.-30     	; 0x29d8 <__divsf3_pse+0x94>
    29f6:	e0 95       	com	r30
    29f8:	08 95       	ret

000029fa <__fixsfsi>:
    29fa:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__fixunssfsi>
    29fe:	68 94       	set
    2a00:	b1 11       	cpse	r27, r1
    2a02:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__fp_szero>
    2a06:	08 95       	ret

00002a08 <__fixunssfsi>:
    2a08:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__fp_splitA>
    2a0c:	88 f0       	brcs	.+34     	; 0x2a30 <__fixunssfsi+0x28>
    2a0e:	9f 57       	subi	r25, 0x7F	; 127
    2a10:	98 f0       	brcs	.+38     	; 0x2a38 <__fixunssfsi+0x30>
    2a12:	b9 2f       	mov	r27, r25
    2a14:	99 27       	eor	r25, r25
    2a16:	b7 51       	subi	r27, 0x17	; 23
    2a18:	b0 f0       	brcs	.+44     	; 0x2a46 <__fixunssfsi+0x3e>
    2a1a:	e1 f0       	breq	.+56     	; 0x2a54 <__fixunssfsi+0x4c>
    2a1c:	66 0f       	add	r22, r22
    2a1e:	77 1f       	adc	r23, r23
    2a20:	88 1f       	adc	r24, r24
    2a22:	99 1f       	adc	r25, r25
    2a24:	1a f0       	brmi	.+6      	; 0x2a2c <__fixunssfsi+0x24>
    2a26:	ba 95       	dec	r27
    2a28:	c9 f7       	brne	.-14     	; 0x2a1c <__fixunssfsi+0x14>
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <__fixunssfsi+0x4c>
    2a2c:	b1 30       	cpi	r27, 0x01	; 1
    2a2e:	91 f0       	breq	.+36     	; 0x2a54 <__fixunssfsi+0x4c>
    2a30:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__fp_zero>
    2a34:	b1 e0       	ldi	r27, 0x01	; 1
    2a36:	08 95       	ret
    2a38:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__fp_zero>
    2a3c:	67 2f       	mov	r22, r23
    2a3e:	78 2f       	mov	r23, r24
    2a40:	88 27       	eor	r24, r24
    2a42:	b8 5f       	subi	r27, 0xF8	; 248
    2a44:	39 f0       	breq	.+14     	; 0x2a54 <__fixunssfsi+0x4c>
    2a46:	b9 3f       	cpi	r27, 0xF9	; 249
    2a48:	cc f3       	brlt	.-14     	; 0x2a3c <__fixunssfsi+0x34>
    2a4a:	86 95       	lsr	r24
    2a4c:	77 95       	ror	r23
    2a4e:	67 95       	ror	r22
    2a50:	b3 95       	inc	r27
    2a52:	d9 f7       	brne	.-10     	; 0x2a4a <__fixunssfsi+0x42>
    2a54:	3e f4       	brtc	.+14     	; 0x2a64 <__fixunssfsi+0x5c>
    2a56:	90 95       	com	r25
    2a58:	80 95       	com	r24
    2a5a:	70 95       	com	r23
    2a5c:	61 95       	neg	r22
    2a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a60:	8f 4f       	sbci	r24, 0xFF	; 255
    2a62:	9f 4f       	sbci	r25, 0xFF	; 255
    2a64:	08 95       	ret

00002a66 <__floatunsisf>:
    2a66:	e8 94       	clt
    2a68:	09 c0       	rjmp	.+18     	; 0x2a7c <__floatsisf+0x12>

00002a6a <__floatsisf>:
    2a6a:	97 fb       	bst	r25, 7
    2a6c:	3e f4       	brtc	.+14     	; 0x2a7c <__floatsisf+0x12>
    2a6e:	90 95       	com	r25
    2a70:	80 95       	com	r24
    2a72:	70 95       	com	r23
    2a74:	61 95       	neg	r22
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	8f 4f       	sbci	r24, 0xFF	; 255
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	99 23       	and	r25, r25
    2a7e:	a9 f0       	breq	.+42     	; 0x2aaa <__floatsisf+0x40>
    2a80:	f9 2f       	mov	r31, r25
    2a82:	96 e9       	ldi	r25, 0x96	; 150
    2a84:	bb 27       	eor	r27, r27
    2a86:	93 95       	inc	r25
    2a88:	f6 95       	lsr	r31
    2a8a:	87 95       	ror	r24
    2a8c:	77 95       	ror	r23
    2a8e:	67 95       	ror	r22
    2a90:	b7 95       	ror	r27
    2a92:	f1 11       	cpse	r31, r1
    2a94:	f8 cf       	rjmp	.-16     	; 0x2a86 <__floatsisf+0x1c>
    2a96:	fa f4       	brpl	.+62     	; 0x2ad6 <__floatsisf+0x6c>
    2a98:	bb 0f       	add	r27, r27
    2a9a:	11 f4       	brne	.+4      	; 0x2aa0 <__floatsisf+0x36>
    2a9c:	60 ff       	sbrs	r22, 0
    2a9e:	1b c0       	rjmp	.+54     	; 0x2ad6 <__floatsisf+0x6c>
    2aa0:	6f 5f       	subi	r22, 0xFF	; 255
    2aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa8:	16 c0       	rjmp	.+44     	; 0x2ad6 <__floatsisf+0x6c>
    2aaa:	88 23       	and	r24, r24
    2aac:	11 f0       	breq	.+4      	; 0x2ab2 <__floatsisf+0x48>
    2aae:	96 e9       	ldi	r25, 0x96	; 150
    2ab0:	11 c0       	rjmp	.+34     	; 0x2ad4 <__floatsisf+0x6a>
    2ab2:	77 23       	and	r23, r23
    2ab4:	21 f0       	breq	.+8      	; 0x2abe <__floatsisf+0x54>
    2ab6:	9e e8       	ldi	r25, 0x8E	; 142
    2ab8:	87 2f       	mov	r24, r23
    2aba:	76 2f       	mov	r23, r22
    2abc:	05 c0       	rjmp	.+10     	; 0x2ac8 <__floatsisf+0x5e>
    2abe:	66 23       	and	r22, r22
    2ac0:	71 f0       	breq	.+28     	; 0x2ade <__floatsisf+0x74>
    2ac2:	96 e8       	ldi	r25, 0x86	; 134
    2ac4:	86 2f       	mov	r24, r22
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	2a f0       	brmi	.+10     	; 0x2ad6 <__floatsisf+0x6c>
    2acc:	9a 95       	dec	r25
    2ace:	66 0f       	add	r22, r22
    2ad0:	77 1f       	adc	r23, r23
    2ad2:	88 1f       	adc	r24, r24
    2ad4:	da f7       	brpl	.-10     	; 0x2acc <__floatsisf+0x62>
    2ad6:	88 0f       	add	r24, r24
    2ad8:	96 95       	lsr	r25
    2ada:	87 95       	ror	r24
    2adc:	97 f9       	bld	r25, 7
    2ade:	08 95       	ret

00002ae0 <floor>:
    2ae0:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__fp_trunc>
    2ae4:	90 f0       	brcs	.+36     	; 0x2b0a <floor+0x2a>
    2ae6:	9f 37       	cpi	r25, 0x7F	; 127
    2ae8:	48 f4       	brcc	.+18     	; 0x2afc <floor+0x1c>
    2aea:	91 11       	cpse	r25, r1
    2aec:	16 f0       	brts	.+4      	; 0x2af2 <floor+0x12>
    2aee:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__fp_szero>
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	80 e8       	ldi	r24, 0x80	; 128
    2af8:	9f eb       	ldi	r25, 0xBF	; 191
    2afa:	08 95       	ret
    2afc:	26 f4       	brtc	.+8      	; 0x2b06 <floor+0x26>
    2afe:	1b 16       	cp	r1, r27
    2b00:	61 1d       	adc	r22, r1
    2b02:	71 1d       	adc	r23, r1
    2b04:	81 1d       	adc	r24, r1
    2b06:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__fp_mintl>
    2b0a:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__fp_mpack>

00002b0e <__fp_cmp>:
    2b0e:	99 0f       	add	r25, r25
    2b10:	00 08       	sbc	r0, r0
    2b12:	55 0f       	add	r21, r21
    2b14:	aa 0b       	sbc	r26, r26
    2b16:	e0 e8       	ldi	r30, 0x80	; 128
    2b18:	fe ef       	ldi	r31, 0xFE	; 254
    2b1a:	16 16       	cp	r1, r22
    2b1c:	17 06       	cpc	r1, r23
    2b1e:	e8 07       	cpc	r30, r24
    2b20:	f9 07       	cpc	r31, r25
    2b22:	c0 f0       	brcs	.+48     	; 0x2b54 <__fp_cmp+0x46>
    2b24:	12 16       	cp	r1, r18
    2b26:	13 06       	cpc	r1, r19
    2b28:	e4 07       	cpc	r30, r20
    2b2a:	f5 07       	cpc	r31, r21
    2b2c:	98 f0       	brcs	.+38     	; 0x2b54 <__fp_cmp+0x46>
    2b2e:	62 1b       	sub	r22, r18
    2b30:	73 0b       	sbc	r23, r19
    2b32:	84 0b       	sbc	r24, r20
    2b34:	95 0b       	sbc	r25, r21
    2b36:	39 f4       	brne	.+14     	; 0x2b46 <__fp_cmp+0x38>
    2b38:	0a 26       	eor	r0, r26
    2b3a:	61 f0       	breq	.+24     	; 0x2b54 <__fp_cmp+0x46>
    2b3c:	23 2b       	or	r18, r19
    2b3e:	24 2b       	or	r18, r20
    2b40:	25 2b       	or	r18, r21
    2b42:	21 f4       	brne	.+8      	; 0x2b4c <__fp_cmp+0x3e>
    2b44:	08 95       	ret
    2b46:	0a 26       	eor	r0, r26
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <__fp_cmp+0x3e>
    2b4a:	a1 40       	sbci	r26, 0x01	; 1
    2b4c:	a6 95       	lsr	r26
    2b4e:	8f ef       	ldi	r24, 0xFF	; 255
    2b50:	81 1d       	adc	r24, r1
    2b52:	81 1d       	adc	r24, r1
    2b54:	08 95       	ret

00002b56 <__fp_inf>:
    2b56:	97 f9       	bld	r25, 7
    2b58:	9f 67       	ori	r25, 0x7F	; 127
    2b5a:	80 e8       	ldi	r24, 0x80	; 128
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	08 95       	ret

00002b62 <__fp_mintl>:
    2b62:	88 23       	and	r24, r24
    2b64:	71 f4       	brne	.+28     	; 0x2b82 <__fp_mintl+0x20>
    2b66:	77 23       	and	r23, r23
    2b68:	21 f0       	breq	.+8      	; 0x2b72 <__fp_mintl+0x10>
    2b6a:	98 50       	subi	r25, 0x08	; 8
    2b6c:	87 2b       	or	r24, r23
    2b6e:	76 2f       	mov	r23, r22
    2b70:	07 c0       	rjmp	.+14     	; 0x2b80 <__fp_mintl+0x1e>
    2b72:	66 23       	and	r22, r22
    2b74:	11 f4       	brne	.+4      	; 0x2b7a <__fp_mintl+0x18>
    2b76:	99 27       	eor	r25, r25
    2b78:	0d c0       	rjmp	.+26     	; 0x2b94 <__fp_mintl+0x32>
    2b7a:	90 51       	subi	r25, 0x10	; 16
    2b7c:	86 2b       	or	r24, r22
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	2a f0       	brmi	.+10     	; 0x2b8e <__fp_mintl+0x2c>
    2b84:	9a 95       	dec	r25
    2b86:	66 0f       	add	r22, r22
    2b88:	77 1f       	adc	r23, r23
    2b8a:	88 1f       	adc	r24, r24
    2b8c:	da f7       	brpl	.-10     	; 0x2b84 <__fp_mintl+0x22>
    2b8e:	88 0f       	add	r24, r24
    2b90:	96 95       	lsr	r25
    2b92:	87 95       	ror	r24
    2b94:	97 f9       	bld	r25, 7
    2b96:	08 95       	ret

00002b98 <__fp_mpack>:
    2b98:	9f 3f       	cpi	r25, 0xFF	; 255
    2b9a:	31 f0       	breq	.+12     	; 0x2ba8 <__fp_mpack_finite+0xc>

00002b9c <__fp_mpack_finite>:
    2b9c:	91 50       	subi	r25, 0x01	; 1
    2b9e:	20 f4       	brcc	.+8      	; 0x2ba8 <__fp_mpack_finite+0xc>
    2ba0:	87 95       	ror	r24
    2ba2:	77 95       	ror	r23
    2ba4:	67 95       	ror	r22
    2ba6:	b7 95       	ror	r27
    2ba8:	88 0f       	add	r24, r24
    2baa:	91 1d       	adc	r25, r1
    2bac:	96 95       	lsr	r25
    2bae:	87 95       	ror	r24
    2bb0:	97 f9       	bld	r25, 7
    2bb2:	08 95       	ret

00002bb4 <__fp_nan>:
    2bb4:	9f ef       	ldi	r25, 0xFF	; 255
    2bb6:	80 ec       	ldi	r24, 0xC0	; 192
    2bb8:	08 95       	ret

00002bba <__fp_pscA>:
    2bba:	00 24       	eor	r0, r0
    2bbc:	0a 94       	dec	r0
    2bbe:	16 16       	cp	r1, r22
    2bc0:	17 06       	cpc	r1, r23
    2bc2:	18 06       	cpc	r1, r24
    2bc4:	09 06       	cpc	r0, r25
    2bc6:	08 95       	ret

00002bc8 <__fp_pscB>:
    2bc8:	00 24       	eor	r0, r0
    2bca:	0a 94       	dec	r0
    2bcc:	12 16       	cp	r1, r18
    2bce:	13 06       	cpc	r1, r19
    2bd0:	14 06       	cpc	r1, r20
    2bd2:	05 06       	cpc	r0, r21
    2bd4:	08 95       	ret

00002bd6 <__fp_round>:
    2bd6:	09 2e       	mov	r0, r25
    2bd8:	03 94       	inc	r0
    2bda:	00 0c       	add	r0, r0
    2bdc:	11 f4       	brne	.+4      	; 0x2be2 <__fp_round+0xc>
    2bde:	88 23       	and	r24, r24
    2be0:	52 f0       	brmi	.+20     	; 0x2bf6 <__fp_round+0x20>
    2be2:	bb 0f       	add	r27, r27
    2be4:	40 f4       	brcc	.+16     	; 0x2bf6 <__fp_round+0x20>
    2be6:	bf 2b       	or	r27, r31
    2be8:	11 f4       	brne	.+4      	; 0x2bee <__fp_round+0x18>
    2bea:	60 ff       	sbrs	r22, 0
    2bec:	04 c0       	rjmp	.+8      	; 0x2bf6 <__fp_round+0x20>
    2bee:	6f 5f       	subi	r22, 0xFF	; 255
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf6:	08 95       	ret

00002bf8 <__fp_split3>:
    2bf8:	57 fd       	sbrc	r21, 7
    2bfa:	90 58       	subi	r25, 0x80	; 128
    2bfc:	44 0f       	add	r20, r20
    2bfe:	55 1f       	adc	r21, r21
    2c00:	59 f0       	breq	.+22     	; 0x2c18 <__fp_splitA+0x10>
    2c02:	5f 3f       	cpi	r21, 0xFF	; 255
    2c04:	71 f0       	breq	.+28     	; 0x2c22 <__fp_splitA+0x1a>
    2c06:	47 95       	ror	r20

00002c08 <__fp_splitA>:
    2c08:	88 0f       	add	r24, r24
    2c0a:	97 fb       	bst	r25, 7
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	61 f0       	breq	.+24     	; 0x2c28 <__fp_splitA+0x20>
    2c10:	9f 3f       	cpi	r25, 0xFF	; 255
    2c12:	79 f0       	breq	.+30     	; 0x2c32 <__fp_splitA+0x2a>
    2c14:	87 95       	ror	r24
    2c16:	08 95       	ret
    2c18:	12 16       	cp	r1, r18
    2c1a:	13 06       	cpc	r1, r19
    2c1c:	14 06       	cpc	r1, r20
    2c1e:	55 1f       	adc	r21, r21
    2c20:	f2 cf       	rjmp	.-28     	; 0x2c06 <__fp_split3+0xe>
    2c22:	46 95       	lsr	r20
    2c24:	f1 df       	rcall	.-30     	; 0x2c08 <__fp_splitA>
    2c26:	08 c0       	rjmp	.+16     	; 0x2c38 <__fp_splitA+0x30>
    2c28:	16 16       	cp	r1, r22
    2c2a:	17 06       	cpc	r1, r23
    2c2c:	18 06       	cpc	r1, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	f1 cf       	rjmp	.-30     	; 0x2c14 <__fp_splitA+0xc>
    2c32:	86 95       	lsr	r24
    2c34:	71 05       	cpc	r23, r1
    2c36:	61 05       	cpc	r22, r1
    2c38:	08 94       	sec
    2c3a:	08 95       	ret

00002c3c <__fp_trunc>:
    2c3c:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__fp_splitA>
    2c40:	a0 f0       	brcs	.+40     	; 0x2c6a <__fp_trunc+0x2e>
    2c42:	be e7       	ldi	r27, 0x7E	; 126
    2c44:	b9 17       	cp	r27, r25
    2c46:	88 f4       	brcc	.+34     	; 0x2c6a <__fp_trunc+0x2e>
    2c48:	bb 27       	eor	r27, r27
    2c4a:	9f 38       	cpi	r25, 0x8F	; 143
    2c4c:	60 f4       	brcc	.+24     	; 0x2c66 <__fp_trunc+0x2a>
    2c4e:	16 16       	cp	r1, r22
    2c50:	b1 1d       	adc	r27, r1
    2c52:	67 2f       	mov	r22, r23
    2c54:	78 2f       	mov	r23, r24
    2c56:	88 27       	eor	r24, r24
    2c58:	98 5f       	subi	r25, 0xF8	; 248
    2c5a:	f7 cf       	rjmp	.-18     	; 0x2c4a <__fp_trunc+0xe>
    2c5c:	86 95       	lsr	r24
    2c5e:	77 95       	ror	r23
    2c60:	67 95       	ror	r22
    2c62:	b1 1d       	adc	r27, r1
    2c64:	93 95       	inc	r25
    2c66:	96 39       	cpi	r25, 0x96	; 150
    2c68:	c8 f3       	brcs	.-14     	; 0x2c5c <__fp_trunc+0x20>
    2c6a:	08 95       	ret

00002c6c <__fp_zero>:
    2c6c:	e8 94       	clt

00002c6e <__fp_szero>:
    2c6e:	bb 27       	eor	r27, r27
    2c70:	66 27       	eor	r22, r22
    2c72:	77 27       	eor	r23, r23
    2c74:	cb 01       	movw	r24, r22
    2c76:	97 f9       	bld	r25, 7
    2c78:	08 95       	ret

00002c7a <__gesf2>:
    2c7a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__fp_cmp>
    2c7e:	08 f4       	brcc	.+2      	; 0x2c82 <__gesf2+0x8>
    2c80:	8f ef       	ldi	r24, 0xFF	; 255
    2c82:	08 95       	ret

00002c84 <__mulsf3>:
    2c84:	0e 94 55 16 	call	0x2caa	; 0x2caa <__mulsf3x>
    2c88:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__fp_round>
    2c8c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__fp_pscA>
    2c90:	38 f0       	brcs	.+14     	; 0x2ca0 <__mulsf3+0x1c>
    2c92:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__fp_pscB>
    2c96:	20 f0       	brcs	.+8      	; 0x2ca0 <__mulsf3+0x1c>
    2c98:	95 23       	and	r25, r21
    2c9a:	11 f0       	breq	.+4      	; 0x2ca0 <__mulsf3+0x1c>
    2c9c:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__fp_inf>
    2ca0:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_nan>
    2ca4:	11 24       	eor	r1, r1
    2ca6:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__fp_szero>

00002caa <__mulsf3x>:
    2caa:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__fp_split3>
    2cae:	70 f3       	brcs	.-36     	; 0x2c8c <__mulsf3+0x8>

00002cb0 <__mulsf3_pse>:
    2cb0:	95 9f       	mul	r25, r21
    2cb2:	c1 f3       	breq	.-16     	; 0x2ca4 <__mulsf3+0x20>
    2cb4:	95 0f       	add	r25, r21
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	55 1f       	adc	r21, r21
    2cba:	62 9f       	mul	r22, r18
    2cbc:	f0 01       	movw	r30, r0
    2cbe:	72 9f       	mul	r23, r18
    2cc0:	bb 27       	eor	r27, r27
    2cc2:	f0 0d       	add	r31, r0
    2cc4:	b1 1d       	adc	r27, r1
    2cc6:	63 9f       	mul	r22, r19
    2cc8:	aa 27       	eor	r26, r26
    2cca:	f0 0d       	add	r31, r0
    2ccc:	b1 1d       	adc	r27, r1
    2cce:	aa 1f       	adc	r26, r26
    2cd0:	64 9f       	mul	r22, r20
    2cd2:	66 27       	eor	r22, r22
    2cd4:	b0 0d       	add	r27, r0
    2cd6:	a1 1d       	adc	r26, r1
    2cd8:	66 1f       	adc	r22, r22
    2cda:	82 9f       	mul	r24, r18
    2cdc:	22 27       	eor	r18, r18
    2cde:	b0 0d       	add	r27, r0
    2ce0:	a1 1d       	adc	r26, r1
    2ce2:	62 1f       	adc	r22, r18
    2ce4:	73 9f       	mul	r23, r19
    2ce6:	b0 0d       	add	r27, r0
    2ce8:	a1 1d       	adc	r26, r1
    2cea:	62 1f       	adc	r22, r18
    2cec:	83 9f       	mul	r24, r19
    2cee:	a0 0d       	add	r26, r0
    2cf0:	61 1d       	adc	r22, r1
    2cf2:	22 1f       	adc	r18, r18
    2cf4:	74 9f       	mul	r23, r20
    2cf6:	33 27       	eor	r19, r19
    2cf8:	a0 0d       	add	r26, r0
    2cfa:	61 1d       	adc	r22, r1
    2cfc:	23 1f       	adc	r18, r19
    2cfe:	84 9f       	mul	r24, r20
    2d00:	60 0d       	add	r22, r0
    2d02:	21 1d       	adc	r18, r1
    2d04:	82 2f       	mov	r24, r18
    2d06:	76 2f       	mov	r23, r22
    2d08:	6a 2f       	mov	r22, r26
    2d0a:	11 24       	eor	r1, r1
    2d0c:	9f 57       	subi	r25, 0x7F	; 127
    2d0e:	50 40       	sbci	r21, 0x00	; 0
    2d10:	9a f0       	brmi	.+38     	; 0x2d38 <__mulsf3_pse+0x88>
    2d12:	f1 f0       	breq	.+60     	; 0x2d50 <__mulsf3_pse+0xa0>
    2d14:	88 23       	and	r24, r24
    2d16:	4a f0       	brmi	.+18     	; 0x2d2a <__mulsf3_pse+0x7a>
    2d18:	ee 0f       	add	r30, r30
    2d1a:	ff 1f       	adc	r31, r31
    2d1c:	bb 1f       	adc	r27, r27
    2d1e:	66 1f       	adc	r22, r22
    2d20:	77 1f       	adc	r23, r23
    2d22:	88 1f       	adc	r24, r24
    2d24:	91 50       	subi	r25, 0x01	; 1
    2d26:	50 40       	sbci	r21, 0x00	; 0
    2d28:	a9 f7       	brne	.-22     	; 0x2d14 <__mulsf3_pse+0x64>
    2d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    2d2c:	51 05       	cpc	r21, r1
    2d2e:	80 f0       	brcs	.+32     	; 0x2d50 <__mulsf3_pse+0xa0>
    2d30:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__fp_inf>
    2d34:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__fp_szero>
    2d38:	5f 3f       	cpi	r21, 0xFF	; 255
    2d3a:	e4 f3       	brlt	.-8      	; 0x2d34 <__mulsf3_pse+0x84>
    2d3c:	98 3e       	cpi	r25, 0xE8	; 232
    2d3e:	d4 f3       	brlt	.-12     	; 0x2d34 <__mulsf3_pse+0x84>
    2d40:	86 95       	lsr	r24
    2d42:	77 95       	ror	r23
    2d44:	67 95       	ror	r22
    2d46:	b7 95       	ror	r27
    2d48:	f7 95       	ror	r31
    2d4a:	e7 95       	ror	r30
    2d4c:	9f 5f       	subi	r25, 0xFF	; 255
    2d4e:	c1 f7       	brne	.-16     	; 0x2d40 <__mulsf3_pse+0x90>
    2d50:	fe 2b       	or	r31, r30
    2d52:	88 0f       	add	r24, r24
    2d54:	91 1d       	adc	r25, r1
    2d56:	96 95       	lsr	r25
    2d58:	87 95       	ror	r24
    2d5a:	97 f9       	bld	r25, 7
    2d5c:	08 95       	ret

00002d5e <initVariant>:
    2d5e:	08 95       	ret

00002d60 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2d60:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <init>

	initVariant();
    2d64:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2d68:	0e 94 00 05 	call	0xa00	; 0xa00 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2d6c:	c0 e0       	ldi	r28, 0x00	; 0
    2d6e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2d70:	0e 94 49 04 	call	0x892	; 0x892 <loop>
		if (serialEventRun) serialEventRun();
    2d74:	20 97       	sbiw	r28, 0x00	; 0
    2d76:	e1 f3       	breq	.-8      	; 0x2d70 <main+0x10>
    2d78:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d7c:	f9 cf       	rjmp	.-14     	; 0x2d70 <main+0x10>

00002d7e <_Znwj>:
    2d7e:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <malloc>

00002d82 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2d82:	cf 92       	push	r12
    2d84:	df 92       	push	r13
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	6c 01       	movw	r12, r24
    2d94:	7a 01       	movw	r14, r20
    2d96:	8b 01       	movw	r16, r22
    2d98:	c0 e0       	ldi	r28, 0x00	; 0
    2d9a:	d0 e0       	ldi	r29, 0x00	; 0
    2d9c:	ce 15       	cp	r28, r14
    2d9e:	df 05       	cpc	r29, r15
    2da0:	81 f0       	breq	.+32     	; 0x2dc2 <_ZN5Print5writeEPKhj+0x40>
    2da2:	d8 01       	movw	r26, r16
    2da4:	6d 91       	ld	r22, X+
    2da6:	8d 01       	movw	r16, r26
    2da8:	d6 01       	movw	r26, r12
    2daa:	ed 91       	ld	r30, X+
    2dac:	fc 91       	ld	r31, X
    2dae:	01 90       	ld	r0, Z+
    2db0:	f0 81       	ld	r31, Z
    2db2:	e0 2d       	mov	r30, r0
    2db4:	c6 01       	movw	r24, r12
    2db6:	09 95       	icall
    2db8:	89 2b       	or	r24, r25
    2dba:	11 f0       	breq	.+4      	; 0x2dc0 <_ZN5Print5writeEPKhj+0x3e>
    2dbc:	21 96       	adiw	r28, 0x01	; 1
    2dbe:	ee cf       	rjmp	.-36     	; 0x2d9c <_ZN5Print5writeEPKhj+0x1a>
    2dc0:	7e 01       	movw	r14, r28
    2dc2:	c7 01       	movw	r24, r14
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
    2dd4:	08 95       	ret

00002dd6 <_ZN5Print5writeEPKc>:
    2dd6:	61 15       	cp	r22, r1
    2dd8:	71 05       	cpc	r23, r1
    2dda:	79 f0       	breq	.+30     	; 0x2dfa <_ZN5Print5writeEPKc+0x24>
    2ddc:	fb 01       	movw	r30, r22
    2dde:	01 90       	ld	r0, Z+
    2de0:	00 20       	and	r0, r0
    2de2:	e9 f7       	brne	.-6      	; 0x2dde <_ZN5Print5writeEPKc+0x8>
    2de4:	31 97       	sbiw	r30, 0x01	; 1
    2de6:	af 01       	movw	r20, r30
    2de8:	46 1b       	sub	r20, r22
    2dea:	57 0b       	sbc	r21, r23
    2dec:	dc 01       	movw	r26, r24
    2dee:	ed 91       	ld	r30, X+
    2df0:	fc 91       	ld	r31, X
    2df2:	02 80       	ldd	r0, Z+2	; 0x02
    2df4:	f3 81       	ldd	r31, Z+3	; 0x03
    2df6:	e0 2d       	mov	r30, r0
    2df8:	09 94       	ijmp
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	08 95       	ret

00002e00 <_ZN5Print5printERK6String>:
    2e00:	db 01       	movw	r26, r22
    2e02:	14 96       	adiw	r26, 0x04	; 4
    2e04:	4d 91       	ld	r20, X+
    2e06:	5c 91       	ld	r21, X
    2e08:	15 97       	sbiw	r26, 0x05	; 5
    2e0a:	6d 91       	ld	r22, X+
    2e0c:	7c 91       	ld	r23, X
    2e0e:	dc 01       	movw	r26, r24
    2e10:	ed 91       	ld	r30, X+
    2e12:	fc 91       	ld	r31, X
    2e14:	02 80       	ldd	r0, Z+2	; 0x02
    2e16:	f3 81       	ldd	r31, Z+3	; 0x03
    2e18:	e0 2d       	mov	r30, r0
    2e1a:	09 94       	ijmp

00002e1c <_ZN5Print5printEPKc>:
    2e1c:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <_ZN5Print5writeEPKc>

00002e20 <_ZN5Print5printEc>:
    2e20:	dc 01       	movw	r26, r24
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	01 90       	ld	r0, Z+
    2e28:	f0 81       	ld	r31, Z
    2e2a:	e0 2d       	mov	r30, r0
    2e2c:	09 94       	ijmp

00002e2e <_ZN5Print11printNumberEmh>:
    2e2e:	8f 92       	push	r8
    2e30:	9f 92       	push	r9
    2e32:	af 92       	push	r10
    2e34:	bf 92       	push	r11
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	0f 93       	push	r16
    2e3c:	1f 93       	push	r17
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	a1 97       	sbiw	r28, 0x21	; 33
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	7c 01       	movw	r14, r24
    2e54:	fa 01       	movw	r30, r20
    2e56:	cb 01       	movw	r24, r22
    2e58:	19 a2       	std	Y+33, r1	; 0x21
    2e5a:	22 30       	cpi	r18, 0x02	; 2
    2e5c:	08 f4       	brcc	.+2      	; 0x2e60 <_ZN5Print11printNumberEmh+0x32>
    2e5e:	2a e0       	ldi	r18, 0x0A	; 10
    2e60:	8e 01       	movw	r16, r28
    2e62:	0f 5d       	subi	r16, 0xDF	; 223
    2e64:	1f 4f       	sbci	r17, 0xFF	; 255
    2e66:	82 2e       	mov	r8, r18
    2e68:	91 2c       	mov	r9, r1
    2e6a:	a1 2c       	mov	r10, r1
    2e6c:	b1 2c       	mov	r11, r1
    2e6e:	bf 01       	movw	r22, r30
    2e70:	a5 01       	movw	r20, r10
    2e72:	94 01       	movw	r18, r8
    2e74:	0e 94 46 1b 	call	0x368c	; 0x368c <__udivmodsi4>
    2e78:	f9 01       	movw	r30, r18
    2e7a:	ca 01       	movw	r24, r20
    2e7c:	01 50       	subi	r16, 0x01	; 1
    2e7e:	11 09       	sbc	r17, r1
    2e80:	6a 30       	cpi	r22, 0x0A	; 10
    2e82:	10 f4       	brcc	.+4      	; 0x2e88 <_ZN5Print11printNumberEmh+0x5a>
    2e84:	60 5d       	subi	r22, 0xD0	; 208
    2e86:	01 c0       	rjmp	.+2      	; 0x2e8a <_ZN5Print11printNumberEmh+0x5c>
    2e88:	69 5c       	subi	r22, 0xC9	; 201
    2e8a:	d8 01       	movw	r26, r16
    2e8c:	6c 93       	st	X, r22
    2e8e:	23 2b       	or	r18, r19
    2e90:	24 2b       	or	r18, r20
    2e92:	25 2b       	or	r18, r21
    2e94:	61 f7       	brne	.-40     	; 0x2e6e <_ZN5Print11printNumberEmh+0x40>
    2e96:	b8 01       	movw	r22, r16
    2e98:	c7 01       	movw	r24, r14
    2e9a:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <_ZN5Print5writeEPKc>
    2e9e:	a1 96       	adiw	r28, 0x21	; 33
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	1f 91       	pop	r17
    2eb0:	0f 91       	pop	r16
    2eb2:	ff 90       	pop	r15
    2eb4:	ef 90       	pop	r14
    2eb6:	bf 90       	pop	r11
    2eb8:	af 90       	pop	r10
    2eba:	9f 90       	pop	r9
    2ebc:	8f 90       	pop	r8
    2ebe:	08 95       	ret

00002ec0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2ec0:	cf 92       	push	r12
    2ec2:	df 92       	push	r13
    2ec4:	ef 92       	push	r14
    2ec6:	ff 92       	push	r15
    2ec8:	0f 93       	push	r16
    2eca:	1f 93       	push	r17
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
  if (base == 0) {
    2ed0:	21 15       	cp	r18, r1
    2ed2:	31 05       	cpc	r19, r1
    2ed4:	81 f4       	brne	.+32     	; 0x2ef6 <_ZN5Print5printEli+0x36>
    return write(n);
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	ed 91       	ld	r30, X+
    2eda:	fc 91       	ld	r31, X
    2edc:	01 90       	ld	r0, Z+
    2ede:	f0 81       	ld	r31, Z
    2ee0:	e0 2d       	mov	r30, r0
    2ee2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	1f 91       	pop	r17
    2eea:	0f 91       	pop	r16
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	df 90       	pop	r13
    2ef2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2ef4:	09 94       	ijmp
  } else if (base == 10) {
    2ef6:	2a 30       	cpi	r18, 0x0A	; 10
    2ef8:	31 05       	cpc	r19, r1
    2efa:	01 f5       	brne	.+64     	; 0x2f3c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    2efc:	77 ff       	sbrs	r23, 7
    2efe:	1d c0       	rjmp	.+58     	; 0x2f3a <_ZN5Print5printEli+0x7a>
    2f00:	6a 01       	movw	r12, r20
    2f02:	7b 01       	movw	r14, r22
    2f04:	ec 01       	movw	r28, r24
      int t = print('-');
    2f06:	6d e2       	ldi	r22, 0x2D	; 45
    2f08:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_ZN5Print5printEc>
    2f0c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2f0e:	44 27       	eor	r20, r20
    2f10:	55 27       	eor	r21, r21
    2f12:	ba 01       	movw	r22, r20
    2f14:	4c 19       	sub	r20, r12
    2f16:	5d 09       	sbc	r21, r13
    2f18:	6e 09       	sbc	r22, r14
    2f1a:	7f 09       	sbc	r23, r15
    2f1c:	2a e0       	ldi	r18, 0x0A	; 10
    2f1e:	ce 01       	movw	r24, r28
    2f20:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN5Print11printNumberEmh>
    2f24:	80 0f       	add	r24, r16
    2f26:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	ff 90       	pop	r15
    2f32:	ef 90       	pop	r14
    2f34:	df 90       	pop	r13
    2f36:	cf 90       	pop	r12
    2f38:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2f3a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2f4c:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <_ZN5Print11printNumberEmh>

00002f50 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2f50:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2f52:	ab 01       	movw	r20, r22
    2f54:	77 0f       	add	r23, r23
    2f56:	66 0b       	sbc	r22, r22
    2f58:	77 0b       	sbc	r23, r23
    2f5a:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <_ZN5Print5printEli>

00002f5e <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2f5e:	08 95       	ret

00002f60 <attachInterrupt>:
    2f60:	82 30       	cpi	r24, 0x02	; 2
    2f62:	e8 f4       	brcc	.+58     	; 0x2f9e <attachInterrupt+0x3e>
    2f64:	e8 2f       	mov	r30, r24
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	ee 0f       	add	r30, r30
    2f6a:	ff 1f       	adc	r31, r31
    2f6c:	e8 5f       	subi	r30, 0xF8	; 248
    2f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f70:	71 83       	std	Z+1, r23	; 0x01
    2f72:	60 83       	st	Z, r22
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	41 f0       	breq	.+16     	; 0x2f88 <attachInterrupt+0x28>
    2f78:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2f7c:	8c 7f       	andi	r24, 0xFC	; 252
    2f7e:	48 2b       	or	r20, r24
    2f80:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2f84:	e8 9a       	sbi	0x1d, 0	; 29
    2f86:	08 95       	ret
    2f88:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2f8c:	83 7f       	andi	r24, 0xF3	; 243
    2f8e:	44 0f       	add	r20, r20
    2f90:	55 1f       	adc	r21, r21
    2f92:	44 0f       	add	r20, r20
    2f94:	55 1f       	adc	r21, r21
    2f96:	48 2b       	or	r20, r24
    2f98:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2f9c:	e9 9a       	sbi	0x1d, 1	; 29
    2f9e:	08 95       	ret

00002fa0 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2fa0:	1f 92       	push	r1
    2fa2:	0f 92       	push	r0
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	0f 92       	push	r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	2f 93       	push	r18
    2fac:	3f 93       	push	r19
    2fae:	4f 93       	push	r20
    2fb0:	5f 93       	push	r21
    2fb2:	6f 93       	push	r22
    2fb4:	7f 93       	push	r23
    2fb6:	8f 93       	push	r24
    2fb8:	9f 93       	push	r25
    2fba:	af 93       	push	r26
    2fbc:	bf 93       	push	r27
    2fbe:	ef 93       	push	r30
    2fc0:	ff 93       	push	r31
    2fc2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc>
    2fc6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x1>
    2fca:	09 95       	icall
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	bf 91       	pop	r27
    2fd2:	af 91       	pop	r26
    2fd4:	9f 91       	pop	r25
    2fd6:	8f 91       	pop	r24
    2fd8:	7f 91       	pop	r23
    2fda:	6f 91       	pop	r22
    2fdc:	5f 91       	pop	r21
    2fde:	4f 91       	pop	r20
    2fe0:	3f 91       	pop	r19
    2fe2:	2f 91       	pop	r18
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	0f 90       	pop	r0
    2fea:	1f 90       	pop	r1
    2fec:	18 95       	reti

00002fee <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2fee:	1f 92       	push	r1
    2ff0:	0f 92       	push	r0
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	0f 92       	push	r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	2f 93       	push	r18
    2ffa:	3f 93       	push	r19
    2ffc:	4f 93       	push	r20
    2ffe:	5f 93       	push	r21
    3000:	6f 93       	push	r22
    3002:	7f 93       	push	r23
    3004:	8f 93       	push	r24
    3006:	9f 93       	push	r25
    3008:	af 93       	push	r26
    300a:	bf 93       	push	r27
    300c:	ef 93       	push	r30
    300e:	ff 93       	push	r31
    3010:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <intFunc+0x2>
    3014:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <intFunc+0x3>
    3018:	09 95       	icall
    301a:	ff 91       	pop	r31
    301c:	ef 91       	pop	r30
    301e:	bf 91       	pop	r27
    3020:	af 91       	pop	r26
    3022:	9f 91       	pop	r25
    3024:	8f 91       	pop	r24
    3026:	7f 91       	pop	r23
    3028:	6f 91       	pop	r22
    302a:	5f 91       	pop	r21
    302c:	4f 91       	pop	r20
    302e:	3f 91       	pop	r19
    3030:	2f 91       	pop	r18
    3032:	0f 90       	pop	r0
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	0f 90       	pop	r0
    3038:	1f 90       	pop	r1
    303a:	18 95       	reti

0000303c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    303c:	1f 92       	push	r1
    303e:	0f 92       	push	r0
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	0f 92       	push	r0
    3044:	11 24       	eor	r1, r1
    3046:	2f 93       	push	r18
    3048:	3f 93       	push	r19
    304a:	8f 93       	push	r24
    304c:	9f 93       	push	r25
    304e:	af 93       	push	r26
    3050:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3052:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <timer0_millis>
    3056:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <timer0_millis+0x1>
    305a:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <timer0_millis+0x2>
    305e:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3062:	30 91 a8 02 	lds	r19, 0x02A8	; 0x8002a8 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3066:	23 e0       	ldi	r18, 0x03	; 3
    3068:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    306a:	2d 37       	cpi	r18, 0x7D	; 125
    306c:	20 f4       	brcc	.+8      	; 0x3076 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    306e:	01 96       	adiw	r24, 0x01	; 1
    3070:	a1 1d       	adc	r26, r1
    3072:	b1 1d       	adc	r27, r1
    3074:	05 c0       	rjmp	.+10     	; 0x3080 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3076:	26 e8       	ldi	r18, 0x86	; 134
    3078:	23 0f       	add	r18, r19
		m += 1;
    307a:	02 96       	adiw	r24, 0x02	; 2
    307c:	a1 1d       	adc	r26, r1
    307e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3080:	20 93 a8 02 	sts	0x02A8, r18	; 0x8002a8 <timer0_fract>
	timer0_millis = m;
    3084:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <timer0_millis>
    3088:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <timer0_millis+0x1>
    308c:	a0 93 ab 02 	sts	0x02AB, r26	; 0x8002ab <timer0_millis+0x2>
    3090:	b0 93 ac 02 	sts	0x02AC, r27	; 0x8002ac <timer0_millis+0x3>
	timer0_overflow_count++;
    3094:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timer0_overflow_count>
    3098:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <timer0_overflow_count+0x1>
    309c:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <timer0_overflow_count+0x2>
    30a0:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <timer0_overflow_count+0x3>
    30a4:	01 96       	adiw	r24, 0x01	; 1
    30a6:	a1 1d       	adc	r26, r1
    30a8:	b1 1d       	adc	r27, r1
    30aa:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <timer0_overflow_count>
    30ae:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <timer0_overflow_count+0x1>
    30b2:	a0 93 af 02 	sts	0x02AF, r26	; 0x8002af <timer0_overflow_count+0x2>
    30b6:	b0 93 b0 02 	sts	0x02B0, r27	; 0x8002b0 <timer0_overflow_count+0x3>
}
    30ba:	bf 91       	pop	r27
    30bc:	af 91       	pop	r26
    30be:	9f 91       	pop	r25
    30c0:	8f 91       	pop	r24
    30c2:	3f 91       	pop	r19
    30c4:	2f 91       	pop	r18
    30c6:	0f 90       	pop	r0
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	0f 90       	pop	r0
    30cc:	1f 90       	pop	r1
    30ce:	18 95       	reti

000030d0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    30d0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    30d2:	f8 94       	cli
	m = timer0_millis;
    30d4:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <timer0_millis>
    30d8:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <timer0_millis+0x1>
    30dc:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <timer0_millis+0x2>
    30e0:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <timer0_millis+0x3>
	SREG = oldSREG;
    30e4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    30e6:	08 95       	ret

000030e8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    30e8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    30ea:	f8 94       	cli
	m = timer0_overflow_count;
    30ec:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timer0_overflow_count>
    30f0:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <timer0_overflow_count+0x1>
    30f4:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <timer0_overflow_count+0x2>
    30f8:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    30fc:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    30fe:	a8 9b       	sbis	0x15, 0	; 21
    3100:	05 c0       	rjmp	.+10     	; 0x310c <micros+0x24>
    3102:	2f 3f       	cpi	r18, 0xFF	; 255
    3104:	19 f0       	breq	.+6      	; 0x310c <micros+0x24>
		m++;
    3106:	01 96       	adiw	r24, 0x01	; 1
    3108:	a1 1d       	adc	r26, r1
    310a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    310c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    310e:	ba 2f       	mov	r27, r26
    3110:	a9 2f       	mov	r26, r25
    3112:	98 2f       	mov	r25, r24
    3114:	88 27       	eor	r24, r24
    3116:	82 0f       	add	r24, r18
    3118:	91 1d       	adc	r25, r1
    311a:	a1 1d       	adc	r26, r1
    311c:	b1 1d       	adc	r27, r1
    311e:	bc 01       	movw	r22, r24
    3120:	cd 01       	movw	r24, r26
    3122:	42 e0       	ldi	r20, 0x02	; 2
    3124:	66 0f       	add	r22, r22
    3126:	77 1f       	adc	r23, r23
    3128:	88 1f       	adc	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	4a 95       	dec	r20
    312e:	d1 f7       	brne	.-12     	; 0x3124 <micros+0x3c>
}
    3130:	08 95       	ret

00003132 <delay>:

void delay(unsigned long ms)
{
    3132:	8f 92       	push	r8
    3134:	9f 92       	push	r9
    3136:	af 92       	push	r10
    3138:	bf 92       	push	r11
    313a:	cf 92       	push	r12
    313c:	df 92       	push	r13
    313e:	ef 92       	push	r14
    3140:	ff 92       	push	r15
    3142:	6b 01       	movw	r12, r22
    3144:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3146:	0e 94 74 18 	call	0x30e8	; 0x30e8 <micros>
    314a:	4b 01       	movw	r8, r22
    314c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    314e:	c1 14       	cp	r12, r1
    3150:	d1 04       	cpc	r13, r1
    3152:	e1 04       	cpc	r14, r1
    3154:	f1 04       	cpc	r15, r1
    3156:	01 f1       	breq	.+64     	; 0x3198 <delay+0x66>
		yield();
    3158:	0e 94 31 1b 	call	0x3662	; 0x3662 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    315c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <micros>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	88 19       	sub	r24, r8
    3166:	99 09       	sbc	r25, r9
    3168:	aa 09       	sbc	r26, r10
    316a:	bb 09       	sbc	r27, r11
    316c:	88 3e       	cpi	r24, 0xE8	; 232
    316e:	93 40       	sbci	r25, 0x03	; 3
    3170:	a1 05       	cpc	r26, r1
    3172:	b1 05       	cpc	r27, r1
    3174:	60 f3       	brcs	.-40     	; 0x314e <delay+0x1c>
			ms--;
    3176:	21 e0       	ldi	r18, 0x01	; 1
    3178:	c2 1a       	sub	r12, r18
    317a:	d1 08       	sbc	r13, r1
    317c:	e1 08       	sbc	r14, r1
    317e:	f1 08       	sbc	r15, r1
			start += 1000;
    3180:	88 ee       	ldi	r24, 0xE8	; 232
    3182:	88 0e       	add	r8, r24
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	98 1e       	adc	r9, r24
    3188:	a1 1c       	adc	r10, r1
    318a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    318c:	c1 14       	cp	r12, r1
    318e:	d1 04       	cpc	r13, r1
    3190:	e1 04       	cpc	r14, r1
    3192:	f1 04       	cpc	r15, r1
    3194:	19 f7       	brne	.-58     	; 0x315c <delay+0x2a>
    3196:	db cf       	rjmp	.-74     	; 0x314e <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3198:	ff 90       	pop	r15
    319a:	ef 90       	pop	r14
    319c:	df 90       	pop	r13
    319e:	cf 90       	pop	r12
    31a0:	bf 90       	pop	r11
    31a2:	af 90       	pop	r10
    31a4:	9f 90       	pop	r9
    31a6:	8f 90       	pop	r8
    31a8:	08 95       	ret

000031aa <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    31aa:	82 30       	cpi	r24, 0x02	; 2
    31ac:	91 05       	cpc	r25, r1
    31ae:	38 f0       	brcs	.+14     	; 0x31be <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    31b0:	88 0f       	add	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    31b8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <delayMicroseconds+0x10>
    31be:	08 95       	ret

000031c0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    31c0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    31c2:	84 b5       	in	r24, 0x24	; 36
    31c4:	82 60       	ori	r24, 0x02	; 2
    31c6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    31c8:	84 b5       	in	r24, 0x24	; 36
    31ca:	81 60       	ori	r24, 0x01	; 1
    31cc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    31ce:	85 b5       	in	r24, 0x25	; 37
    31d0:	82 60       	ori	r24, 0x02	; 2
    31d2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    31d4:	85 b5       	in	r24, 0x25	; 37
    31d6:	81 60       	ori	r24, 0x01	; 1
    31d8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    31da:	ee e6       	ldi	r30, 0x6E	; 110
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	81 60       	ori	r24, 0x01	; 1
    31e2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    31e4:	e1 e8       	ldi	r30, 0x81	; 129
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    31ea:	80 81       	ld	r24, Z
    31ec:	82 60       	ori	r24, 0x02	; 2
    31ee:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    31f0:	80 81       	ld	r24, Z
    31f2:	81 60       	ori	r24, 0x01	; 1
    31f4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    31f6:	e0 e8       	ldi	r30, 0x80	; 128
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	81 60       	ori	r24, 0x01	; 1
    31fe:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3200:	e1 eb       	ldi	r30, 0xB1	; 177
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	84 60       	ori	r24, 0x04	; 4
    3208:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    320a:	e0 eb       	ldi	r30, 0xB0	; 176
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	81 60       	ori	r24, 0x01	; 1
    3212:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3214:	ea e7       	ldi	r30, 0x7A	; 122
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	84 60       	ori	r24, 0x04	; 4
    321c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    321e:	80 81       	ld	r24, Z
    3220:	82 60       	ori	r24, 0x02	; 2
    3222:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3224:	80 81       	ld	r24, Z
    3226:	81 60       	ori	r24, 0x01	; 1
    3228:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    322a:	80 81       	ld	r24, Z
    322c:	80 68       	ori	r24, 0x80	; 128
    322e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3230:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3234:	08 95       	ret

00003236 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3236:	83 30       	cpi	r24, 0x03	; 3
    3238:	81 f0       	breq	.+32     	; 0x325a <turnOffPWM+0x24>
    323a:	28 f4       	brcc	.+10     	; 0x3246 <turnOffPWM+0x10>
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	99 f0       	breq	.+38     	; 0x3266 <turnOffPWM+0x30>
    3240:	82 30       	cpi	r24, 0x02	; 2
    3242:	a1 f0       	breq	.+40     	; 0x326c <turnOffPWM+0x36>
    3244:	08 95       	ret
    3246:	87 30       	cpi	r24, 0x07	; 7
    3248:	a9 f0       	breq	.+42     	; 0x3274 <turnOffPWM+0x3e>
    324a:	88 30       	cpi	r24, 0x08	; 8
    324c:	b9 f0       	breq	.+46     	; 0x327c <turnOffPWM+0x46>
    324e:	84 30       	cpi	r24, 0x04	; 4
    3250:	d1 f4       	brne	.+52     	; 0x3286 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3252:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3256:	8f 7d       	andi	r24, 0xDF	; 223
    3258:	03 c0       	rjmp	.+6      	; 0x3260 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    325a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    325e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3260:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3264:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3266:	84 b5       	in	r24, 0x24	; 36
    3268:	8f 77       	andi	r24, 0x7F	; 127
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    326c:	84 b5       	in	r24, 0x24	; 36
    326e:	8f 7d       	andi	r24, 0xDF	; 223
    3270:	84 bd       	out	0x24, r24	; 36
    3272:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3274:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3278:	8f 77       	andi	r24, 0x7F	; 127
    327a:	03 c0       	rjmp	.+6      	; 0x3282 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    327c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3280:	8f 7d       	andi	r24, 0xDF	; 223
    3282:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3286:	08 95       	ret

00003288 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	fc 01       	movw	r30, r24
    3290:	e4 58       	subi	r30, 0x84	; 132
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3296:	fc 01       	movw	r30, r24
    3298:	e0 57       	subi	r30, 0x70	; 112
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    329e:	88 23       	and	r24, r24
    32a0:	61 f1       	breq	.+88     	; 0x32fa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	fc 01       	movw	r30, r24
    32aa:	e8 54       	subi	r30, 0x48	; 72
    32ac:	ff 4f       	sbci	r31, 0xFF	; 255
    32ae:	c5 91       	lpm	r28, Z+
    32b0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    32b2:	fc 01       	movw	r30, r24
    32b4:	e2 55       	subi	r30, 0x52	; 82
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	a5 91       	lpm	r26, Z+
    32ba:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    32bc:	61 11       	cpse	r22, r1
    32be:	09 c0       	rjmp	.+18     	; 0x32d2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    32c0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    32c2:	f8 94       	cli
		*reg &= ~bit;
    32c4:	88 81       	ld	r24, Y
    32c6:	20 95       	com	r18
    32c8:	82 23       	and	r24, r18
    32ca:	88 83       	st	Y, r24
		*out &= ~bit;
    32cc:	ec 91       	ld	r30, X
    32ce:	2e 23       	and	r18, r30
    32d0:	0b c0       	rjmp	.+22     	; 0x32e8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    32d2:	62 30       	cpi	r22, 0x02	; 2
    32d4:	61 f4       	brne	.+24     	; 0x32ee <pinMode+0x66>
		uint8_t oldSREG = SREG;
    32d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    32d8:	f8 94       	cli
		*reg &= ~bit;
    32da:	88 81       	ld	r24, Y
    32dc:	32 2f       	mov	r19, r18
    32de:	30 95       	com	r19
    32e0:	83 23       	and	r24, r19
    32e2:	88 83       	st	Y, r24
		*out |= bit;
    32e4:	ec 91       	ld	r30, X
    32e6:	2e 2b       	or	r18, r30
    32e8:	2c 93       	st	X, r18
		SREG = oldSREG;
    32ea:	9f bf       	out	0x3f, r25	; 63
    32ec:	06 c0       	rjmp	.+12     	; 0x32fa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    32ee:	8f b7       	in	r24, 0x3f	; 63
                cli();
    32f0:	f8 94       	cli
		*reg |= bit;
    32f2:	e8 81       	ld	r30, Y
    32f4:	2e 2b       	or	r18, r30
    32f6:	28 83       	st	Y, r18
		SREG = oldSREG;
    32f8:	8f bf       	out	0x3f, r24	; 63
	}
}
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	08 95       	ret

00003300 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3306:	28 2f       	mov	r18, r24
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	f9 01       	movw	r30, r18
    330c:	e8 59       	subi	r30, 0x98	; 152
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3312:	f9 01       	movw	r30, r18
    3314:	e4 58       	subi	r30, 0x84	; 132
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    331a:	f9 01       	movw	r30, r18
    331c:	e0 57       	subi	r30, 0x70	; 112
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3322:	cc 23       	and	r28, r28
    3324:	c1 f0       	breq	.+48     	; 0x3356 <digitalWrite+0x56>
    3326:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3328:	81 11       	cpse	r24, r1
    332a:	0e 94 1b 19 	call	0x3236	; 0x3236 <turnOffPWM>

	out = portOutputRegister(port);
    332e:	ec 2f       	mov	r30, r28
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	ee 0f       	add	r30, r30
    3334:	ff 1f       	adc	r31, r31
    3336:	e2 55       	subi	r30, 0x52	; 82
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	a5 91       	lpm	r26, Z+
    333c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    333e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3340:	f8 94       	cli

	if (val == LOW) {
    3342:	11 11       	cpse	r17, r1
    3344:	04 c0       	rjmp	.+8      	; 0x334e <digitalWrite+0x4e>
		*out &= ~bit;
    3346:	8c 91       	ld	r24, X
    3348:	d0 95       	com	r29
    334a:	d8 23       	and	r29, r24
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <digitalWrite+0x52>
	} else {
		*out |= bit;
    334e:	ec 91       	ld	r30, X
    3350:	de 2b       	or	r29, r30
    3352:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3354:	9f bf       	out	0x3f, r25	; 63
}
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	1f 91       	pop	r17
    335c:	08 95       	ret

0000335e <digitalRead>:

int digitalRead(uint8_t pin)
{
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3362:	28 2f       	mov	r18, r24
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	f9 01       	movw	r30, r18
    3368:	e8 59       	subi	r30, 0x98	; 152
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    336e:	f9 01       	movw	r30, r18
    3370:	e4 58       	subi	r30, 0x84	; 132
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3376:	f9 01       	movw	r30, r18
    3378:	e0 57       	subi	r30, 0x70	; 112
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    337e:	cc 23       	and	r28, r28
    3380:	91 f0       	breq	.+36     	; 0x33a6 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3382:	81 11       	cpse	r24, r1
    3384:	0e 94 1b 19 	call	0x3236	; 0x3236 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3388:	ec 2f       	mov	r30, r28
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	ee 0f       	add	r30, r30
    338e:	ff 1f       	adc	r31, r31
    3390:	ec 55       	subi	r30, 0x5C	; 92
    3392:	ff 4f       	sbci	r31, 0xFF	; 255
    3394:	a5 91       	lpm	r26, Z+
    3396:	b4 91       	lpm	r27, Z
    3398:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    339a:	ed 23       	and	r30, r29
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	21 f4       	brne	.+8      	; 0x33aa <digitalRead+0x4c>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <digitalRead+0x4c>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	08 95       	ret

000033b0 <_ZN6StringD1Ev>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    33b0:	fc 01       	movw	r30, r24
    33b2:	80 81       	ld	r24, Z
    33b4:	91 81       	ldd	r25, Z+1	; 0x01
    33b6:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <free>

000033ba <_ZN6String10invalidateEv>:
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	ec 01       	movw	r28, r24
    33c0:	88 81       	ld	r24, Y
    33c2:	99 81       	ldd	r25, Y+1	; 0x01
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	11 f0       	breq	.+4      	; 0x33cc <_ZN6String10invalidateEv+0x12>
    33c8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <free>
    33cc:	19 82       	std	Y+1, r1	; 0x01
    33ce:	18 82       	st	Y, r1
    33d0:	1d 82       	std	Y+5, r1	; 0x05
    33d2:	1c 82       	std	Y+4, r1	; 0x04
    33d4:	1b 82       	std	Y+3, r1	; 0x03
    33d6:	1a 82       	std	Y+2, r1	; 0x02
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	08 95       	ret

000033de <_ZN6String12changeBufferEj>:
    33de:	0f 93       	push	r16
    33e0:	1f 93       	push	r17
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	ec 01       	movw	r28, r24
    33e8:	8b 01       	movw	r16, r22
    33ea:	6f 5f       	subi	r22, 0xFF	; 255
    33ec:	7f 4f       	sbci	r23, 0xFF	; 255
    33ee:	88 81       	ld	r24, Y
    33f0:	99 81       	ldd	r25, Y+1	; 0x01
    33f2:	0e 94 a3 1c 	call	0x3946	; 0x3946 <realloc>
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	31 f0       	breq	.+12     	; 0x3406 <_ZN6String12changeBufferEj+0x28>
    33fa:	99 83       	std	Y+1, r25	; 0x01
    33fc:	88 83       	st	Y, r24
    33fe:	1b 83       	std	Y+3, r17	; 0x03
    3400:	0a 83       	std	Y+2, r16	; 0x02
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <_ZN6String12changeBufferEj+0x2a>
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	08 95       	ret

00003412 <_ZN6String7reserveEj>:
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	ec 01       	movw	r28, r24
    3418:	88 81       	ld	r24, Y
    341a:	99 81       	ldd	r25, Y+1	; 0x01
    341c:	89 2b       	or	r24, r25
    341e:	29 f0       	breq	.+10     	; 0x342a <_ZN6String7reserveEj+0x18>
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	86 17       	cp	r24, r22
    3426:	97 07       	cpc	r25, r23
    3428:	60 f4       	brcc	.+24     	; 0x3442 <_ZN6String7reserveEj+0x30>
    342a:	ce 01       	movw	r24, r28
    342c:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN6String12changeBufferEj>
    3430:	88 23       	and	r24, r24
    3432:	41 f0       	breq	.+16     	; 0x3444 <_ZN6String7reserveEj+0x32>
    3434:	8c 81       	ldd	r24, Y+4	; 0x04
    3436:	9d 81       	ldd	r25, Y+5	; 0x05
    3438:	89 2b       	or	r24, r25
    343a:	19 f4       	brne	.+6      	; 0x3442 <_ZN6String7reserveEj+0x30>
    343c:	e8 81       	ld	r30, Y
    343e:	f9 81       	ldd	r31, Y+1	; 0x01
    3440:	10 82       	st	Z, r1
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	08 95       	ret

0000344a <_ZN6String4copyEPKcj>:
    344a:	ef 92       	push	r14
    344c:	ff 92       	push	r15
    344e:	0f 93       	push	r16
    3450:	1f 93       	push	r17
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	ec 01       	movw	r28, r24
    3458:	7b 01       	movw	r14, r22
    345a:	8a 01       	movw	r16, r20
    345c:	ba 01       	movw	r22, r20
    345e:	0e 94 09 1a 	call	0x3412	; 0x3412 <_ZN6String7reserveEj>
    3462:	81 11       	cpse	r24, r1
    3464:	04 c0       	rjmp	.+8      	; 0x346e <_ZN6String4copyEPKcj+0x24>
    3466:	ce 01       	movw	r24, r28
    3468:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6String10invalidateEv>
    346c:	07 c0       	rjmp	.+14     	; 0x347c <_ZN6String4copyEPKcj+0x32>
    346e:	1d 83       	std	Y+5, r17	; 0x05
    3470:	0c 83       	std	Y+4, r16	; 0x04
    3472:	b7 01       	movw	r22, r14
    3474:	88 81       	ld	r24, Y
    3476:	99 81       	ldd	r25, Y+1	; 0x01
    3478:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <strcpy>
    347c:	ce 01       	movw	r24, r28
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	08 95       	ret

0000348c <_ZN6StringC1EPKc>:
    348c:	fc 01       	movw	r30, r24
    348e:	11 82       	std	Z+1, r1	; 0x01
    3490:	10 82       	st	Z, r1
    3492:	13 82       	std	Z+3, r1	; 0x03
    3494:	12 82       	std	Z+2, r1	; 0x02
    3496:	15 82       	std	Z+5, r1	; 0x05
    3498:	14 82       	std	Z+4, r1	; 0x04
    349a:	61 15       	cp	r22, r1
    349c:	71 05       	cpc	r23, r1
    349e:	51 f0       	breq	.+20     	; 0x34b4 <_ZN6StringC1EPKc+0x28>
    34a0:	fb 01       	movw	r30, r22
    34a2:	01 90       	ld	r0, Z+
    34a4:	00 20       	and	r0, r0
    34a6:	e9 f7       	brne	.-6      	; 0x34a2 <_ZN6StringC1EPKc+0x16>
    34a8:	31 97       	sbiw	r30, 0x01	; 1
    34aa:	af 01       	movw	r20, r30
    34ac:	46 1b       	sub	r20, r22
    34ae:	57 0b       	sbc	r21, r23
    34b0:	0c 94 25 1a 	jmp	0x344a	; 0x344a <_ZN6String4copyEPKcj>
    34b4:	08 95       	ret

000034b6 <_ZN6StringaSERKS_>:
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	ec 01       	movw	r28, r24
    34bc:	fb 01       	movw	r30, r22
    34be:	86 17       	cp	r24, r22
    34c0:	97 07       	cpc	r25, r23
    34c2:	61 f0       	breq	.+24     	; 0x34dc <_ZN6StringaSERKS_+0x26>
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	61 15       	cp	r22, r1
    34ca:	71 05       	cpc	r23, r1
    34cc:	29 f0       	breq	.+10     	; 0x34d8 <_ZN6StringaSERKS_+0x22>
    34ce:	44 81       	ldd	r20, Z+4	; 0x04
    34d0:	55 81       	ldd	r21, Z+5	; 0x05
    34d2:	0e 94 25 1a 	call	0x344a	; 0x344a <_ZN6String4copyEPKcj>
    34d6:	02 c0       	rjmp	.+4      	; 0x34dc <_ZN6StringaSERKS_+0x26>
    34d8:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6String10invalidateEv>
    34dc:	ce 01       	movw	r24, r28
    34de:	df 91       	pop	r29
    34e0:	cf 91       	pop	r28
    34e2:	08 95       	ret

000034e4 <_ZN6StringC1ERKS_>:
    34e4:	fc 01       	movw	r30, r24
    34e6:	11 82       	std	Z+1, r1	; 0x01
    34e8:	10 82       	st	Z, r1
    34ea:	13 82       	std	Z+3, r1	; 0x03
    34ec:	12 82       	std	Z+2, r1	; 0x02
    34ee:	15 82       	std	Z+5, r1	; 0x05
    34f0:	14 82       	std	Z+4, r1	; 0x04
    34f2:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <_ZN6StringaSERKS_>

000034f6 <_ZN6StringaSEPKc>:
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	ec 01       	movw	r28, r24
    34fc:	61 15       	cp	r22, r1
    34fe:	71 05       	cpc	r23, r1
    3500:	59 f0       	breq	.+22     	; 0x3518 <_ZN6StringaSEPKc+0x22>
    3502:	fb 01       	movw	r30, r22
    3504:	01 90       	ld	r0, Z+
    3506:	00 20       	and	r0, r0
    3508:	e9 f7       	brne	.-6      	; 0x3504 <_ZN6StringaSEPKc+0xe>
    350a:	31 97       	sbiw	r30, 0x01	; 1
    350c:	af 01       	movw	r20, r30
    350e:	46 1b       	sub	r20, r22
    3510:	57 0b       	sbc	r21, r23
    3512:	0e 94 25 1a 	call	0x344a	; 0x344a <_ZN6String4copyEPKcj>
    3516:	02 c0       	rjmp	.+4      	; 0x351c <_ZN6StringaSEPKc+0x26>
    3518:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6String10invalidateEv>
    351c:	ce 01       	movw	r24, r28
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	08 95       	ret

00003524 <_ZN6String6concatEPKcj>:
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	61 15       	cp	r22, r1
    3532:	71 05       	cpc	r23, r1
    3534:	11 f4       	brne	.+4      	; 0x353a <_ZN6String6concatEPKcj+0x16>
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	1c c0       	rjmp	.+56     	; 0x3572 <_ZN6String6concatEPKcj+0x4e>
    353a:	41 15       	cp	r20, r1
    353c:	51 05       	cpc	r21, r1
    353e:	c1 f0       	breq	.+48     	; 0x3570 <_ZN6String6concatEPKcj+0x4c>
    3540:	7b 01       	movw	r14, r22
    3542:	ec 01       	movw	r28, r24
    3544:	8c 81       	ldd	r24, Y+4	; 0x04
    3546:	9d 81       	ldd	r25, Y+5	; 0x05
    3548:	8a 01       	movw	r16, r20
    354a:	08 0f       	add	r16, r24
    354c:	19 1f       	adc	r17, r25
    354e:	b8 01       	movw	r22, r16
    3550:	ce 01       	movw	r24, r28
    3552:	0e 94 09 1a 	call	0x3412	; 0x3412 <_ZN6String7reserveEj>
    3556:	88 23       	and	r24, r24
    3558:	71 f3       	breq	.-36     	; 0x3536 <_ZN6String6concatEPKcj+0x12>
    355a:	28 81       	ld	r18, Y
    355c:	39 81       	ldd	r19, Y+1	; 0x01
    355e:	8c 81       	ldd	r24, Y+4	; 0x04
    3560:	9d 81       	ldd	r25, Y+5	; 0x05
    3562:	b7 01       	movw	r22, r14
    3564:	82 0f       	add	r24, r18
    3566:	93 1f       	adc	r25, r19
    3568:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <strcpy>
    356c:	1d 83       	std	Y+5, r17	; 0x05
    356e:	0c 83       	std	Y+4, r16	; 0x04
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	ff 90       	pop	r15
    357c:	ef 90       	pop	r14
    357e:	08 95       	ret

00003580 <_ZplRK15StringSumHelperRK6String>:
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    3584:	ec 01       	movw	r28, r24
    3586:	fb 01       	movw	r30, r22
    3588:	44 81       	ldd	r20, Z+4	; 0x04
    358a:	55 81       	ldd	r21, Z+5	; 0x05
    358c:	60 81       	ld	r22, Z
    358e:	71 81       	ldd	r23, Z+1	; 0x01
    3590:	0e 94 92 1a 	call	0x3524	; 0x3524 <_ZN6String6concatEPKcj>
    3594:	81 11       	cpse	r24, r1
    3596:	03 c0       	rjmp	.+6      	; 0x359e <_ZplRK15StringSumHelperRK6String+0x1e>
    3598:	ce 01       	movw	r24, r28
    359a:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6String10invalidateEv>
    359e:	ce 01       	movw	r24, r28
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	08 95       	ret

000035a6 <_ZplRK15StringSumHelperPKc>:
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	ec 01       	movw	r28, r24
    35ac:	61 15       	cp	r22, r1
    35ae:	71 05       	cpc	r23, r1
    35b0:	61 f0       	breq	.+24     	; 0x35ca <_ZplRK15StringSumHelperPKc+0x24>
    35b2:	fb 01       	movw	r30, r22
    35b4:	01 90       	ld	r0, Z+
    35b6:	00 20       	and	r0, r0
    35b8:	e9 f7       	brne	.-6      	; 0x35b4 <_ZplRK15StringSumHelperPKc+0xe>
    35ba:	31 97       	sbiw	r30, 0x01	; 1
    35bc:	af 01       	movw	r20, r30
    35be:	46 1b       	sub	r20, r22
    35c0:	57 0b       	sbc	r21, r23
    35c2:	0e 94 92 1a 	call	0x3524	; 0x3524 <_ZN6String6concatEPKcj>
    35c6:	81 11       	cpse	r24, r1
    35c8:	03 c0       	rjmp	.+6      	; 0x35d0 <_ZplRK15StringSumHelperPKc+0x2a>
    35ca:	ce 01       	movw	r24, r28
    35cc:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZN6String10invalidateEv>
    35d0:	ce 01       	movw	r24, r28
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	08 95       	ret

000035d8 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    35d8:	bf 92       	push	r11
    35da:	cf 92       	push	r12
    35dc:	df 92       	push	r13
    35de:	ef 92       	push	r14
    35e0:	ff 92       	push	r15
    35e2:	0f 93       	push	r16
    35e4:	1f 93       	push	r17
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	7c 01       	movw	r14, r24
    35ec:	6b 01       	movw	r12, r22
    35ee:	8a 01       	movw	r16, r20
    35f0:	e9 01       	movw	r28, r18
	if (left > right) {
    35f2:	24 17       	cp	r18, r20
    35f4:	35 07       	cpc	r19, r21
    35f6:	20 f4       	brcc	.+8      	; 0x3600 <_ZNK6String9substringEjj+0x28>
    35f8:	81 2f       	mov	r24, r17
    35fa:	89 01       	movw	r16, r18
    35fc:	c4 2f       	mov	r28, r20
    35fe:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    3600:	67 e8       	ldi	r22, 0x87	; 135
    3602:	71 e0       	ldi	r23, 0x01	; 1
    3604:	c7 01       	movw	r24, r14
    3606:	0e 94 46 1a 	call	0x348c	; 0x348c <_ZN6StringC1EPKc>
	if (left >= len) return out;
    360a:	d6 01       	movw	r26, r12
    360c:	14 96       	adiw	r26, 0x04	; 4
    360e:	8d 91       	ld	r24, X+
    3610:	9c 91       	ld	r25, X
    3612:	15 97       	sbiw	r26, 0x05	; 5
    3614:	08 17       	cp	r16, r24
    3616:	19 07       	cpc	r17, r25
    3618:	c8 f4       	brcc	.+50     	; 0x364c <_ZNK6String9substringEjj+0x74>
    361a:	8c 17       	cp	r24, r28
    361c:	9d 07       	cpc	r25, r29
    361e:	08 f4       	brcc	.+2      	; 0x3622 <_ZNK6String9substringEjj+0x4a>
    3620:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    3622:	d6 01       	movw	r26, r12
    3624:	ed 91       	ld	r30, X+
    3626:	fc 91       	ld	r31, X
    3628:	11 97       	sbiw	r26, 0x01	; 1
    362a:	ec 0f       	add	r30, r28
    362c:	fd 1f       	adc	r31, r29
    362e:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    3630:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    3632:	6d 91       	ld	r22, X+
    3634:	7c 91       	ld	r23, X
    3636:	60 0f       	add	r22, r16
    3638:	71 1f       	adc	r23, r17
    363a:	c7 01       	movw	r24, r14
    363c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    3640:	d6 01       	movw	r26, r12
    3642:	ed 91       	ld	r30, X+
    3644:	fc 91       	ld	r31, X
    3646:	ec 0f       	add	r30, r28
    3648:	fd 1f       	adc	r31, r29
    364a:	b0 82       	st	Z, r11
	return out;
}
    364c:	c7 01       	movw	r24, r14
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	ff 90       	pop	r15
    3658:	ef 90       	pop	r14
    365a:	df 90       	pop	r13
    365c:	cf 90       	pop	r12
    365e:	bf 90       	pop	r11
    3660:	08 95       	ret

00003662 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3662:	08 95       	ret

00003664 <__divmodhi4>:
    3664:	97 fb       	bst	r25, 7
    3666:	07 2e       	mov	r0, r23
    3668:	16 f4       	brtc	.+4      	; 0x366e <__divmodhi4+0xa>
    366a:	00 94       	com	r0
    366c:	07 d0       	rcall	.+14     	; 0x367c <__divmodhi4_neg1>
    366e:	77 fd       	sbrc	r23, 7
    3670:	09 d0       	rcall	.+18     	; 0x3684 <__divmodhi4_neg2>
    3672:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__udivmodhi4>
    3676:	07 fc       	sbrc	r0, 7
    3678:	05 d0       	rcall	.+10     	; 0x3684 <__divmodhi4_neg2>
    367a:	3e f4       	brtc	.+14     	; 0x368a <__divmodhi4_exit>

0000367c <__divmodhi4_neg1>:
    367c:	90 95       	com	r25
    367e:	81 95       	neg	r24
    3680:	9f 4f       	sbci	r25, 0xFF	; 255
    3682:	08 95       	ret

00003684 <__divmodhi4_neg2>:
    3684:	70 95       	com	r23
    3686:	61 95       	neg	r22
    3688:	7f 4f       	sbci	r23, 0xFF	; 255

0000368a <__divmodhi4_exit>:
    368a:	08 95       	ret

0000368c <__udivmodsi4>:
    368c:	a1 e2       	ldi	r26, 0x21	; 33
    368e:	1a 2e       	mov	r1, r26
    3690:	aa 1b       	sub	r26, r26
    3692:	bb 1b       	sub	r27, r27
    3694:	fd 01       	movw	r30, r26
    3696:	0d c0       	rjmp	.+26     	; 0x36b2 <__udivmodsi4_ep>

00003698 <__udivmodsi4_loop>:
    3698:	aa 1f       	adc	r26, r26
    369a:	bb 1f       	adc	r27, r27
    369c:	ee 1f       	adc	r30, r30
    369e:	ff 1f       	adc	r31, r31
    36a0:	a2 17       	cp	r26, r18
    36a2:	b3 07       	cpc	r27, r19
    36a4:	e4 07       	cpc	r30, r20
    36a6:	f5 07       	cpc	r31, r21
    36a8:	20 f0       	brcs	.+8      	; 0x36b2 <__udivmodsi4_ep>
    36aa:	a2 1b       	sub	r26, r18
    36ac:	b3 0b       	sbc	r27, r19
    36ae:	e4 0b       	sbc	r30, r20
    36b0:	f5 0b       	sbc	r31, r21

000036b2 <__udivmodsi4_ep>:
    36b2:	66 1f       	adc	r22, r22
    36b4:	77 1f       	adc	r23, r23
    36b6:	88 1f       	adc	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	1a 94       	dec	r1
    36bc:	69 f7       	brne	.-38     	; 0x3698 <__udivmodsi4_loop>
    36be:	60 95       	com	r22
    36c0:	70 95       	com	r23
    36c2:	80 95       	com	r24
    36c4:	90 95       	com	r25
    36c6:	9b 01       	movw	r18, r22
    36c8:	ac 01       	movw	r20, r24
    36ca:	bd 01       	movw	r22, r26
    36cc:	cf 01       	movw	r24, r30
    36ce:	08 95       	ret

000036d0 <__udivmodhi4>:
    36d0:	aa 1b       	sub	r26, r26
    36d2:	bb 1b       	sub	r27, r27
    36d4:	51 e1       	ldi	r21, 0x11	; 17
    36d6:	07 c0       	rjmp	.+14     	; 0x36e6 <__udivmodhi4_ep>

000036d8 <__udivmodhi4_loop>:
    36d8:	aa 1f       	adc	r26, r26
    36da:	bb 1f       	adc	r27, r27
    36dc:	a6 17       	cp	r26, r22
    36de:	b7 07       	cpc	r27, r23
    36e0:	10 f0       	brcs	.+4      	; 0x36e6 <__udivmodhi4_ep>
    36e2:	a6 1b       	sub	r26, r22
    36e4:	b7 0b       	sbc	r27, r23

000036e6 <__udivmodhi4_ep>:
    36e6:	88 1f       	adc	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	5a 95       	dec	r21
    36ec:	a9 f7       	brne	.-22     	; 0x36d8 <__udivmodhi4_loop>
    36ee:	80 95       	com	r24
    36f0:	90 95       	com	r25
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	08 95       	ret

000036f8 <__tablejump2__>:
    36f8:	ee 0f       	add	r30, r30
    36fa:	ff 1f       	adc	r31, r31
    36fc:	05 90       	lpm	r0, Z+
    36fe:	f4 91       	lpm	r31, Z
    3700:	e0 2d       	mov	r30, r0
    3702:	09 94       	ijmp

00003704 <malloc>:
    3704:	0f 93       	push	r16
    3706:	1f 93       	push	r17
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	82 30       	cpi	r24, 0x02	; 2
    370e:	91 05       	cpc	r25, r1
    3710:	10 f4       	brcc	.+4      	; 0x3716 <malloc+0x12>
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <__flp>
    371a:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <__flp+0x1>
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	a0 e0       	ldi	r26, 0x00	; 0
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	30 97       	sbiw	r30, 0x00	; 0
    3728:	19 f1       	breq	.+70     	; 0x3770 <malloc+0x6c>
    372a:	40 81       	ld	r20, Z
    372c:	51 81       	ldd	r21, Z+1	; 0x01
    372e:	02 81       	ldd	r16, Z+2	; 0x02
    3730:	13 81       	ldd	r17, Z+3	; 0x03
    3732:	48 17       	cp	r20, r24
    3734:	59 07       	cpc	r21, r25
    3736:	c8 f0       	brcs	.+50     	; 0x376a <malloc+0x66>
    3738:	84 17       	cp	r24, r20
    373a:	95 07       	cpc	r25, r21
    373c:	69 f4       	brne	.+26     	; 0x3758 <malloc+0x54>
    373e:	10 97       	sbiw	r26, 0x00	; 0
    3740:	31 f0       	breq	.+12     	; 0x374e <malloc+0x4a>
    3742:	12 96       	adiw	r26, 0x02	; 2
    3744:	0c 93       	st	X, r16
    3746:	12 97       	sbiw	r26, 0x02	; 2
    3748:	13 96       	adiw	r26, 0x03	; 3
    374a:	1c 93       	st	X, r17
    374c:	27 c0       	rjmp	.+78     	; 0x379c <malloc+0x98>
    374e:	00 93 b3 02 	sts	0x02B3, r16	; 0x8002b3 <__flp>
    3752:	10 93 b4 02 	sts	0x02B4, r17	; 0x8002b4 <__flp+0x1>
    3756:	22 c0       	rjmp	.+68     	; 0x379c <malloc+0x98>
    3758:	21 15       	cp	r18, r1
    375a:	31 05       	cpc	r19, r1
    375c:	19 f0       	breq	.+6      	; 0x3764 <malloc+0x60>
    375e:	42 17       	cp	r20, r18
    3760:	53 07       	cpc	r21, r19
    3762:	18 f4       	brcc	.+6      	; 0x376a <malloc+0x66>
    3764:	9a 01       	movw	r18, r20
    3766:	bd 01       	movw	r22, r26
    3768:	ef 01       	movw	r28, r30
    376a:	df 01       	movw	r26, r30
    376c:	f8 01       	movw	r30, r16
    376e:	db cf       	rjmp	.-74     	; 0x3726 <malloc+0x22>
    3770:	21 15       	cp	r18, r1
    3772:	31 05       	cpc	r19, r1
    3774:	f9 f0       	breq	.+62     	; 0x37b4 <malloc+0xb0>
    3776:	28 1b       	sub	r18, r24
    3778:	39 0b       	sbc	r19, r25
    377a:	24 30       	cpi	r18, 0x04	; 4
    377c:	31 05       	cpc	r19, r1
    377e:	80 f4       	brcc	.+32     	; 0x37a0 <malloc+0x9c>
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	9b 81       	ldd	r25, Y+3	; 0x03
    3784:	61 15       	cp	r22, r1
    3786:	71 05       	cpc	r23, r1
    3788:	21 f0       	breq	.+8      	; 0x3792 <malloc+0x8e>
    378a:	fb 01       	movw	r30, r22
    378c:	93 83       	std	Z+3, r25	; 0x03
    378e:	82 83       	std	Z+2, r24	; 0x02
    3790:	04 c0       	rjmp	.+8      	; 0x379a <malloc+0x96>
    3792:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <__flp+0x1>
    3796:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <__flp>
    379a:	fe 01       	movw	r30, r28
    379c:	32 96       	adiw	r30, 0x02	; 2
    379e:	44 c0       	rjmp	.+136    	; 0x3828 <malloc+0x124>
    37a0:	fe 01       	movw	r30, r28
    37a2:	e2 0f       	add	r30, r18
    37a4:	f3 1f       	adc	r31, r19
    37a6:	81 93       	st	Z+, r24
    37a8:	91 93       	st	Z+, r25
    37aa:	22 50       	subi	r18, 0x02	; 2
    37ac:	31 09       	sbc	r19, r1
    37ae:	39 83       	std	Y+1, r19	; 0x01
    37b0:	28 83       	st	Y, r18
    37b2:	3a c0       	rjmp	.+116    	; 0x3828 <malloc+0x124>
    37b4:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <__brkval>
    37b8:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <__brkval+0x1>
    37bc:	23 2b       	or	r18, r19
    37be:	41 f4       	brne	.+16     	; 0x37d0 <malloc+0xcc>
    37c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    37c4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    37c8:	30 93 b2 02 	sts	0x02B2, r19	; 0x8002b2 <__brkval+0x1>
    37cc:	20 93 b1 02 	sts	0x02B1, r18	; 0x8002b1 <__brkval>
    37d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    37d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    37d8:	21 15       	cp	r18, r1
    37da:	31 05       	cpc	r19, r1
    37dc:	41 f4       	brne	.+16     	; 0x37ee <malloc+0xea>
    37de:	2d b7       	in	r18, 0x3d	; 61
    37e0:	3e b7       	in	r19, 0x3e	; 62
    37e2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    37e6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    37ea:	24 1b       	sub	r18, r20
    37ec:	35 0b       	sbc	r19, r21
    37ee:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <__brkval>
    37f2:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <__brkval+0x1>
    37f6:	e2 17       	cp	r30, r18
    37f8:	f3 07       	cpc	r31, r19
    37fa:	a0 f4       	brcc	.+40     	; 0x3824 <malloc+0x120>
    37fc:	2e 1b       	sub	r18, r30
    37fe:	3f 0b       	sbc	r19, r31
    3800:	28 17       	cp	r18, r24
    3802:	39 07       	cpc	r19, r25
    3804:	78 f0       	brcs	.+30     	; 0x3824 <malloc+0x120>
    3806:	ac 01       	movw	r20, r24
    3808:	4e 5f       	subi	r20, 0xFE	; 254
    380a:	5f 4f       	sbci	r21, 0xFF	; 255
    380c:	24 17       	cp	r18, r20
    380e:	35 07       	cpc	r19, r21
    3810:	48 f0       	brcs	.+18     	; 0x3824 <malloc+0x120>
    3812:	4e 0f       	add	r20, r30
    3814:	5f 1f       	adc	r21, r31
    3816:	50 93 b2 02 	sts	0x02B2, r21	; 0x8002b2 <__brkval+0x1>
    381a:	40 93 b1 02 	sts	0x02B1, r20	; 0x8002b1 <__brkval>
    381e:	81 93       	st	Z+, r24
    3820:	91 93       	st	Z+, r25
    3822:	02 c0       	rjmp	.+4      	; 0x3828 <malloc+0x124>
    3824:	e0 e0       	ldi	r30, 0x00	; 0
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	cf 01       	movw	r24, r30
    382a:	df 91       	pop	r29
    382c:	cf 91       	pop	r28
    382e:	1f 91       	pop	r17
    3830:	0f 91       	pop	r16
    3832:	08 95       	ret

00003834 <free>:
    3834:	cf 93       	push	r28
    3836:	df 93       	push	r29
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	09 f4       	brne	.+2      	; 0x383e <free+0xa>
    383c:	81 c0       	rjmp	.+258    	; 0x3940 <free+0x10c>
    383e:	fc 01       	movw	r30, r24
    3840:	32 97       	sbiw	r30, 0x02	; 2
    3842:	13 82       	std	Z+3, r1	; 0x03
    3844:	12 82       	std	Z+2, r1	; 0x02
    3846:	a0 91 b3 02 	lds	r26, 0x02B3	; 0x8002b3 <__flp>
    384a:	b0 91 b4 02 	lds	r27, 0x02B4	; 0x8002b4 <__flp+0x1>
    384e:	10 97       	sbiw	r26, 0x00	; 0
    3850:	81 f4       	brne	.+32     	; 0x3872 <free+0x3e>
    3852:	20 81       	ld	r18, Z
    3854:	31 81       	ldd	r19, Z+1	; 0x01
    3856:	82 0f       	add	r24, r18
    3858:	93 1f       	adc	r25, r19
    385a:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <__brkval>
    385e:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <__brkval+0x1>
    3862:	28 17       	cp	r18, r24
    3864:	39 07       	cpc	r19, r25
    3866:	51 f5       	brne	.+84     	; 0x38bc <free+0x88>
    3868:	f0 93 b2 02 	sts	0x02B2, r31	; 0x8002b2 <__brkval+0x1>
    386c:	e0 93 b1 02 	sts	0x02B1, r30	; 0x8002b1 <__brkval>
    3870:	67 c0       	rjmp	.+206    	; 0x3940 <free+0x10c>
    3872:	ed 01       	movw	r28, r26
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	ce 17       	cp	r28, r30
    387a:	df 07       	cpc	r29, r31
    387c:	40 f4       	brcc	.+16     	; 0x388e <free+0x5a>
    387e:	4a 81       	ldd	r20, Y+2	; 0x02
    3880:	5b 81       	ldd	r21, Y+3	; 0x03
    3882:	9e 01       	movw	r18, r28
    3884:	41 15       	cp	r20, r1
    3886:	51 05       	cpc	r21, r1
    3888:	f1 f0       	breq	.+60     	; 0x38c6 <free+0x92>
    388a:	ea 01       	movw	r28, r20
    388c:	f5 cf       	rjmp	.-22     	; 0x3878 <free+0x44>
    388e:	d3 83       	std	Z+3, r29	; 0x03
    3890:	c2 83       	std	Z+2, r28	; 0x02
    3892:	40 81       	ld	r20, Z
    3894:	51 81       	ldd	r21, Z+1	; 0x01
    3896:	84 0f       	add	r24, r20
    3898:	95 1f       	adc	r25, r21
    389a:	c8 17       	cp	r28, r24
    389c:	d9 07       	cpc	r29, r25
    389e:	59 f4       	brne	.+22     	; 0x38b6 <free+0x82>
    38a0:	88 81       	ld	r24, Y
    38a2:	99 81       	ldd	r25, Y+1	; 0x01
    38a4:	84 0f       	add	r24, r20
    38a6:	95 1f       	adc	r25, r21
    38a8:	02 96       	adiw	r24, 0x02	; 2
    38aa:	91 83       	std	Z+1, r25	; 0x01
    38ac:	80 83       	st	Z, r24
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	9b 81       	ldd	r25, Y+3	; 0x03
    38b2:	93 83       	std	Z+3, r25	; 0x03
    38b4:	82 83       	std	Z+2, r24	; 0x02
    38b6:	21 15       	cp	r18, r1
    38b8:	31 05       	cpc	r19, r1
    38ba:	29 f4       	brne	.+10     	; 0x38c6 <free+0x92>
    38bc:	f0 93 b4 02 	sts	0x02B4, r31	; 0x8002b4 <__flp+0x1>
    38c0:	e0 93 b3 02 	sts	0x02B3, r30	; 0x8002b3 <__flp>
    38c4:	3d c0       	rjmp	.+122    	; 0x3940 <free+0x10c>
    38c6:	e9 01       	movw	r28, r18
    38c8:	fb 83       	std	Y+3, r31	; 0x03
    38ca:	ea 83       	std	Y+2, r30	; 0x02
    38cc:	49 91       	ld	r20, Y+
    38ce:	59 91       	ld	r21, Y+
    38d0:	c4 0f       	add	r28, r20
    38d2:	d5 1f       	adc	r29, r21
    38d4:	ec 17       	cp	r30, r28
    38d6:	fd 07       	cpc	r31, r29
    38d8:	61 f4       	brne	.+24     	; 0x38f2 <free+0xbe>
    38da:	80 81       	ld	r24, Z
    38dc:	91 81       	ldd	r25, Z+1	; 0x01
    38de:	84 0f       	add	r24, r20
    38e0:	95 1f       	adc	r25, r21
    38e2:	02 96       	adiw	r24, 0x02	; 2
    38e4:	e9 01       	movw	r28, r18
    38e6:	99 83       	std	Y+1, r25	; 0x01
    38e8:	88 83       	st	Y, r24
    38ea:	82 81       	ldd	r24, Z+2	; 0x02
    38ec:	93 81       	ldd	r25, Z+3	; 0x03
    38ee:	9b 83       	std	Y+3, r25	; 0x03
    38f0:	8a 83       	std	Y+2, r24	; 0x02
    38f2:	e0 e0       	ldi	r30, 0x00	; 0
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	12 96       	adiw	r26, 0x02	; 2
    38f8:	8d 91       	ld	r24, X+
    38fa:	9c 91       	ld	r25, X
    38fc:	13 97       	sbiw	r26, 0x03	; 3
    38fe:	00 97       	sbiw	r24, 0x00	; 0
    3900:	19 f0       	breq	.+6      	; 0x3908 <free+0xd4>
    3902:	fd 01       	movw	r30, r26
    3904:	dc 01       	movw	r26, r24
    3906:	f7 cf       	rjmp	.-18     	; 0x38f6 <free+0xc2>
    3908:	8d 91       	ld	r24, X+
    390a:	9c 91       	ld	r25, X
    390c:	11 97       	sbiw	r26, 0x01	; 1
    390e:	9d 01       	movw	r18, r26
    3910:	2e 5f       	subi	r18, 0xFE	; 254
    3912:	3f 4f       	sbci	r19, 0xFF	; 255
    3914:	82 0f       	add	r24, r18
    3916:	93 1f       	adc	r25, r19
    3918:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <__brkval>
    391c:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <__brkval+0x1>
    3920:	28 17       	cp	r18, r24
    3922:	39 07       	cpc	r19, r25
    3924:	69 f4       	brne	.+26     	; 0x3940 <free+0x10c>
    3926:	30 97       	sbiw	r30, 0x00	; 0
    3928:	29 f4       	brne	.+10     	; 0x3934 <free+0x100>
    392a:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <__flp+0x1>
    392e:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <__flp>
    3932:	02 c0       	rjmp	.+4      	; 0x3938 <free+0x104>
    3934:	13 82       	std	Z+3, r1	; 0x03
    3936:	12 82       	std	Z+2, r1	; 0x02
    3938:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <__brkval+0x1>
    393c:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <__brkval>
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	08 95       	ret

00003946 <realloc>:
    3946:	a0 e0       	ldi	r26, 0x00	; 0
    3948:	b0 e0       	ldi	r27, 0x00	; 0
    394a:	e9 ea       	ldi	r30, 0xA9	; 169
    394c:	fc e1       	ldi	r31, 0x1C	; 28
    394e:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <__prologue_saves__+0x8>
    3952:	ec 01       	movw	r28, r24
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	21 f4       	brne	.+8      	; 0x3960 <realloc+0x1a>
    3958:	cb 01       	movw	r24, r22
    395a:	0e 94 82 1b 	call	0x3704	; 0x3704 <malloc>
    395e:	b4 c0       	rjmp	.+360    	; 0x3ac8 <realloc+0x182>
    3960:	fc 01       	movw	r30, r24
    3962:	e6 0f       	add	r30, r22
    3964:	f7 1f       	adc	r31, r23
    3966:	9c 01       	movw	r18, r24
    3968:	22 50       	subi	r18, 0x02	; 2
    396a:	31 09       	sbc	r19, r1
    396c:	e2 17       	cp	r30, r18
    396e:	f3 07       	cpc	r31, r19
    3970:	08 f4       	brcc	.+2      	; 0x3974 <realloc+0x2e>
    3972:	a8 c0       	rjmp	.+336    	; 0x3ac4 <realloc+0x17e>
    3974:	d9 01       	movw	r26, r18
    3976:	0d 91       	ld	r16, X+
    3978:	1c 91       	ld	r17, X
    397a:	11 97       	sbiw	r26, 0x01	; 1
    397c:	06 17       	cp	r16, r22
    397e:	17 07       	cpc	r17, r23
    3980:	b0 f0       	brcs	.+44     	; 0x39ae <realloc+0x68>
    3982:	05 30       	cpi	r16, 0x05	; 5
    3984:	11 05       	cpc	r17, r1
    3986:	08 f4       	brcc	.+2      	; 0x398a <realloc+0x44>
    3988:	9b c0       	rjmp	.+310    	; 0x3ac0 <realloc+0x17a>
    398a:	c8 01       	movw	r24, r16
    398c:	04 97       	sbiw	r24, 0x04	; 4
    398e:	86 17       	cp	r24, r22
    3990:	97 07       	cpc	r25, r23
    3992:	08 f4       	brcc	.+2      	; 0x3996 <realloc+0x50>
    3994:	95 c0       	rjmp	.+298    	; 0x3ac0 <realloc+0x17a>
    3996:	02 50       	subi	r16, 0x02	; 2
    3998:	11 09       	sbc	r17, r1
    399a:	06 1b       	sub	r16, r22
    399c:	17 0b       	sbc	r17, r23
    399e:	01 93       	st	Z+, r16
    39a0:	11 93       	st	Z+, r17
    39a2:	6d 93       	st	X+, r22
    39a4:	7c 93       	st	X, r23
    39a6:	cf 01       	movw	r24, r30
    39a8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <free>
    39ac:	89 c0       	rjmp	.+274    	; 0x3ac0 <realloc+0x17a>
    39ae:	5b 01       	movw	r10, r22
    39b0:	a0 1a       	sub	r10, r16
    39b2:	b1 0a       	sbc	r11, r17
    39b4:	4c 01       	movw	r8, r24
    39b6:	80 0e       	add	r8, r16
    39b8:	91 1e       	adc	r9, r17
    39ba:	a0 91 b3 02 	lds	r26, 0x02B3	; 0x8002b3 <__flp>
    39be:	b0 91 b4 02 	lds	r27, 0x02B4	; 0x8002b4 <__flp+0x1>
    39c2:	61 2c       	mov	r6, r1
    39c4:	71 2c       	mov	r7, r1
    39c6:	e1 2c       	mov	r14, r1
    39c8:	f1 2c       	mov	r15, r1
    39ca:	10 97       	sbiw	r26, 0x00	; 0
    39cc:	09 f4       	brne	.+2      	; 0x39d0 <realloc+0x8a>
    39ce:	46 c0       	rjmp	.+140    	; 0x3a5c <realloc+0x116>
    39d0:	8d 91       	ld	r24, X+
    39d2:	9c 91       	ld	r25, X
    39d4:	11 97       	sbiw	r26, 0x01	; 1
    39d6:	a8 15       	cp	r26, r8
    39d8:	b9 05       	cpc	r27, r9
    39da:	b1 f5       	brne	.+108    	; 0x3a48 <realloc+0x102>
    39dc:	6c 01       	movw	r12, r24
    39de:	42 e0       	ldi	r20, 0x02	; 2
    39e0:	c4 0e       	add	r12, r20
    39e2:	d1 1c       	adc	r13, r1
    39e4:	ca 14       	cp	r12, r10
    39e6:	db 04       	cpc	r13, r11
    39e8:	78 f1       	brcs	.+94     	; 0x3a48 <realloc+0x102>
    39ea:	4c 01       	movw	r8, r24
    39ec:	8a 18       	sub	r8, r10
    39ee:	9b 08       	sbc	r9, r11
    39f0:	64 01       	movw	r12, r8
    39f2:	42 e0       	ldi	r20, 0x02	; 2
    39f4:	c4 0e       	add	r12, r20
    39f6:	d1 1c       	adc	r13, r1
    39f8:	12 96       	adiw	r26, 0x02	; 2
    39fa:	bc 90       	ld	r11, X
    39fc:	12 97       	sbiw	r26, 0x02	; 2
    39fe:	13 96       	adiw	r26, 0x03	; 3
    3a00:	ac 91       	ld	r26, X
    3a02:	b5 e0       	ldi	r27, 0x05	; 5
    3a04:	cb 16       	cp	r12, r27
    3a06:	d1 04       	cpc	r13, r1
    3a08:	40 f0       	brcs	.+16     	; 0x3a1a <realloc+0xd4>
    3a0a:	b2 82       	std	Z+2, r11	; 0x02
    3a0c:	a3 83       	std	Z+3, r26	; 0x03
    3a0e:	91 82       	std	Z+1, r9	; 0x01
    3a10:	80 82       	st	Z, r8
    3a12:	d9 01       	movw	r26, r18
    3a14:	6d 93       	st	X+, r22
    3a16:	7c 93       	st	X, r23
    3a18:	09 c0       	rjmp	.+18     	; 0x3a2c <realloc+0xe6>
    3a1a:	0e 5f       	subi	r16, 0xFE	; 254
    3a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1e:	80 0f       	add	r24, r16
    3a20:	91 1f       	adc	r25, r17
    3a22:	f9 01       	movw	r30, r18
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	80 83       	st	Z, r24
    3a28:	eb 2d       	mov	r30, r11
    3a2a:	fa 2f       	mov	r31, r26
    3a2c:	e1 14       	cp	r14, r1
    3a2e:	f1 04       	cpc	r15, r1
    3a30:	31 f0       	breq	.+12     	; 0x3a3e <realloc+0xf8>
    3a32:	d7 01       	movw	r26, r14
    3a34:	13 96       	adiw	r26, 0x03	; 3
    3a36:	fc 93       	st	X, r31
    3a38:	ee 93       	st	-X, r30
    3a3a:	12 97       	sbiw	r26, 0x02	; 2
    3a3c:	41 c0       	rjmp	.+130    	; 0x3ac0 <realloc+0x17a>
    3a3e:	f0 93 b4 02 	sts	0x02B4, r31	; 0x8002b4 <__flp+0x1>
    3a42:	e0 93 b3 02 	sts	0x02B3, r30	; 0x8002b3 <__flp>
    3a46:	3c c0       	rjmp	.+120    	; 0x3ac0 <realloc+0x17a>
    3a48:	68 16       	cp	r6, r24
    3a4a:	79 06       	cpc	r7, r25
    3a4c:	08 f4       	brcc	.+2      	; 0x3a50 <realloc+0x10a>
    3a4e:	3c 01       	movw	r6, r24
    3a50:	7d 01       	movw	r14, r26
    3a52:	12 96       	adiw	r26, 0x02	; 2
    3a54:	0d 90       	ld	r0, X+
    3a56:	bc 91       	ld	r27, X
    3a58:	a0 2d       	mov	r26, r0
    3a5a:	b7 cf       	rjmp	.-146    	; 0x39ca <realloc+0x84>
    3a5c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <__brkval>
    3a60:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <__brkval+0x1>
    3a64:	88 16       	cp	r8, r24
    3a66:	99 06       	cpc	r9, r25
    3a68:	e1 f4       	brne	.+56     	; 0x3aa2 <realloc+0x15c>
    3a6a:	66 16       	cp	r6, r22
    3a6c:	77 06       	cpc	r7, r23
    3a6e:	c8 f4       	brcc	.+50     	; 0x3aa2 <realloc+0x15c>
    3a70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3a74:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3a78:	00 97       	sbiw	r24, 0x00	; 0
    3a7a:	41 f4       	brne	.+16     	; 0x3a8c <realloc+0x146>
    3a7c:	8d b7       	in	r24, 0x3d	; 61
    3a7e:	9e b7       	in	r25, 0x3e	; 62
    3a80:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3a84:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3a88:	84 1b       	sub	r24, r20
    3a8a:	95 0b       	sbc	r25, r21
    3a8c:	e8 17       	cp	r30, r24
    3a8e:	f9 07       	cpc	r31, r25
    3a90:	c8 f4       	brcc	.+50     	; 0x3ac4 <realloc+0x17e>
    3a92:	f0 93 b2 02 	sts	0x02B2, r31	; 0x8002b2 <__brkval+0x1>
    3a96:	e0 93 b1 02 	sts	0x02B1, r30	; 0x8002b1 <__brkval>
    3a9a:	f9 01       	movw	r30, r18
    3a9c:	71 83       	std	Z+1, r23	; 0x01
    3a9e:	60 83       	st	Z, r22
    3aa0:	0f c0       	rjmp	.+30     	; 0x3ac0 <realloc+0x17a>
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	0e 94 82 1b 	call	0x3704	; 0x3704 <malloc>
    3aa8:	7c 01       	movw	r14, r24
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	59 f0       	breq	.+22     	; 0x3ac4 <realloc+0x17e>
    3aae:	a8 01       	movw	r20, r16
    3ab0:	be 01       	movw	r22, r28
    3ab2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <memcpy>
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <free>
    3abc:	c7 01       	movw	r24, r14
    3abe:	04 c0       	rjmp	.+8      	; 0x3ac8 <realloc+0x182>
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	02 c0       	rjmp	.+4      	; 0x3ac8 <realloc+0x182>
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	ee e0       	ldi	r30, 0x0E	; 14
    3ace:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__epilogue_restores__+0x8>

00003ad2 <memcpy>:
    3ad2:	fb 01       	movw	r30, r22
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	02 c0       	rjmp	.+4      	; 0x3adc <memcpy+0xa>
    3ad8:	01 90       	ld	r0, Z+
    3ada:	0d 92       	st	X+, r0
    3adc:	41 50       	subi	r20, 0x01	; 1
    3ade:	50 40       	sbci	r21, 0x00	; 0
    3ae0:	d8 f7       	brcc	.-10     	; 0x3ad8 <memcpy+0x6>
    3ae2:	08 95       	ret

00003ae4 <strcpy>:
    3ae4:	fb 01       	movw	r30, r22
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	01 90       	ld	r0, Z+
    3aea:	0d 92       	st	X+, r0
    3aec:	00 20       	and	r0, r0
    3aee:	e1 f7       	brne	.-8      	; 0x3ae8 <strcpy+0x4>
    3af0:	08 95       	ret

00003af2 <eeprom_read_byte>:
    3af2:	f9 99       	sbic	0x1f, 1	; 31
    3af4:	fe cf       	rjmp	.-4      	; 0x3af2 <eeprom_read_byte>
    3af6:	92 bd       	out	0x22, r25	; 34
    3af8:	81 bd       	out	0x21, r24	; 33
    3afa:	f8 9a       	sbi	0x1f, 0	; 31
    3afc:	99 27       	eor	r25, r25
    3afe:	80 b5       	in	r24, 0x20	; 32
    3b00:	08 95       	ret

00003b02 <eeprom_write_byte>:
    3b02:	26 2f       	mov	r18, r22

00003b04 <eeprom_write_r18>:
    3b04:	f9 99       	sbic	0x1f, 1	; 31
    3b06:	fe cf       	rjmp	.-4      	; 0x3b04 <eeprom_write_r18>
    3b08:	1f ba       	out	0x1f, r1	; 31
    3b0a:	92 bd       	out	0x22, r25	; 34
    3b0c:	81 bd       	out	0x21, r24	; 33
    3b0e:	20 bd       	out	0x20, r18	; 32
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	fa 9a       	sbi	0x1f, 2	; 31
    3b16:	f9 9a       	sbi	0x1f, 1	; 31
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	01 96       	adiw	r24, 0x01	; 1
    3b1c:	08 95       	ret

00003b1e <__prologue_saves__>:
    3b1e:	2f 92       	push	r2
    3b20:	3f 92       	push	r3
    3b22:	4f 92       	push	r4
    3b24:	5f 92       	push	r5
    3b26:	6f 92       	push	r6
    3b28:	7f 92       	push	r7
    3b2a:	8f 92       	push	r8
    3b2c:	9f 92       	push	r9
    3b2e:	af 92       	push	r10
    3b30:	bf 92       	push	r11
    3b32:	cf 92       	push	r12
    3b34:	df 92       	push	r13
    3b36:	ef 92       	push	r14
    3b38:	ff 92       	push	r15
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	ca 1b       	sub	r28, r26
    3b48:	db 0b       	sbc	r29, r27
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	de bf       	out	0x3e, r29	; 62
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	cd bf       	out	0x3d, r28	; 61
    3b54:	09 94       	ijmp

00003b56 <__epilogue_restores__>:
    3b56:	2a 88       	ldd	r2, Y+18	; 0x12
    3b58:	39 88       	ldd	r3, Y+17	; 0x11
    3b5a:	48 88       	ldd	r4, Y+16	; 0x10
    3b5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b60:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b62:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b64:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b66:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b68:	b9 84       	ldd	r11, Y+9	; 0x09
    3b6a:	c8 84       	ldd	r12, Y+8	; 0x08
    3b6c:	df 80       	ldd	r13, Y+7	; 0x07
    3b6e:	ee 80       	ldd	r14, Y+6	; 0x06
    3b70:	fd 80       	ldd	r15, Y+5	; 0x05
    3b72:	0c 81       	ldd	r16, Y+4	; 0x04
    3b74:	1b 81       	ldd	r17, Y+3	; 0x03
    3b76:	aa 81       	ldd	r26, Y+2	; 0x02
    3b78:	b9 81       	ldd	r27, Y+1	; 0x01
    3b7a:	ce 0f       	add	r28, r30
    3b7c:	d1 1d       	adc	r29, r1
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	f8 94       	cli
    3b82:	de bf       	out	0x3e, r29	; 62
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	cd bf       	out	0x3d, r28	; 61
    3b88:	ed 01       	movw	r28, r26
    3b8a:	08 95       	ret

00003b8c <__do_global_dtors>:
    3b8c:	10 e0       	ldi	r17, 0x00	; 0
    3b8e:	c3 e6       	ldi	r28, 0x63	; 99
    3b90:	d0 e0       	ldi	r29, 0x00	; 0
    3b92:	04 c0       	rjmp	.+8      	; 0x3b9c <__do_global_dtors+0x10>
    3b94:	fe 01       	movw	r30, r28
    3b96:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <__tablejump2__>
    3b9a:	21 96       	adiw	r28, 0x01	; 1
    3b9c:	c4 36       	cpi	r28, 0x64	; 100
    3b9e:	d1 07       	cpc	r29, r17
    3ba0:	c9 f7       	brne	.-14     	; 0x3b94 <__do_global_dtors+0x8>
    3ba2:	f8 94       	cli

00003ba4 <__stop_program>:
    3ba4:	ff cf       	rjmp	.-2      	; 0x3ba4 <__stop_program>
