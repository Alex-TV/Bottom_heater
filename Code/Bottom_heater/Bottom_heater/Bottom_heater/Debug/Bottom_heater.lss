
Bottom_heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000023cc  00002460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fb  00800140  00800140  000024a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007b0  00000000  00000000  00002510  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c5bc  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f58  00000000  00000000  0000f27c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e23  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000156c  00000000  00000000  00015ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b9c  00000000  00000000  00017564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000060cf  00000000  00000000  0001b100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000708  00000000  00000000  000211cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_1>
       8:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__vector_2>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_13>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_24>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	10 0b       	sbc	r17, r16

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ec ec       	ldi	r30, 0xCC	; 204
      d8:	f3 e2       	ldi	r31, 0x23	; 35
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a0 34       	cpi	r26, 0x40	; 64
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	22 e0       	ldi	r18, 0x02	; 2
      e8:	a0 e4       	ldi	r26, 0x40	; 64
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	ab 33       	cpi	r26, 0x3B	; 59
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 b5 10 	call	0x216a	; 0x216a <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <main>
     110:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z14TimerInterruptv>:
}

//----------------------ОБРАБОТЧИКИ ПРЕРЫВАНИЙ--------------------------
void TimerInterrupt()
{       // прерывания таймера срабатывают каждые 40 мкс
	_tic++;                       // счетчик
     118:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     11c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
     126:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	for(int i=0; i< sizeof(_items); i++)
	{	 if (_tic <= _itemValues[i]) continue;	    // если настало время включать ток
     12a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <_itemValues>
     12e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <_itemValues+0x1>
     132:	60 81       	ld	r22, Z
     134:	71 81       	ldd	r23, Z+1	; 0x01
     136:	68 17       	cp	r22, r24
     138:	79 07       	cpc	r23, r25
     13a:	34 f4       	brge	.+12     	; 0x148 <_Z14TimerInterruptv+0x30>
		_items[i].UpdateValue(_itemValues[i]);
     13c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_items>
     140:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_items+0x1>
     144:	0e 94 19 01 	call	0x232	; 0x232 <_ZN10DimmerItem11UpdateValueEi>
//----------------------ОБРАБОТЧИКИ ПРЕРЫВАНИЙ--------------------------
void TimerInterrupt()
{       // прерывания таймера срабатывают каждые 40 мкс
	_tic++;                       // счетчик
	for(int i=0; i< sizeof(_items); i++)
	{	 if (_tic <= _itemValues[i]) continue;	    // если настало время включать ток
     148:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <_itemValues>
     14c:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <_itemValues+0x1>
     150:	62 81       	ldd	r22, Z+2	; 0x02
     152:	73 81       	ldd	r23, Z+3	; 0x03
     154:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     158:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     15c:	68 17       	cp	r22, r24
     15e:	79 07       	cpc	r23, r25
     160:	3c f4       	brge	.+14     	; 0x170 <_Z14TimerInterruptv+0x58>
		_items[i].UpdateValue(_itemValues[i]);
     162:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_items>
     166:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_items+0x1>
     16a:	02 96       	adiw	r24, 0x02	; 2
     16c:	0c 94 19 01 	jmp	0x232	; 0x232 <_ZN10DimmerItem11UpdateValueEi>
     170:	08 95       	ret

00000172 <_Z10DetectDownv>:
	attachInterrupt(0, DetectDown, RISING);  // перенастроить прерывание
}

void  DetectDown() // обработка внешнего прерывания на пересекание нуля сверху
{
	_tic = 0;                                 // обнулить счетчик
     172:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
     176:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
	StopTimer1(); 							 // остановить таймер
     17a:	0e 94 9c 06 	call	0xd38	; 0xd38 <_Z10StopTimer1v>
	for(int i=0; i< sizeof(_items); i++)
	{
		_items[i].UpdateValue(0);  // вырубить ток
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_items>
     186:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_items+0x1>
     18a:	0e 94 19 01 	call	0x232	; 0x232 <_ZN10DimmerItem11UpdateValueEi>
     18e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_items>
     192:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_items+0x1>
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	02 96       	adiw	r24, 0x02	; 2
     19c:	0e 94 19 01 	call	0x232	; 0x232 <_ZN10DimmerItem11UpdateValueEi>
	}
	//digitalWrite(dimPin, 0);
	attachInterrupt(0, DetectUp, FALLING);   // перенастроить прерывание
     1a0:	42 e0       	ldi	r20, 0x02	; 2
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	67 ed       	ldi	r22, 0xD7	; 215
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <attachInterrupt>

000001ae <_Z8DetectUpv>:
	//digitalWrite(dimPin, 1);   // врубить ток
}

void  DetectUp()	 // обработка внешнего прерывания на пересекание нуля снизу
{
	_tic = 0;                                 // обнулить счетчик
     1ae:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
     1b2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
	ResumeTimer1();                          // перезапустить таймер
     1b6:	0e 94 a2 06 	call	0xd44	; 0xd44 <_Z12ResumeTimer1v>
	attachInterrupt(0, DetectDown, RISING);  // перенастроить прерывание
     1ba:	43 e0       	ldi	r20, 0x03	; 3
     1bc:	50 e0       	ldi	r21, 0x00	; 0
     1be:	69 eb       	ldi	r22, 0xB9	; 185
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <attachInterrupt>

000001c8 <_ZN6DimmerC1EiP10DimmerItemPi>:
DimmerItem* _items;
int* _itemValues;
int _tic;

// default constructor
Dimmer::Dimmer(int zeroPin, DimmerItem* items, int* itemValues)
     1c8:	86 2f       	mov	r24, r22
{
	_items = items;
     1ca:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <_items+0x1>
     1ce:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <_items>
	_itemValues = itemValues;
     1d2:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <_itemValues+0x1>
     1d6:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <_itemValues>
	_zeroPin = zeroPin;
     1da:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <_zeroPin>
     1de:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <_zeroPin+0x1>
	pinMode(zeroPin, INPUT);				// настраиваем порт на вход для отслеживания прохождения сигнала через ноль
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <pinMode>
	attachInterrupt(0, DetectUp, FALLING);  // настроить срабатывание прерывания interrupt0 на pin 2 на низкий уровень
     1e8:	42 e0       	ldi	r20, 0x02	; 2
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	67 ed       	ldi	r22, 0xD7	; 215
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <attachInterrupt>
	StartTimer1(TimerInterrupt, 40);        // время для одного разряда ШИМ
     1f6:	48 e2       	ldi	r20, 0x28	; 40
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	8c e8       	ldi	r24, 0x8C	; 140
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 f6 05 	call	0xbec	; 0xbec <_Z11StartTimer1PFvvEm>
	StopTimer1();                           // остановить таймер
     206:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <_Z10StopTimer1v>

0000020a <_ZN6Dimmer15UpdateItemValueEPi>:
} //Dimmer

void Dimmer::UpdateItemValue(int* itemValues)
{
	_itemValues = itemValues;
     20a:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <_itemValues+0x1>
     20e:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <_itemValues>
     212:	08 95       	ret

00000214 <_ZN10DimmerItemC1Ei>:
*/
#include <Arduino.h>
#include "DimmerItem.h"

// default constructor
DimmerItem::DimmerItem(int dimPin)
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	ec 01       	movw	r28, r24
     21a:	86 2f       	mov	r24, r22
{
	_dimPin = dimPin;
     21c:	68 83       	st	Y, r22
     21e:	79 83       	std	Y+1, r23	; 0x01
	pinMode(_dimPin, OUTPUT);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <pinMode>
	digitalWrite(_dimPin, 0);
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	88 81       	ld	r24, Y
} //DimmerItem
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
// default constructor
DimmerItem::DimmerItem(int dimPin)
{
	_dimPin = dimPin;
	pinMode(_dimPin, OUTPUT);
	digitalWrite(_dimPin, 0);
     22e:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <digitalWrite>

00000232 <_ZN10DimmerItem11UpdateValueEi>:
} //DimmerItem

void DimmerItem::UpdateValue(int dimVal)
{
	digitalWrite(_dimPin, 255-dimVal);
     232:	60 95       	com	r22
     234:	fc 01       	movw	r30, r24
     236:	80 81       	ld	r24, Z
     238:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <digitalWrite>

0000023c <_ZN10DimmerItemD1Ev>:
}
// default destructor
DimmerItem::~DimmerItem()
     23c:	08 95       	ret

0000023e <_ZN11Display16x2C1Eiii>:
}

void Display16x2::PrintEdit(int line)
{
	_lcd->setCursor(0,line);
	_lcd->print(">");
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	7c 01       	movw	r14, r24
     250:	16 2f       	mov	r17, r22
     252:	d4 2e       	mov	r13, r20
     254:	c2 2e       	mov	r12, r18
     256:	8c e0       	ldi	r24, 0x0C	; 12
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_Znwj>
     25e:	ec 01       	movw	r28, r24
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	2c 2d       	mov	r18, r12
     264:	4d 2d       	mov	r20, r13
     266:	61 2f       	mov	r22, r17
     268:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN17LiquidCrystal_I2CC1Ehhhh>
     26c:	f7 01       	movw	r30, r14
     26e:	d1 83       	std	Z+1, r29	; 0x01
     270:	c0 83       	st	Z, r28
     272:	ce 01       	movw	r24, r28
     274:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN17LiquidCrystal_I2C5beginEv>
     278:	f7 01       	movw	r30, r14
     27a:	80 81       	ld	r24, Z
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	df 90       	pop	r13
     28c:	cf 90       	pop	r12
     28e:	0c 94 42 07 	jmp	0xe84	; 0xe84 <_ZN17LiquidCrystal_I2C5clearEv>

00000292 <_ZN11Display16x215PrintLineValuesEiiii>:
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	ec 01       	movw	r28, r24
     2a8:	7b 01       	movw	r14, r22
     2aa:	5a 01       	movw	r10, r20
     2ac:	69 01       	movw	r12, r18
     2ae:	46 2f       	mov	r20, r22
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	88 81       	ld	r24, Y
     2b4:	99 81       	ldd	r25, Y+1	; 0x01
     2b6:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     2ba:	e1 14       	cp	r14, r1
     2bc:	f1 04       	cpc	r15, r1
     2be:	19 f0       	breq	.+6      	; 0x2c6 <_ZN11Display16x215PrintLineValuesEiiii+0x34>
     2c0:	65 e1       	ldi	r22, 0x15	; 21
     2c2:	71 e0       	ldi	r23, 0x01	; 1
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <_ZN11Display16x215PrintLineValuesEiiii+0x38>
     2c6:	62 e1       	ldi	r22, 0x12	; 18
     2c8:	71 e0       	ldi	r23, 0x01	; 1
     2ca:	88 81       	ld	r24, Y
     2cc:	99 81       	ldd	r25, Y+1	; 0x01
     2ce:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN5Print5printEPKc>
     2d2:	4e 2d       	mov	r20, r14
     2d4:	63 e0       	ldi	r22, 0x03	; 3
     2d6:	88 81       	ld	r24, Y
     2d8:	99 81       	ldd	r25, Y+1	; 0x01
     2da:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     2de:	4a e0       	ldi	r20, 0x0A	; 10
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	b5 01       	movw	r22, r10
     2e4:	88 81       	ld	r24, Y
     2e6:	99 81       	ldd	r25, Y+1	; 0x01
     2e8:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN5Print5printEii>
     2ec:	4e 2d       	mov	r20, r14
     2ee:	66 e0       	ldi	r22, 0x06	; 6
     2f0:	88 81       	ld	r24, Y
     2f2:	99 81       	ldd	r25, Y+1	; 0x01
     2f4:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     2f8:	68 e1       	ldi	r22, 0x18	; 24
     2fa:	71 e0       	ldi	r23, 0x01	; 1
     2fc:	88 81       	ld	r24, Y
     2fe:	99 81       	ldd	r25, Y+1	; 0x01
     300:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN5Print5printEPKc>
     304:	4e 2d       	mov	r20, r14
     306:	68 e0       	ldi	r22, 0x08	; 8
     308:	88 81       	ld	r24, Y
     30a:	99 81       	ldd	r25, Y+1	; 0x01
     30c:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     310:	4a e0       	ldi	r20, 0x0A	; 10
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	b6 01       	movw	r22, r12
     316:	88 81       	ld	r24, Y
     318:	99 81       	ldd	r25, Y+1	; 0x01
     31a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN5Print5printEii>
     31e:	4e 2d       	mov	r20, r14
     320:	6b e0       	ldi	r22, 0x0B	; 11
     322:	88 81       	ld	r24, Y
     324:	99 81       	ldd	r25, Y+1	; 0x01
     326:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     32a:	6b e1       	ldi	r22, 0x1B	; 27
     32c:	71 e0       	ldi	r23, 0x01	; 1
     32e:	88 81       	ld	r24, Y
     330:	99 81       	ldd	r25, Y+1	; 0x01
     332:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN5Print5printEPKc>
     336:	4e 2d       	mov	r20, r14
     338:	6d e0       	ldi	r22, 0x0D	; 13
     33a:	88 81       	ld	r24, Y
     33c:	99 81       	ldd	r25, Y+1	; 0x01
     33e:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     342:	4a e0       	ldi	r20, 0x0A	; 10
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	b8 01       	movw	r22, r16
     348:	88 81       	ld	r24, Y
     34a:	99 81       	ldd	r25, Y+1	; 0x01
     34c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN5Print5printEii>
     350:	4e 2d       	mov	r20, r14
     352:	6f e0       	ldi	r22, 0x0F	; 15
     354:	88 81       	ld	r24, Y
     356:	99 81       	ldd	r25, Y+1	; 0x01
     358:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     35c:	6e e1       	ldi	r22, 0x1E	; 30
     35e:	71 e0       	ldi	r23, 0x01	; 1
     360:	88 81       	ld	r24, Y
     362:	99 81       	ldd	r25, Y+1	; 0x01
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	bf 90       	pop	r11
     376:	af 90       	pop	r10
     378:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <_ZN5Print5printEPKc>

0000037c <_ZN11Display16x29ClearEditEi>:
}

void Display16x2::ClearEdit(int line)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	ec 01       	movw	r28, r24
	_lcd->setCursor(0,0);
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	88 81       	ld	r24, Y
     388:	99 81       	ldd	r25, Y+1	; 0x01
     38a:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(" ");
     38e:	6c e1       	ldi	r22, 0x1C	; 28
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	88 81       	ld	r24, Y
     394:	99 81       	ldd	r25, Y+1	; 0x01
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
}

void Display16x2::ClearEdit(int line)
{
	_lcd->setCursor(0,0);
	_lcd->print(" ");
     39a:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <_ZN5Print5printEPKc>

0000039e <setup>:
AutoPID* _pidUp;
AutoPID* _pidDown;

double _tempUp,_tempDown, _setTempUp, _setTempDown, _outputUpVal, _outputDownVal;

void setup() {
     39e:	2f 92       	push	r2
     3a0:	3f 92       	push	r3
     3a2:	4f 92       	push	r4
     3a4:	5f 92       	push	r5
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	28 97       	sbiw	r28, 0x08	; 8
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёРјРёСЂР°
	DimmerItem dimmerItems[2]{DimmerItem(dimUpPin),DimmerItem(dimDownPin)};
     3d2:	63 e0       	ldi	r22, 0x03	; 3
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	ce 01       	movw	r24, r28
     3d8:	05 96       	adiw	r24, 0x05	; 5
     3da:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN10DimmerItemC1Ei>
     3de:	64 e0       	ldi	r22, 0x04	; 4
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	ce 01       	movw	r24, r28
     3e4:	07 96       	adiw	r24, 0x07	; 7
     3e6:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN10DimmerItemC1Ei>
	int itemValues[2]{0,0};
     3ea:	1a 82       	std	Y+2, r1	; 0x02
     3ec:	19 82       	std	Y+1, r1	; 0x01
     3ee:	1c 82       	std	Y+4, r1	; 0x04
     3f0:	1b 82       	std	Y+3, r1	; 0x03
	_dimmer = new Dimmer(zeroPin,dimmerItems,itemValues);
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_Znwj>
     3fa:	4c 01       	movw	r8, r24
     3fc:	9e 01       	movw	r18, r28
     3fe:	2f 5f       	subi	r18, 0xFF	; 255
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	ae 01       	movw	r20, r28
     404:	4b 5f       	subi	r20, 0xFB	; 251
     406:	5f 4f       	sbci	r21, 0xFF	; 255
     408:	62 e0       	ldi	r22, 0x02	; 2
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN6DimmerC1EiP10DimmerItemPi>
     410:	90 92 69 01 	sts	0x0169, r9	; 0x800169 <_dimmer+0x1>
     414:	80 92 68 01 	sts	0x0168, r8	; 0x800168 <_dimmer>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ С‚РµСЂРјРѕРјРµС‚СЂР°
	_thermometer = new Thermometer(therPinDO,therPinCS,therPinCLK);
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_Znwj>
     420:	4c 01       	movw	r8, r24
     422:	27 e0       	ldi	r18, 0x07	; 7
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	46 e0       	ldi	r20, 0x06	; 6
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	65 e0       	ldi	r22, 0x05	; 5
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN11ThermometerC1Eiii>
     432:	90 92 67 01 	sts	0x0167, r9	; 0x800167 <_thermometer+0x1>
     436:	80 92 66 01 	sts	0x0166, r8	; 0x800166 <_thermometer>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёСЃРїР»РµСЏ
	_display = new Display16x2(0x27, 16, 2);
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_Znwj>
     442:	4c 01       	movw	r8, r24
     444:	22 e0       	ldi	r18, 0x02	; 2
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e1       	ldi	r20, 0x10	; 16
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	67 e2       	ldi	r22, 0x27	; 39
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	0e 94 1f 01 	call	0x23e	; 0x23e <_ZN11Display16x2C1Eiii>
     454:	90 92 65 01 	sts	0x0165, r9	; 0x800165 <_display+0x1>
     458:	80 92 64 01 	sts	0x0164, r8	; 0x800164 <_display>
	
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ pid
	_pidUp = new AutoPID(&_tempUp, &_setTempUp, &_outputUpVal, OUTPUT_MIN, OUTPUT_MAX, KP, KI, KD);
     45c:	83 e3       	ldi	r24, 0x33	; 51
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_Znwj>
     464:	4c 01       	movw	r8, r24
     466:	1f 92       	push	r1
     468:	1f 92       	push	r1
     46a:	1f 92       	push	r1
     46c:	1f 92       	push	r1
     46e:	89 e3       	ldi	r24, 0x39	; 57
     470:	48 2e       	mov	r4, r24
     472:	4f 92       	push	r4
     474:	9d e9       	ldi	r25, 0x9D	; 157
     476:	59 2e       	mov	r5, r25
     478:	5f 92       	push	r5
     47a:	29 e4       	ldi	r18, 0x49	; 73
     47c:	62 2e       	mov	r6, r18
     47e:	6f 92       	push	r6
     480:	32 e5       	ldi	r19, 0x52	; 82
     482:	73 2e       	mov	r7, r19
     484:	7f 92       	push	r7
     486:	4d e3       	ldi	r20, 0x3D	; 61
     488:	34 2e       	mov	r3, r20
     48a:	3f 92       	push	r3
     48c:	55 ef       	ldi	r21, 0xF5	; 245
     48e:	25 2e       	mov	r2, r21
     490:	2f 92       	push	r2
     492:	82 ec       	ldi	r24, 0xC2	; 194
     494:	8f 93       	push	r24
     496:	9f e8       	ldi	r25, 0x8F	; 143
     498:	9f 93       	push	r25
     49a:	a1 2c       	mov	r10, r1
     49c:	b1 2c       	mov	r11, r1
     49e:	6f e7       	ldi	r22, 0x7F	; 127
     4a0:	c6 2e       	mov	r12, r22
     4a2:	63 e4       	ldi	r22, 0x43	; 67
     4a4:	d6 2e       	mov	r13, r22
     4a6:	e1 2c       	mov	r14, r1
     4a8:	f1 2c       	mov	r15, r1
     4aa:	87 01       	movw	r16, r14
     4ac:	2c e4       	ldi	r18, 0x4C	; 76
     4ae:	31 e0       	ldi	r19, 0x01	; 1
     4b0:	44 e5       	ldi	r20, 0x54	; 84
     4b2:	51 e0       	ldi	r21, 0x01	; 1
     4b4:	6c e5       	ldi	r22, 0x5C	; 92
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	c4 01       	movw	r24, r8
     4ba:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN7AutoPIDC1EPdS0_S0_ddddd>
     4be:	90 92 63 01 	sts	0x0163, r9	; 0x800163 <_pidUp+0x1>
     4c2:	80 92 62 01 	sts	0x0162, r8	; 0x800162 <_pidUp>
	// РµСЃР»Рё С‚РµРјРїРµСЂР°С‚СѓСЂР° РІС‹С€Рµ 4 РіСЂР°РґСѓСЃРѕРІ РЅРёР¶Рµ РёР»Рё РІС‹С€Рµ Р·Р°РґР°РЅРЅРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, OUTPUT Р±СѓРґРµС‚ СѓСЃС‚Р°РЅРѕРІР»РµРЅ РЅР° РјРёРЅ РёР»Рё РјР°РєСЃ СЃРѕРѕС‚РІРµС‚СЃС‚РІРµРЅРЅРѕ
	_pidUp->setBangBang(4);
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	60 e8       	ldi	r22, 0x80	; 128
     4cc:	70 e4       	ldi	r23, 0x40	; 64
     4ce:	c4 01       	movw	r24, r8
     4d0:	0e 94 04 04 	call	0x808	; 0x808 <_ZN7AutoPID11setBangBangEd>
	//set PID update interval to 4000ms
	_pidUp->setTimeStep(4000);
     4d4:	40 ea       	ldi	r20, 0xA0	; 160
     4d6:	5f e0       	ldi	r21, 0x0F	; 15
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_pidUp>
     4e0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_pidUp+0x1>
     4e4:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN7AutoPID11setTimeStepEm>
	
	_pidDown = new AutoPID(&_tempDown, &_setTempDown, &_outputDownVal, OUTPUT_MIN, OUTPUT_MAX, KP, KI, KD);
     4e8:	83 e3       	ldi	r24, 0x33	; 51
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_Znwj>
     4f0:	4c 01       	movw	r8, r24
     4f2:	1f 92       	push	r1
     4f4:	1f 92       	push	r1
     4f6:	1f 92       	push	r1
     4f8:	1f 92       	push	r1
     4fa:	4f 92       	push	r4
     4fc:	5f 92       	push	r5
     4fe:	6f 92       	push	r6
     500:	7f 92       	push	r7
     502:	3f 92       	push	r3
     504:	2f 92       	push	r2
     506:	82 ec       	ldi	r24, 0xC2	; 194
     508:	8f 93       	push	r24
     50a:	9f e8       	ldi	r25, 0x8F	; 143
     50c:	9f 93       	push	r25
     50e:	28 e4       	ldi	r18, 0x48	; 72
     510:	31 e0       	ldi	r19, 0x01	; 1
     512:	40 e5       	ldi	r20, 0x50	; 80
     514:	51 e0       	ldi	r21, 0x01	; 1
     516:	68 e5       	ldi	r22, 0x58	; 88
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	c4 01       	movw	r24, r8
     51c:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN7AutoPIDC1EPdS0_S0_ddddd>
     520:	90 92 61 01 	sts	0x0161, r9	; 0x800161 <_pidDown+0x1>
     524:	80 92 60 01 	sts	0x0160, r8	; 0x800160 <_pidDown>
	// РµСЃР»Рё С‚РµРјРїРµСЂР°С‚СѓСЂР° РІС‹С€Рµ 4 РіСЂР°РґСѓСЃРѕРІ РЅРёР¶Рµ РёР»Рё РІС‹С€Рµ Р·Р°РґР°РЅРЅРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, OUTPUT Р±СѓРґРµС‚ СѓСЃС‚Р°РЅРѕРІР»РµРЅ РЅР° РјРёРЅ РёР»Рё РјР°РєСЃ СЃРѕРѕС‚РІРµС‚СЃС‚РІРµРЅРЅРѕ
	_pidDown->setBangBang(4);
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	60 e8       	ldi	r22, 0x80	; 128
     52e:	70 e4       	ldi	r23, 0x40	; 64
     530:	c4 01       	movw	r24, r8
     532:	0e 94 04 04 	call	0x808	; 0x808 <_ZN7AutoPID11setBangBangEd>
	//set PID update interval to 4000ms
	_pidDown->setTimeStep(4000);
     536:	40 ea       	ldi	r20, 0xA0	; 160
     538:	5f e0       	ldi	r21, 0x0F	; 15
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_pidDown>
     542:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_pidDown+0x1>
     546:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN7AutoPID11setTimeStepEm>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <eeprom_read_byte>
	
	//СѓС‚СЃР°РЅРѕРІР»РµРЅР°СЏ С‚РµРјРїРµСЂР°С‚СѓСЂР°	(РґРѕР»Р¶РЅРѕ СѓСЃС‚Р°РЅР°РІР»РёРІР°С‚СЃСЏ РІ РЅР°СЃС‚СЂРѕР№РєР°С…)
	_setTempUp = EEPROM.read(memoryUpTempAdress);
     552:	68 2f       	mov	r22, r24
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__floatunsisf>
     55e:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <_setTempUp>
     562:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <_setTempUp+0x1>
     566:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_setTempUp+0x2>
     56a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <_setTempUp+0x3>
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <eeprom_read_byte>
	_setTempDown = EEPROM.read(memoryDownTempAdress);
     576:	68 2f       	mov	r22, r24
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__floatunsisf>
     582:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <_setTempDown>
     586:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <_setTempDown+0x1>
     58a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_setTempDown+0x2>
     58e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_setTempDown+0x3>

double _tempUp,_tempDown, _setTempUp, _setTempDown, _outputUpVal, _outputDownVal;

void setup() {
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёРјРёСЂР°
	DimmerItem dimmerItems[2]{DimmerItem(dimUpPin),DimmerItem(dimDownPin)};
     592:	ce 01       	movw	r24, r28
     594:	07 96       	adiw	r24, 0x07	; 7
     596:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN10DimmerItemD1Ev>
     59a:	ce 01       	movw	r24, r28
     59c:	05 96       	adiw	r24, 0x05	; 5
     59e:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN10DimmerItemD1Ev>
	
	//СѓС‚СЃР°РЅРѕРІР»РµРЅР°СЏ С‚РµРјРїРµСЂР°С‚СѓСЂР°	(РґРѕР»Р¶РЅРѕ СѓСЃС‚Р°РЅР°РІР»РёРІР°С‚СЃСЏ РІ РЅР°СЃС‚СЂРѕР№РєР°С…)
	_setTempUp = EEPROM.read(memoryUpTempAdress);
	_setTempDown = EEPROM.read(memoryDownTempAdress);

}
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	28 96       	adiw	r28, 0x08	; 8
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	bf 90       	pop	r11
     5ca:	af 90       	pop	r10
     5cc:	9f 90       	pop	r9
     5ce:	8f 90       	pop	r8
     5d0:	7f 90       	pop	r7
     5d2:	6f 90       	pop	r6
     5d4:	5f 90       	pop	r5
     5d6:	4f 90       	pop	r4
     5d8:	3f 90       	pop	r3
     5da:	2f 90       	pop	r2
     5dc:	08 95       	ret

000005de <loop>:

void loop() {
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <loop+0x1a>
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <loop+0x1c>
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
	_tempDown = _thermometer->Read();
     5fe:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_thermometer>
     602:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <_thermometer+0x1>
     606:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN11Thermometer4ReadEv>
     60a:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <_tempDown>
     60e:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <_tempDown+0x1>
     612:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_tempDown+0x2>
     616:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_tempDown+0x3>
	_tempUp = 0;
     61a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <_tempUp>
     61e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <_tempUp+0x1>
     622:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <_tempUp+0x2>
     626:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <_tempUp+0x3>
	
	_pidUp->run();
     62a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_pidUp>
     62e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_pidUp+0x1>
     632:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <_ZN7AutoPID3runEv>
	_pidDown->run();
     636:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_pidDown>
     63a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_pidDown+0x1>
     63e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <_ZN7AutoPID3runEv>
	
	int pidUpVal = _pidUp->atSetPoint(1);
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	60 e8       	ldi	r22, 0x80	; 128
     648:	7f e3       	ldi	r23, 0x3F	; 63
     64a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_pidUp>
     64e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_pidUp+0x1>
     652:	0e 94 14 04 	call	0x828	; 0x828 <_ZN7AutoPID10atSetPointEd>
     656:	08 2f       	mov	r16, r24
     658:	10 e0       	ldi	r17, 0x00	; 0
	int pidDownVal = _pidDown->atSetPoint(1);
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	60 e8       	ldi	r22, 0x80	; 128
     660:	7f e3       	ldi	r23, 0x3F	; 63
     662:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_pidDown>
     666:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_pidDown+0x1>
     66a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN7AutoPID10atSetPointEd>
     66e:	e8 2e       	mov	r14, r24
     670:	f1 2c       	mov	r15, r1
	int itemValues[2]{pidUpVal,pidDownVal};
     672:	1a 83       	std	Y+2, r17	; 0x02
     674:	09 83       	std	Y+1, r16	; 0x01
     676:	fc 82       	std	Y+4, r15	; 0x04
     678:	eb 82       	std	Y+3, r14	; 0x03
	_dimmer->UpdateItemValue(itemValues);
     67a:	be 01       	movw	r22, r28
     67c:	6f 5f       	subi	r22, 0xFF	; 255
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_dimmer>
     684:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <_dimmer+0x1>
     688:	0e 94 05 01 	call	0x20a	; 0x20a <_ZN6Dimmer15UpdateItemValueEPi>
	
	_display->ClearEdit(0);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_display>
     694:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_display+0x1>
     698:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN11Display16x29ClearEditEi>
	int powerUp = (int)((float)pidDownVal/(float)OUTPUT_MAX*(float)100);
	_display->PrintLineValues(0,_setTempUp,_tempUp,pidUpVal);
     69c:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <_tempUp>
     6a0:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <_tempUp+0x1>
     6a4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <_tempUp+0x2>
     6a8:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <_tempUp+0x3>
     6ac:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixsfsi>
     6b0:	4b 01       	movw	r8, r22
     6b2:	5c 01       	movw	r10, r24
     6b4:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <_setTempUp>
     6b8:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <_setTempUp+0x1>
     6bc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_setTempUp+0x2>
     6c0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_setTempUp+0x3>
     6c4:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixsfsi>
     6c8:	94 01       	movw	r18, r8
     6ca:	ab 01       	movw	r20, r22
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_display>
     6d4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_display+0x1>
     6d8:	0e 94 49 01 	call	0x292	; 0x292 <_ZN11Display16x215PrintLineValuesEiiii>
	_display->ClearEdit(1);
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_display>
     6e4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_display+0x1>
     6e8:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN11Display16x29ClearEditEi>
	int powerDown = (int)((float)pidDownVal/(float)OUTPUT_MAX*(float)100);
	_display->PrintLineValues(1,_setTempDown,_tempDown,powerDown);
     6ec:	b7 01       	movw	r22, r14
     6ee:	ff 0c       	add	r15, r15
     6f0:	88 0b       	sbc	r24, r24
     6f2:	99 0b       	sbc	r25, r25
     6f4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__floatsisf>
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	4f e7       	ldi	r20, 0x7F	; 127
     6fe:	53 e4       	ldi	r21, 0x43	; 67
     700:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__divsf3>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	48 ec       	ldi	r20, 0xC8	; 200
     70a:	52 e4       	ldi	r21, 0x42	; 66
     70c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     710:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixsfsi>
     714:	4b 01       	movw	r8, r22
     716:	5c 01       	movw	r10, r24
     718:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <_tempDown>
     71c:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <_tempDown+0x1>
     720:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_tempDown+0x2>
     724:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_tempDown+0x3>
     728:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixsfsi>
     72c:	6b 01       	movw	r12, r22
     72e:	7c 01       	movw	r14, r24
     730:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <_setTempDown>
     734:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <_setTempDown+0x1>
     738:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_setTempDown+0x2>
     73c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_setTempDown+0x3>
     740:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixsfsi>
     744:	84 01       	movw	r16, r8
     746:	96 01       	movw	r18, r12
     748:	ab 01       	movw	r20, r22
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_display>
     752:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_display+0x1>
     756:	0e 94 49 01 	call	0x292	; 0x292 <_ZN11Display16x215PrintLineValuesEiiii>
}
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	08 95       	ret

0000077c <_ZN7AutoPIDC1EPdS0_S0_ddddd>:
}//void AutoPID::setBangBang

void AutoPID::setOutputRange(double outputMin, double outputMax) {
  _outputMin = outputMin;
  _outputMax = outputMax;
}//void AutoPID::setOutputRange
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	fc 01       	movw	r30, r24
     796:	75 8f       	std	Z+29, r23	; 0x1d
     798:	64 8f       	std	Z+28, r22	; 0x1c
     79a:	57 8f       	std	Z+31, r21	; 0x1f
     79c:	46 8f       	std	Z+30, r20	; 0x1e
     79e:	31 a3       	std	Z+33, r19	; 0x21
     7a0:	20 a3       	std	Z+32, r18	; 0x20
     7a2:	e2 a2       	std	Z+34, r14	; 0x22
     7a4:	f3 a2       	std	Z+35, r15	; 0x23
     7a6:	04 a3       	std	Z+36, r16	; 0x24
     7a8:	15 a3       	std	Z+37, r17	; 0x25
     7aa:	a6 a2       	std	Z+38, r10	; 0x26
     7ac:	b7 a2       	std	Z+39, r11	; 0x27
     7ae:	c0 a6       	std	Z+40, r12	; 0x28
     7b0:	d1 a6       	std	Z+41, r13	; 0x29
     7b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     7b6:	af 85       	ldd	r26, Y+15	; 0x0f
     7b8:	b8 89       	ldd	r27, Y+16	; 0x10
     7ba:	80 83       	st	Z, r24
     7bc:	91 83       	std	Z+1, r25	; 0x01
     7be:	a2 83       	std	Z+2, r26	; 0x02
     7c0:	b3 83       	std	Z+3, r27	; 0x03
     7c2:	89 89       	ldd	r24, Y+17	; 0x11
     7c4:	9a 89       	ldd	r25, Y+18	; 0x12
     7c6:	ab 89       	ldd	r26, Y+19	; 0x13
     7c8:	bc 89       	ldd	r27, Y+20	; 0x14
     7ca:	84 83       	std	Z+4, r24	; 0x04
     7cc:	95 83       	std	Z+5, r25	; 0x05
     7ce:	a6 83       	std	Z+6, r26	; 0x06
     7d0:	b7 83       	std	Z+7, r27	; 0x07
     7d2:	8d 89       	ldd	r24, Y+21	; 0x15
     7d4:	9e 89       	ldd	r25, Y+22	; 0x16
     7d6:	af 89       	ldd	r26, Y+23	; 0x17
     7d8:	b8 8d       	ldd	r27, Y+24	; 0x18
     7da:	80 87       	std	Z+8, r24	; 0x08
     7dc:	91 87       	std	Z+9, r25	; 0x09
     7de:	a2 87       	std	Z+10, r26	; 0x0a
     7e0:	b3 87       	std	Z+11, r27	; 0x0b
     7e2:	88 ee       	ldi	r24, 0xE8	; 232
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	82 a7       	std	Z+42, r24	; 0x2a
     7ec:	93 a7       	std	Z+43, r25	; 0x2b
     7ee:	a4 a7       	std	Z+44, r26	; 0x2c
     7f0:	b5 a7       	std	Z+45, r27	; 0x2d
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	af 90       	pop	r10
     806:	08 95       	ret

00000808 <_ZN7AutoPID11setBangBangEd>:
     808:	fc 01       	movw	r30, r24
     80a:	44 8b       	std	Z+20, r20	; 0x14
     80c:	55 8b       	std	Z+21, r21	; 0x15
     80e:	66 8b       	std	Z+22, r22	; 0x16
     810:	77 8b       	std	Z+23, r23	; 0x17
     812:	40 8f       	std	Z+24, r20	; 0x18
     814:	51 8f       	std	Z+25, r21	; 0x19
     816:	62 8f       	std	Z+26, r22	; 0x1a
     818:	73 8f       	std	Z+27, r23	; 0x1b
     81a:	08 95       	ret

0000081c <_ZN7AutoPID11setTimeStepEm>:

void AutoPID::setTimeStep(unsigned long timeStep){
  _timeStep = timeStep;
     81c:	fc 01       	movw	r30, r24
     81e:	42 a7       	std	Z+42, r20	; 0x2a
     820:	53 a7       	std	Z+43, r21	; 0x2b
     822:	64 a7       	std	Z+44, r22	; 0x2c
     824:	75 a7       	std	Z+45, r23	; 0x2d
     826:	08 95       	ret

00000828 <_ZN7AutoPID10atSetPointEd>:
}


bool AutoPID::atSetPoint(double threshold) {
     828:	8f 92       	push	r8
     82a:	9f 92       	push	r9
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	4a 01       	movw	r8, r20
     83e:	5b 01       	movw	r10, r22
  return abs(*_setpoint - *_input) <= threshold;
     840:	dc 01       	movw	r26, r24
     842:	5e 96       	adiw	r26, 0x1e	; 30
     844:	ed 91       	ld	r30, X+
     846:	fc 91       	ld	r31, X
     848:	5f 97       	sbiw	r26, 0x1f	; 31
     84a:	5c 96       	adiw	r26, 0x1c	; 28
     84c:	0d 90       	ld	r0, X+
     84e:	bc 91       	ld	r27, X
     850:	a0 2d       	mov	r26, r0
     852:	2d 91       	ld	r18, X+
     854:	3d 91       	ld	r19, X+
     856:	4d 91       	ld	r20, X+
     858:	5c 91       	ld	r21, X
     85a:	60 81       	ld	r22, Z
     85c:	71 81       	ldd	r23, Z+1	; 0x01
     85e:	82 81       	ldd	r24, Z+2	; 0x02
     860:	93 81       	ldd	r25, Z+3	; 0x03
     862:	0e 94 39 0b 	call	0x1672	; 0x1672 <__subsf3>
     866:	6b 01       	movw	r12, r22
     868:	7c 01       	movw	r14, r24
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	a9 01       	movw	r20, r18
     870:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__gesf2>
     874:	18 16       	cp	r1, r24
     876:	24 f0       	brlt	.+8      	; 0x880 <_ZN7AutoPID10atSetPointEd+0x58>
     878:	f7 fa       	bst	r15, 7
     87a:	f0 94       	com	r15
     87c:	f7 f8       	bld	r15, 7
     87e:	f0 94       	com	r15
     880:	c1 e0       	ldi	r28, 0x01	; 1
     882:	a5 01       	movw	r20, r10
     884:	94 01       	movw	r18, r8
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	0e 94 a6 0b 	call	0x174c	; 0x174c <__cmpsf2>
     88e:	18 16       	cp	r1, r24
     890:	0c f4       	brge	.+2      	; 0x894 <_ZN7AutoPID10atSetPointEd+0x6c>
     892:	c0 e0       	ldi	r28, 0x00	; 0
}//bool AutoPID::atSetPoint
     894:	8c 2f       	mov	r24, r28
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	bf 90       	pop	r11
     8a4:	af 90       	pop	r10
     8a6:	9f 90       	pop	r9
     8a8:	8f 90       	pop	r8
     8aa:	08 95       	ret

000008ac <_ZN7AutoPID5resetEv>:

void AutoPID::stop() {
  _stopped = true;
  reset();
}
void AutoPID::reset() {
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
  _lastStep = millis();
     8b2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <millis>
     8b6:	6e a7       	std	Y+46, r22	; 0x2e
     8b8:	7f a7       	std	Y+47, r23	; 0x2f
     8ba:	88 ab       	std	Y+48, r24	; 0x30
     8bc:	99 ab       	std	Y+49, r25	; 0x31
  _integral = 0;
     8be:	1c 86       	std	Y+12, r1	; 0x0c
     8c0:	1d 86       	std	Y+13, r1	; 0x0d
     8c2:	1e 86       	std	Y+14, r1	; 0x0e
     8c4:	1f 86       	std	Y+15, r1	; 0x0f
  _previousError = 0;
     8c6:	18 8a       	std	Y+16, r1	; 0x10
     8c8:	19 8a       	std	Y+17, r1	; 0x11
     8ca:	1a 8a       	std	Y+18, r1	; 0x12
     8cc:	1b 8a       	std	Y+19, r1	; 0x13
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <_ZN7AutoPID3runEv>:

bool AutoPID::atSetPoint(double threshold) {
  return abs(*_setpoint - *_input) <= threshold;
}//bool AutoPID::atSetPoint

void AutoPID::run() {
     8d4:	4f 92       	push	r4
     8d6:	5f 92       	push	r5
     8d8:	6f 92       	push	r6
     8da:	7f 92       	push	r7
     8dc:	8f 92       	push	r8
     8de:	9f 92       	push	r9
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	2a 97       	sbiw	r28, 0x0a	; 10
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	8c 01       	movw	r16, r24
  if (_stopped) {
     906:	dc 01       	movw	r26, r24
     908:	d2 96       	adiw	r26, 0x32	; 50
     90a:	8c 91       	ld	r24, X
     90c:	d2 97       	sbiw	r26, 0x32	; 50
     90e:	88 23       	and	r24, r24
     910:	29 f0       	breq	.+10     	; 0x91c <__stack+0x1d>
    _stopped = false;
     912:	d2 96       	adiw	r26, 0x32	; 50
     914:	1c 92       	st	X, r1
    reset();
     916:	c8 01       	movw	r24, r16
     918:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN7AutoPID5resetEv>
  }
  //if bang thresholds are defined and we're outside of them, use bang-bang control
  if (_bangOn && ((*_setpoint - *_input) > _bangOn)) {
     91c:	f8 01       	movw	r30, r16
     91e:	c4 88       	ldd	r12, Z+20	; 0x14
     920:	d5 88       	ldd	r13, Z+21	; 0x15
     922:	e6 88       	ldd	r14, Z+22	; 0x16
     924:	f7 88       	ldd	r15, Z+23	; 0x17
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	a9 01       	movw	r20, r18
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	0e 94 a6 0b 	call	0x174c	; 0x174c <__cmpsf2>
     934:	88 23       	and	r24, r24
     936:	11 f1       	breq	.+68     	; 0x97c <__stack+0x7d>
     938:	d8 01       	movw	r26, r16
     93a:	5e 96       	adiw	r26, 0x1e	; 30
     93c:	8d 91       	ld	r24, X+
     93e:	9c 91       	ld	r25, X
     940:	5f 97       	sbiw	r26, 0x1f	; 31
     942:	5c 96       	adiw	r26, 0x1c	; 28
     944:	0d 90       	ld	r0, X+
     946:	bc 91       	ld	r27, X
     948:	a0 2d       	mov	r26, r0
     94a:	2d 91       	ld	r18, X+
     94c:	3d 91       	ld	r19, X+
     94e:	4d 91       	ld	r20, X+
     950:	5c 91       	ld	r21, X
     952:	fc 01       	movw	r30, r24
     954:	60 81       	ld	r22, Z
     956:	71 81       	ldd	r23, Z+1	; 0x01
     958:	82 81       	ldd	r24, Z+2	; 0x02
     95a:	93 81       	ldd	r25, Z+3	; 0x03
     95c:	0e 94 39 0b 	call	0x1672	; 0x1672 <__subsf3>
     960:	9b 01       	movw	r18, r22
     962:	ac 01       	movw	r20, r24
     964:	c7 01       	movw	r24, r14
     966:	b6 01       	movw	r22, r12
     968:	0e 94 a6 0b 	call	0x174c	; 0x174c <__cmpsf2>
     96c:	87 ff       	sbrs	r24, 7
     96e:	06 c0       	rjmp	.+12     	; 0x97c <__stack+0x7d>
    *_output = _outputMax;
     970:	f8 01       	movw	r30, r16
     972:	86 a1       	ldd	r24, Z+38	; 0x26
     974:	97 a1       	ldd	r25, Z+39	; 0x27
     976:	a0 a5       	ldd	r26, Z+40	; 0x28
     978:	b1 a5       	ldd	r27, Z+41	; 0x29
     97a:	2f c0       	rjmp	.+94     	; 0x9da <__stack+0xdb>
    _lastStep = millis();
  } else if (_bangOff && ((*_input - *_setpoint) > _bangOff)) {
     97c:	f8 01       	movw	r30, r16
     97e:	c0 8c       	ldd	r12, Z+24	; 0x18
     980:	d1 8c       	ldd	r13, Z+25	; 0x19
     982:	e2 8c       	ldd	r14, Z+26	; 0x1a
     984:	f3 8c       	ldd	r15, Z+27	; 0x1b
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	a9 01       	movw	r20, r18
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 a6 0b 	call	0x174c	; 0x174c <__cmpsf2>
     994:	88 23       	and	r24, r24
     996:	91 f1       	breq	.+100    	; 0x9fc <__stack+0xfd>
     998:	d8 01       	movw	r26, r16
     99a:	5c 96       	adiw	r26, 0x1c	; 28
     99c:	8d 91       	ld	r24, X+
     99e:	9c 91       	ld	r25, X
     9a0:	5d 97       	sbiw	r26, 0x1d	; 29
     9a2:	5e 96       	adiw	r26, 0x1e	; 30
     9a4:	0d 90       	ld	r0, X+
     9a6:	bc 91       	ld	r27, X
     9a8:	a0 2d       	mov	r26, r0
     9aa:	2d 91       	ld	r18, X+
     9ac:	3d 91       	ld	r19, X+
     9ae:	4d 91       	ld	r20, X+
     9b0:	5c 91       	ld	r21, X
     9b2:	fc 01       	movw	r30, r24
     9b4:	60 81       	ld	r22, Z
     9b6:	71 81       	ldd	r23, Z+1	; 0x01
     9b8:	82 81       	ldd	r24, Z+2	; 0x02
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	0e 94 39 0b 	call	0x1672	; 0x1672 <__subsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	c7 01       	movw	r24, r14
     9c6:	b6 01       	movw	r22, r12
     9c8:	0e 94 a6 0b 	call	0x174c	; 0x174c <__cmpsf2>
     9cc:	87 ff       	sbrs	r24, 7
     9ce:	16 c0       	rjmp	.+44     	; 0x9fc <__stack+0xfd>
    *_output = _outputMin;
     9d0:	f8 01       	movw	r30, r16
     9d2:	82 a1       	ldd	r24, Z+34	; 0x22
     9d4:	93 a1       	ldd	r25, Z+35	; 0x23
     9d6:	a4 a1       	ldd	r26, Z+36	; 0x24
     9d8:	b5 a1       	ldd	r27, Z+37	; 0x25
     9da:	20 a1       	ldd	r18, Z+32	; 0x20
     9dc:	31 a1       	ldd	r19, Z+33	; 0x21
     9de:	f9 01       	movw	r30, r18
     9e0:	80 83       	st	Z, r24
     9e2:	91 83       	std	Z+1, r25	; 0x01
     9e4:	a2 83       	std	Z+2, r26	; 0x02
     9e6:	b3 83       	std	Z+3, r27	; 0x03
    _lastStep = millis();
     9e8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <millis>
     9ec:	d8 01       	movw	r26, r16
     9ee:	9e 96       	adiw	r26, 0x2e	; 46
     9f0:	6d 93       	st	X+, r22
     9f2:	7d 93       	st	X+, r23
     9f4:	8d 93       	st	X+, r24
     9f6:	9c 93       	st	X, r25
     9f8:	d1 97       	sbiw	r26, 0x31	; 49
     9fa:	e1 c0       	rjmp	.+450    	; 0xbbe <__stack+0x2bf>
  } else {                                    //otherwise use PID control
    unsigned long _dT = millis() - _lastStep;   //calculate time since last update
     9fc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <millis>
     a00:	f8 01       	movw	r30, r16
     a02:	c6 a4       	ldd	r12, Z+46	; 0x2e
     a04:	d7 a4       	ldd	r13, Z+47	; 0x2f
     a06:	e0 a8       	ldd	r14, Z+48	; 0x30
     a08:	f1 a8       	ldd	r15, Z+49	; 0x31
     a0a:	4b 01       	movw	r8, r22
     a0c:	5c 01       	movw	r10, r24
     a0e:	8c 18       	sub	r8, r12
     a10:	9d 08       	sbc	r9, r13
     a12:	ae 08       	sbc	r10, r14
     a14:	bf 08       	sbc	r11, r15
    if (_dT >= _timeStep) {                     //if long enough, do PID calculations
     a16:	82 a5       	ldd	r24, Z+42	; 0x2a
     a18:	93 a5       	ldd	r25, Z+43	; 0x2b
     a1a:	a4 a5       	ldd	r26, Z+44	; 0x2c
     a1c:	b5 a5       	ldd	r27, Z+45	; 0x2d
     a1e:	88 16       	cp	r8, r24
     a20:	99 06       	cpc	r9, r25
     a22:	aa 06       	cpc	r10, r26
     a24:	bb 06       	cpc	r11, r27
     a26:	08 f4       	brcc	.+2      	; 0xa2a <__stack+0x12b>
     a28:	ca c0       	rjmp	.+404    	; 0xbbe <__stack+0x2bf>
      _lastStep = millis();
     a2a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <millis>
     a2e:	d8 01       	movw	r26, r16
     a30:	9e 96       	adiw	r26, 0x2e	; 46
     a32:	6d 93       	st	X+, r22
     a34:	7d 93       	st	X+, r23
     a36:	8d 93       	st	X+, r24
     a38:	9c 93       	st	X, r25
     a3a:	d1 97       	sbiw	r26, 0x31	; 49
      double _error = *_setpoint - *_input;
     a3c:	5e 96       	adiw	r26, 0x1e	; 30
     a3e:	8d 91       	ld	r24, X+
     a40:	9c 91       	ld	r25, X
     a42:	5f 97       	sbiw	r26, 0x1f	; 31
     a44:	5c 96       	adiw	r26, 0x1c	; 28
     a46:	0d 90       	ld	r0, X+
     a48:	bc 91       	ld	r27, X
     a4a:	a0 2d       	mov	r26, r0
     a4c:	2d 91       	ld	r18, X+
     a4e:	3d 91       	ld	r19, X+
     a50:	4d 91       	ld	r20, X+
     a52:	5c 91       	ld	r21, X
     a54:	fc 01       	movw	r30, r24
     a56:	60 81       	ld	r22, Z
     a58:	71 81       	ldd	r23, Z+1	; 0x01
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	93 81       	ldd	r25, Z+3	; 0x03
     a5e:	0e 94 39 0b 	call	0x1672	; 0x1672 <__subsf3>
     a62:	6b 01       	movw	r12, r22
     a64:	7c 01       	movw	r14, r24
      _integral += (_error + _previousError) / 2 * _dT / 1000.0;   //Riemann sum integral
     a66:	d8 01       	movw	r26, r16
     a68:	50 96       	adiw	r26, 0x10	; 16
     a6a:	8d 91       	ld	r24, X+
     a6c:	9d 91       	ld	r25, X+
     a6e:	0d 90       	ld	r0, X+
     a70:	bc 91       	ld	r27, X
     a72:	a0 2d       	mov	r26, r0
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	9a 83       	std	Y+2, r25	; 0x02
     a78:	ab 83       	std	Y+3, r26	; 0x03
     a7a:	bc 83       	std	Y+4, r27	; 0x04
     a7c:	c5 01       	movw	r24, r10
     a7e:	b4 01       	movw	r22, r8
     a80:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__floatunsisf>
     a84:	2b 01       	movw	r4, r22
     a86:	3c 01       	movw	r6, r24
     a88:	29 81       	ldd	r18, Y+1	; 0x01
     a8a:	3a 81       	ldd	r19, Y+2	; 0x02
     a8c:	4b 81       	ldd	r20, Y+3	; 0x03
     a8e:	5c 81       	ldd	r21, Y+4	; 0x04
     a90:	c7 01       	movw	r24, r14
     a92:	b6 01       	movw	r22, r12
     a94:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__addsf3>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	5f e3       	ldi	r21, 0x3F	; 63
     aa0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     aa4:	a3 01       	movw	r20, r6
     aa6:	92 01       	movw	r18, r4
     aa8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	4a e7       	ldi	r20, 0x7A	; 122
     ab2:	54 e4       	ldi	r21, 0x44	; 68
     ab4:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__divsf3>
     ab8:	f8 01       	movw	r30, r16
     aba:	24 85       	ldd	r18, Z+12	; 0x0c
     abc:	35 85       	ldd	r19, Z+13	; 0x0d
     abe:	46 85       	ldd	r20, Z+14	; 0x0e
     ac0:	57 85       	ldd	r21, Z+15	; 0x0f
     ac2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__addsf3>
     ac6:	4b 01       	movw	r8, r22
     ac8:	5c 01       	movw	r10, r24
     aca:	d8 01       	movw	r26, r16
     acc:	1c 96       	adiw	r26, 0x0c	; 12
     ace:	6d 93       	st	X+, r22
     ad0:	7d 93       	st	X+, r23
     ad2:	8d 93       	st	X+, r24
     ad4:	9c 93       	st	X, r25
     ad6:	1f 97       	sbiw	r26, 0x0f	; 15
      //_integral = constrain(_integral, _outputMin/_Ki, _outputMax/_Ki);
      double _dError = (_error - _previousError) / _dT / 1000.0;   //derivative
      _previousError = _error;
     ad8:	f8 01       	movw	r30, r16
     ada:	c0 8a       	std	Z+16, r12	; 0x10
     adc:	d1 8a       	std	Z+17, r13	; 0x11
     ade:	e2 8a       	std	Z+18, r14	; 0x12
     ae0:	f3 8a       	std	Z+19, r15	; 0x13
      double PID = (_Kp * _error) + (_Ki * _integral) + (_Kd * _dError);
     ae2:	20 81       	ld	r18, Z
     ae4:	31 81       	ldd	r19, Z+1	; 0x01
     ae6:	42 81       	ldd	r20, Z+2	; 0x02
     ae8:	53 81       	ldd	r21, Z+3	; 0x03
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     af2:	6d 83       	std	Y+5, r22	; 0x05
     af4:	7e 83       	std	Y+6, r23	; 0x06
     af6:	8f 83       	std	Y+7, r24	; 0x07
     af8:	98 87       	std	Y+8, r25	; 0x08
     afa:	d8 01       	movw	r26, r16
     afc:	14 96       	adiw	r26, 0x04	; 4
     afe:	2d 91       	ld	r18, X+
     b00:	3d 91       	ld	r19, X+
     b02:	4d 91       	ld	r20, X+
     b04:	5c 91       	ld	r21, X
     b06:	17 97       	sbiw	r26, 0x07	; 7
     b08:	c5 01       	movw	r24, r10
     b0a:	b4 01       	movw	r22, r8
     b0c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	6d 81       	ldd	r22, Y+5	; 0x05
     b16:	7e 81       	ldd	r23, Y+6	; 0x06
     b18:	8f 81       	ldd	r24, Y+7	; 0x07
     b1a:	98 85       	ldd	r25, Y+8	; 0x08
     b1c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__addsf3>
     b20:	4b 01       	movw	r8, r22
     b22:	5c 01       	movw	r10, r24
     b24:	29 81       	ldd	r18, Y+1	; 0x01
     b26:	3a 81       	ldd	r19, Y+2	; 0x02
     b28:	4b 81       	ldd	r20, Y+3	; 0x03
     b2a:	5c 81       	ldd	r21, Y+4	; 0x04
     b2c:	c7 01       	movw	r24, r14
     b2e:	b6 01       	movw	r22, r12
     b30:	0e 94 39 0b 	call	0x1672	; 0x1672 <__subsf3>
     b34:	a3 01       	movw	r20, r6
     b36:	92 01       	movw	r18, r4
     b38:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__divsf3>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	4a e7       	ldi	r20, 0x7A	; 122
     b42:	54 e4       	ldi	r21, 0x44	; 68
     b44:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__divsf3>
     b48:	f8 01       	movw	r30, r16
     b4a:	20 85       	ldd	r18, Z+8	; 0x08
     b4c:	31 85       	ldd	r19, Z+9	; 0x09
     b4e:	42 85       	ldd	r20, Z+10	; 0x0a
     b50:	53 85       	ldd	r21, Z+11	; 0x0b
     b52:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
     b56:	9b 01       	movw	r18, r22
     b58:	ac 01       	movw	r20, r24
     b5a:	c5 01       	movw	r24, r10
     b5c:	b4 01       	movw	r22, r8
     b5e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__addsf3>
     b62:	3b 01       	movw	r6, r22
     b64:	4c 01       	movw	r8, r24
      //*_output = _outputMin + (constrain(PID, 0, 1) * (_outputMax - _outputMin));
      *_output = constrain(PID, _outputMin, _outputMax);
     b66:	d8 01       	movw	r26, r16
     b68:	90 96       	adiw	r26, 0x20	; 32
     b6a:	cd 90       	ld	r12, X+
     b6c:	dc 90       	ld	r13, X
     b6e:	91 97       	sbiw	r26, 0x21	; 33
     b70:	92 96       	adiw	r26, 0x22	; 34
     b72:	ac 90       	ld	r10, X
     b74:	92 97       	sbiw	r26, 0x22	; 34
     b76:	93 96       	adiw	r26, 0x23	; 35
     b78:	bc 90       	ld	r11, X
     b7a:	93 97       	sbiw	r26, 0x23	; 35
     b7c:	94 96       	adiw	r26, 0x24	; 36
     b7e:	ec 90       	ld	r14, X
     b80:	94 97       	sbiw	r26, 0x24	; 36
     b82:	95 96       	adiw	r26, 0x25	; 37
     b84:	fc 90       	ld	r15, X
     b86:	95 01       	movw	r18, r10
     b88:	a7 01       	movw	r20, r14
     b8a:	0e 94 a6 0b 	call	0x174c	; 0x174c <__cmpsf2>
     b8e:	87 fd       	sbrc	r24, 7
     b90:	0f c0       	rjmp	.+30     	; 0xbb0 <__stack+0x2b1>
     b92:	f8 01       	movw	r30, r16
     b94:	a6 a0       	ldd	r10, Z+38	; 0x26
     b96:	b7 a0       	ldd	r11, Z+39	; 0x27
     b98:	e0 a4       	ldd	r14, Z+40	; 0x28
     b9a:	f1 a4       	ldd	r15, Z+41	; 0x29
     b9c:	95 01       	movw	r18, r10
     b9e:	a7 01       	movw	r20, r14
     ba0:	b3 01       	movw	r22, r6
     ba2:	c4 01       	movw	r24, r8
     ba4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__gesf2>
     ba8:	18 16       	cp	r1, r24
     baa:	14 f0       	brlt	.+4      	; 0xbb0 <__stack+0x2b1>
     bac:	53 01       	movw	r10, r6
     bae:	74 01       	movw	r14, r8
     bb0:	c5 01       	movw	r24, r10
     bb2:	d7 01       	movw	r26, r14
     bb4:	f6 01       	movw	r30, r12
     bb6:	80 83       	st	Z, r24
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	a2 83       	std	Z+2, r26	; 0x02
     bbc:	b3 83       	std	Z+3, r27	; 0x03
    }
  }
}//void AutoPID::run
     bbe:	2a 96       	adiw	r28, 0x0a	; 10
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	9f 90       	pop	r9
     be0:	8f 90       	pop	r8
     be2:	7f 90       	pop	r7
     be4:	6f 90       	pop	r6
     be6:	5f 90       	pop	r5
     be8:	4f 90       	pop	r4
     bea:	08 95       	ret

00000bec <_Z11StartTimer1PFvvEm>:
}

void RestartTimer1(void)
{
	TCNT1 = dub_tcnt1;
	TIMSK1 |= (1<<TOIE1);	//разрешить прерывания по таймеру1
     bec:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     bf0:	2e 7f       	andi	r18, 0xFE	; 254
     bf2:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     bf6:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <func+0x1>
     bfa:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <func>
     bfe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     c02:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     c06:	db 01       	movw	r26, r22
     c08:	ca 01       	movw	r24, r20
     c0a:	06 97       	sbiw	r24, 0x06	; 6
     c0c:	a1 09       	sbc	r26, r1
     c0e:	b1 09       	sbc	r27, r1
     c10:	8a 3f       	cpi	r24, 0xFA	; 250
     c12:	9f 40       	sbci	r25, 0x0F	; 15
     c14:	a1 05       	cpc	r26, r1
     c16:	b1 05       	cpc	r27, r1
     c18:	90 f4       	brcc	.+36     	; 0xc3e <_Z11StartTimer1PFvvEm+0x52>
     c1a:	db 01       	movw	r26, r22
     c1c:	ca 01       	movw	r24, r20
     c1e:	64 e0       	ldi	r22, 0x04	; 4
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	aa 1f       	adc	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <_Z11StartTimer1PFvvEm+0x34>
     c2c:	40 e3       	ldi	r20, 0x30	; 48
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	48 1b       	sub	r20, r24
     c36:	59 0b       	sbc	r21, r25
     c38:	6a 0b       	sbc	r22, r26
     c3a:	7b 0b       	sbc	r23, r27
     c3c:	6b c0       	rjmp	.+214    	; 0xd14 <_Z11StartTimer1PFvvEm+0x128>
     c3e:	db 01       	movw	r26, r22
     c40:	ca 01       	movw	r24, r20
     c42:	90 51       	subi	r25, 0x10	; 16
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	81 15       	cp	r24, r1
     c4a:	90 47       	sbci	r25, 0x70	; 112
     c4c:	a1 05       	cpc	r26, r1
     c4e:	b1 05       	cpc	r27, r1
     c50:	80 f4       	brcc	.+32     	; 0xc72 <_Z11StartTimer1PFvvEm+0x86>
     c52:	db 01       	movw	r26, r22
     c54:	ca 01       	movw	r24, r20
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	aa 1f       	adc	r26, r26
     c5c:	bb 1f       	adc	r27, r27
     c5e:	46 e0       	ldi	r20, 0x06	; 6
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	48 1b       	sub	r20, r24
     c68:	59 0b       	sbc	r21, r25
     c6a:	6a 0b       	sbc	r22, r26
     c6c:	7b 0b       	sbc	r23, r27
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	52 c0       	rjmp	.+164    	; 0xd16 <_Z11StartTimer1PFvvEm+0x12a>
     c72:	db 01       	movw	r26, r22
     c74:	ca 01       	movw	r24, r20
     c76:	90 58       	subi	r25, 0x80	; 128
     c78:	a1 09       	sbc	r26, r1
     c7a:	b1 09       	sbc	r27, r1
     c7c:	81 15       	cp	r24, r1
     c7e:	90 48       	sbci	r25, 0x80	; 128
     c80:	a3 40       	sbci	r26, 0x03	; 3
     c82:	b1 05       	cpc	r27, r1
     c84:	98 f4       	brcc	.+38     	; 0xcac <_Z11StartTimer1PFvvEm+0xc0>
     c86:	db 01       	movw	r26, r22
     c88:	ca 01       	movw	r24, r20
     c8a:	42 e0       	ldi	r20, 0x02	; 2
     c8c:	b6 95       	lsr	r27
     c8e:	a7 95       	ror	r26
     c90:	97 95       	ror	r25
     c92:	87 95       	ror	r24
     c94:	4a 95       	dec	r20
     c96:	d1 f7       	brne	.-12     	; 0xc8c <_Z11StartTimer1PFvvEm+0xa0>
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	48 1b       	sub	r20, r24
     ca2:	59 0b       	sbc	r21, r25
     ca4:	6a 0b       	sbc	r22, r26
     ca6:	7b 0b       	sbc	r23, r27
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	35 c0       	rjmp	.+106    	; 0xd16 <_Z11StartTimer1PFvvEm+0x12a>
     cac:	db 01       	movw	r26, r22
     cae:	ca 01       	movw	r24, r20
     cb0:	14 97       	sbiw	r26, 0x04	; 4
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	ac 40       	sbci	r26, 0x0C	; 12
     cb6:	b1 05       	cpc	r27, r1
     cb8:	98 f4       	brcc	.+38     	; 0xce0 <_Z11StartTimer1PFvvEm+0xf4>
     cba:	db 01       	movw	r26, r22
     cbc:	ca 01       	movw	r24, r20
     cbe:	34 e0       	ldi	r19, 0x04	; 4
     cc0:	b6 95       	lsr	r27
     cc2:	a7 95       	ror	r26
     cc4:	97 95       	ror	r25
     cc6:	87 95       	ror	r24
     cc8:	3a 95       	dec	r19
     cca:	d1 f7       	brne	.-12     	; 0xcc0 <_Z11StartTimer1PFvvEm+0xd4>
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	48 1b       	sub	r20, r24
     cd6:	59 0b       	sbc	r21, r25
     cd8:	6a 0b       	sbc	r22, r26
     cda:	7b 0b       	sbc	r23, r27
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	1b c0       	rjmp	.+54     	; 0xd16 <_Z11StartTimer1PFvvEm+0x12a>
     ce0:	db 01       	movw	r26, r22
     ce2:	ca 01       	movw	r24, r20
     ce4:	50 97       	sbiw	r26, 0x10	; 16
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	a0 43       	sbci	r26, 0x30	; 48
     cea:	b1 05       	cpc	r27, r1
     cec:	98 f4       	brcc	.+38     	; 0xd14 <_Z11StartTimer1PFvvEm+0x128>
     cee:	db 01       	movw	r26, r22
     cf0:	ca 01       	movw	r24, r20
     cf2:	26 e0       	ldi	r18, 0x06	; 6
     cf4:	b6 95       	lsr	r27
     cf6:	a7 95       	ror	r26
     cf8:	97 95       	ror	r25
     cfa:	87 95       	ror	r24
     cfc:	2a 95       	dec	r18
     cfe:	d1 f7       	brne	.-12     	; 0xcf4 <_Z11StartTimer1PFvvEm+0x108>
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	48 1b       	sub	r20, r24
     d0a:	59 0b       	sbc	r21, r25
     d0c:	6a 0b       	sbc	r22, r26
     d0e:	7b 0b       	sbc	r23, r27
     d10:	85 e0       	ldi	r24, 0x05	; 5
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <_Z11StartTimer1PFvvEm+0x12a>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d1a:	50 93 6b 01 	sts	0x016B, r21	; 0x80016b <dub_tcnt1+0x1>
     d1e:	40 93 6a 01 	sts	0x016A, r20	; 0x80016a <dub_tcnt1>
     d22:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d26:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d2a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     d34:	78 94       	sei
     d36:	08 95       	ret

00000d38 <_Z10StopTimer1v>:
     d38:	ef e6       	ldi	r30, 0x6F	; 111
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8e 7f       	andi	r24, 0xFE	; 254
     d40:	80 83       	st	Z, r24
     d42:	08 95       	ret

00000d44 <_Z12ResumeTimer1v>:
     d44:	ef e6       	ldi	r30, 0x6F	; 111
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	80 83       	st	Z, r24
     d4e:	08 95       	ret

00000d50 <__vector_13>:
}

ISR(TIMER1_OVF_vect) 
{
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	2f 93       	push	r18
     d5c:	3f 93       	push	r19
     d5e:	4f 93       	push	r20
     d60:	5f 93       	push	r21
     d62:	6f 93       	push	r22
     d64:	7f 93       	push	r23
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
	TCNT1 = dub_tcnt1;	  
     d72:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <dub_tcnt1>
     d76:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <dub_tcnt1+0x1>
     d7a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d7e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	(*func)();
     d82:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <func>
     d86:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <func+0x1>
     d8a:	09 95       	icall
}
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <_ZN5Print17availableForWriteEv>:
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
	createChar(char_num, rows);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	08 95       	ret

00000db4 <_ZN5Print5flushEv>:
     db4:	08 95       	ret

00000db6 <_ZN17LiquidCrystal_I2CC1Ehhhh>:
     db6:	0f 93       	push	r16
     db8:	fc 01       	movw	r30, r24
     dba:	13 82       	std	Z+3, r1	; 0x03
     dbc:	12 82       	std	Z+2, r1	; 0x02
     dbe:	86 e2       	ldi	r24, 0x26	; 38
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
     dc6:	64 83       	std	Z+4, r22	; 0x04
     dc8:	40 87       	std	Z+8, r20	; 0x08
     dca:	21 87       	std	Z+9, r18	; 0x09
     dcc:	02 87       	std	Z+10, r16	; 0x0a
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	83 87       	std	Z+11, r24	; 0x0b
     dd2:	0f 91       	pop	r16
     dd4:	08 95       	ret

00000dd6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	ec 01       	movw	r28, r24
     dde:	16 2f       	mov	r17, r22
     de0:	6c 81       	ldd	r22, Y+4	; 0x04
     de2:	8c ed       	ldi	r24, 0xDC	; 220
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN7TwoWire17beginTransmissionEh>
     dea:	6b 85       	ldd	r22, Y+11	; 0x0b
     dec:	61 2b       	or	r22, r17
     dee:	8c ed       	ldi	r24, 0xDC	; 220
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 a7 0a 	call	0x154e	; 0x154e <_ZN7TwoWire5writeEh>
     df6:	8c ed       	ldi	r24, 0xDC	; 220
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <_ZN7TwoWire15endTransmissionEv>

00000e04 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	8c 01       	movw	r16, r24
     e0c:	c6 2f       	mov	r28, r22
     e0e:	64 60       	ori	r22, 0x04	; 4
     e10:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <delayMicroseconds>
     e1c:	6c 2f       	mov	r22, r28
     e1e:	6b 7f       	andi	r22, 0xFB	; 251
     e20:	c8 01       	movw	r24, r16
     e22:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     e26:	82 e3       	ldi	r24, 0x32	; 50
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <delayMicroseconds>

00000e34 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	ec 01       	movw	r28, r24
     e3c:	16 2f       	mov	r17, r22
     e3e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     e42:	61 2f       	mov	r22, r17
     e44:	ce 01       	movw	r24, r28
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0c 94 02 07 	jmp	0xe04	; 0xe04 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00000e50 <_ZN17LiquidCrystal_I2C4sendEhh>:
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	8c 01       	movw	r16, r24
     e5a:	c6 2f       	mov	r28, r22
     e5c:	d4 2f       	mov	r29, r20
     e5e:	60 7f       	andi	r22, 0xF0	; 240
     e60:	64 2b       	or	r22, r20
     e62:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN17LiquidCrystal_I2C10write4bitsEh>
     e66:	80 e1       	ldi	r24, 0x10	; 16
     e68:	c8 9f       	mul	r28, r24
     e6a:	b0 01       	movw	r22, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	6d 2b       	or	r22, r29
     e70:	c8 01       	movw	r24, r16
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00000e7e <_ZN17LiquidCrystal_I2C7commandEh>:
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	0c 94 28 07 	jmp	0xe50	; 0xe50 <_ZN17LiquidCrystal_I2C4sendEhh>

00000e84 <_ZN17LiquidCrystal_I2C5clearEv>:
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN17LiquidCrystal_I2C7commandEh>
     e8a:	80 ed       	ldi	r24, 0xD0	; 208
     e8c:	97 e0       	ldi	r25, 0x07	; 7
     e8e:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <delayMicroseconds>

00000e92 <_ZN17LiquidCrystal_I2C4homeEv>:
     e92:	62 e0       	ldi	r22, 0x02	; 2
     e94:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN17LiquidCrystal_I2C7commandEh>
     e98:	80 ed       	ldi	r24, 0xD0	; 208
     e9a:	97 e0       	ldi	r25, 0x07	; 7
     e9c:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <delayMicroseconds>

00000ea0 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	28 97       	sbiw	r28, 0x08	; 8
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	9c 01       	movw	r18, r24
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	ea e0       	ldi	r30, 0x0A	; 10
     eba:	f1 e0       	ldi	r31, 0x01	; 1
     ebc:	de 01       	movw	r26, r28
     ebe:	11 96       	adiw	r26, 0x01	; 1
     ec0:	01 90       	ld	r0, Z+
     ec2:	0d 92       	st	X+, r0
     ec4:	8a 95       	dec	r24
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
     ec8:	f9 01       	movw	r30, r18
     eca:	81 85       	ldd	r24, Z+9	; 0x09
     ecc:	84 17       	cp	r24, r20
     ece:	10 f4       	brcc	.+4      	; 0xed4 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
     ed0:	4f ef       	ldi	r20, 0xFF	; 255
     ed2:	48 0f       	add	r20, r24
     ed4:	fe 01       	movw	r30, r28
     ed6:	31 96       	adiw	r30, 0x01	; 1
     ed8:	e4 0f       	add	r30, r20
     eda:	f1 1d       	adc	r31, r1
     edc:	e4 0f       	add	r30, r20
     ede:	f1 1d       	adc	r31, r1
     ee0:	90 81       	ld	r25, Z
     ee2:	69 0f       	add	r22, r25
     ee4:	60 68       	ori	r22, 0x80	; 128
     ee6:	c9 01       	movw	r24, r18
     ee8:	28 96       	adiw	r28, 0x08	; 8
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <_ZN17LiquidCrystal_I2C7commandEh>

00000efc <_ZN17LiquidCrystal_I2C7displayEv>:
     efc:	fc 01       	movw	r30, r24
     efe:	66 81       	ldd	r22, Z+6	; 0x06
     f00:	26 2f       	mov	r18, r22
     f02:	24 60       	ori	r18, 0x04	; 4
     f04:	26 83       	std	Z+6, r18	; 0x06
     f06:	6c 60       	ori	r22, 0x0C	; 12
     f08:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <_ZN17LiquidCrystal_I2C7commandEh>

00000f0c <_ZN17LiquidCrystal_I2C5writeEh>:
inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     f0c:	41 e0       	ldi	r20, 0x01	; 1
     f0e:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	08 95       	ret

00000f18 <_ZN17LiquidCrystal_I2C5beginEv>:
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
}

void LiquidCrystal_I2C::begin() {
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	ec 01       	movw	r28, r24
	Wire.begin();
     f1e:	8c ed       	ldi	r24, 0xDC	; 220
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
     f26:	1d 82       	std	Y+5, r1	; 0x05

	if (_rows > 1) {
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	82 30       	cpi	r24, 0x02	; 2
     f2c:	10 f0       	brcs	.+4      	; 0xf32 <_ZN17LiquidCrystal_I2C5beginEv+0x1a>
		_displayfunction |= LCD_2LINE;
     f2e:	98 e0       	ldi	r25, 0x08	; 8
     f30:	9d 83       	std	Y+5, r25	; 0x05
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
     f32:	9a 85       	ldd	r25, Y+10	; 0x0a
     f34:	99 23       	and	r25, r25
     f36:	29 f0       	breq	.+10     	; 0xf42 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	19 f4       	brne	.+6      	; 0xf42 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
		_displayfunction |= LCD_5x10DOTS;
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	84 60       	ori	r24, 0x04	; 4
     f40:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50);
     f42:	62 e3       	ldi	r22, 0x32	; 50
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <delay>

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
     f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f50:	ce 01       	movw	r24, r28
     f52:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
     f56:	68 ee       	ldi	r22, 0xE8	; 232
     f58:	73 e0       	ldi	r23, 0x03	; 3
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
     f62:	60 e3       	ldi	r22, 0x30	; 48
     f64:	ce 01       	movw	r24, r28
     f66:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
     f6a:	84 e9       	ldi	r24, 0x94	; 148
     f6c:	91 e1       	ldi	r25, 0x11	; 17
     f6e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <delayMicroseconds>

	// second try
	write4bits(0x03 << 4);
     f72:	60 e3       	ldi	r22, 0x30	; 48
     f74:	ce 01       	movw	r24, r28
     f76:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
     f7a:	84 e9       	ldi	r24, 0x94	; 148
     f7c:	91 e1       	ldi	r25, 0x11	; 17
     f7e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <delayMicroseconds>

	// third go!
	write4bits(0x03 << 4);
     f82:	60 e3       	ldi	r22, 0x30	; 48
     f84:	ce 01       	movw	r24, r28
     f86:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(150);
     f8a:	86 e9       	ldi	r24, 0x96	; 150
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <delayMicroseconds>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
     f92:	60 e2       	ldi	r22, 0x20	; 32
     f94:	ce 01       	movw	r24, r28
     f96:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN17LiquidCrystal_I2C10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
     f9a:	6d 81       	ldd	r22, Y+5	; 0x05
     f9c:	60 62       	ori	r22, 0x20	; 32
     f9e:	ce 01       	movw	r24, r28
     fa0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN17LiquidCrystal_I2C7commandEh>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	8e 83       	std	Y+6, r24	; 0x06
	display();
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN17LiquidCrystal_I2C7displayEv>

	// clear it off
	clear();
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN17LiquidCrystal_I2C5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	8f 83       	std	Y+7, r24	; 0x07

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
     fb8:	66 e0       	ldi	r22, 0x06	; 6
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN17LiquidCrystal_I2C7commandEh>

	home();
     fc0:	ce 01       	movw	r24, r28
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
     fc6:	0c 94 49 07 	jmp	0xe92	; 0xe92 <_ZN17LiquidCrystal_I2C4homeEv>

00000fca <_ZN7MAX6675C1Eaaa>:
#endif
#include <util/delay.h>
#include <stdlib.h>
#include "max6675.h"

MAX6675::MAX6675(int8_t SCLK, int8_t CS, int8_t MISO) {
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	84 2f       	mov	r24, r20
  sclk = SCLK;
     fd2:	68 83       	st	Y, r22
  cs = CS;
     fd4:	4a 83       	std	Y+2, r20	; 0x02
  miso = MISO;
     fd6:	29 83       	std	Y+1, r18	; 0x01

  //define pin modes
  pinMode(cs, OUTPUT);
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <pinMode>
  pinMode(sclk, OUTPUT); 
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	88 81       	ld	r24, Y
     fe2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <pinMode>
  pinMode(miso, INPUT);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <pinMode>

  digitalWrite(cs, HIGH);
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
  //define pin modes
  pinMode(cs, OUTPUT);
  pinMode(sclk, OUTPUT); 
  pinMode(miso, INPUT);

  digitalWrite(cs, HIGH);
     ff6:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <digitalWrite>

00000ffa <_ZN7MAX66757spireadEv>:

double MAX6675::readFahrenheit(void) {
  return readCelsius() * 9.0/5.0 + 32;
}

byte MAX6675::spiread(void) { 
     ffa:	cf 92       	push	r12
     ffc:	df 92       	push	r13
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	7c 01       	movw	r14, r24
  int i;
  byte d = 0;
    100a:	10 e0       	ldi	r17, 0x00	; 0

  for (i=7; i>=0; i--)
    100c:	c7 e0       	ldi	r28, 0x07	; 7
    100e:	d0 e0       	ldi	r29, 0x00	; 0
  {
    digitalWrite(sclk, LOW);
    _delay_ms(1);
    if (digitalRead(miso)) {
      //set the bit to 0 no matter what
      d |= (1 << i);
    1010:	cc 24       	eor	r12, r12
    1012:	c3 94       	inc	r12
    1014:	d1 2c       	mov	r13, r1
  int i;
  byte d = 0;

  for (i=7; i>=0; i--)
  {
    digitalWrite(sclk, LOW);
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	f7 01       	movw	r30, r14
    101a:	80 81       	ld	r24, Z
    101c:	0e 94 3a 10 	call	0x2074	; 0x2074 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1020:	8f e9       	ldi	r24, 0x9F	; 159
    1022:	9f e0       	ldi	r25, 0x0F	; 15
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <_ZN7MAX66757spireadEv+0x2a>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <_ZN7MAX66757spireadEv+0x30>
    102a:	00 00       	nop
    _delay_ms(1);
    if (digitalRead(miso)) {
    102c:	f7 01       	movw	r30, r14
    102e:	81 81       	ldd	r24, Z+1	; 0x01
    1030:	0e 94 69 10 	call	0x20d2	; 0x20d2 <digitalRead>
    1034:	89 2b       	or	r24, r25
    1036:	39 f0       	breq	.+14     	; 0x1046 <_ZN7MAX66757spireadEv+0x4c>
      //set the bit to 0 no matter what
      d |= (1 << i);
    1038:	c6 01       	movw	r24, r12
    103a:	0c 2e       	mov	r0, r28
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <_ZN7MAX66757spireadEv+0x46>
    103e:	88 0f       	add	r24, r24
    1040:	0a 94       	dec	r0
    1042:	ea f7       	brpl	.-6      	; 0x103e <_ZN7MAX66757spireadEv+0x44>
    1044:	18 2b       	or	r17, r24
    }

    digitalWrite(sclk, HIGH);
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	f7 01       	movw	r30, r14
    104a:	80 81       	ld	r24, Z
    104c:	0e 94 3a 10 	call	0x2074	; 0x2074 <digitalWrite>
    1050:	8f e9       	ldi	r24, 0x9F	; 159
    1052:	9f e0       	ldi	r25, 0x0F	; 15
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <_ZN7MAX66757spireadEv+0x5a>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <_ZN7MAX66757spireadEv+0x60>
    105a:	00 00       	nop

byte MAX6675::spiread(void) { 
  int i;
  byte d = 0;

  for (i=7; i>=0; i--)
    105c:	21 97       	sbiw	r28, 0x01	; 1
    105e:	d8 f6       	brcc	.-74     	; 0x1016 <_ZN7MAX66757spireadEv+0x1c>
    digitalWrite(sclk, HIGH);
    _delay_ms(1);
  }

  return d;
}
    1060:	81 2f       	mov	r24, r17
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	08 95       	ret

00001072 <_ZN7MAX667511readCelsiusEv>:
  pinMode(sclk, OUTPUT); 
  pinMode(miso, INPUT);

  digitalWrite(cs, HIGH);
}
double MAX6675::readCelsius(void) {
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	8c 01       	movw	r16, r24

  uint16_t v;

  digitalWrite(cs, LOW);
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	fc 01       	movw	r30, r24
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	0e 94 3a 10 	call	0x2074	; 0x2074 <digitalWrite>
    1086:	8f e9       	ldi	r24, 0x9F	; 159
    1088:	9f e0       	ldi	r25, 0x0F	; 15
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <_ZN7MAX667511readCelsiusEv+0x18>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <_ZN7MAX667511readCelsiusEv+0x1e>
    1090:	00 00       	nop
  _delay_ms(1);

  v = spiread();
    1092:	c8 01       	movw	r24, r16
    1094:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN7MAX66757spireadEv>
    1098:	c8 2f       	mov	r28, r24
    109a:	d0 e0       	ldi	r29, 0x00	; 0
  v <<= 8;
    109c:	dc 2f       	mov	r29, r28
    109e:	cc 27       	eor	r28, r28
  v |= spiread();
    10a0:	c8 01       	movw	r24, r16
    10a2:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN7MAX66757spireadEv>
    10a6:	c8 2b       	or	r28, r24

  digitalWrite(cs, HIGH);
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	f8 01       	movw	r30, r16
    10ac:	82 81       	ldd	r24, Z+2	; 0x02
    10ae:	0e 94 3a 10 	call	0x2074	; 0x2074 <digitalWrite>

  if (v & 0x4) {
    10b2:	c2 fd       	sbrc	r28, 2
    10b4:	11 c0       	rjmp	.+34     	; 0x10d8 <_ZN7MAX667511readCelsiusEv+0x66>
    //return -100;
  }

  v >>= 3;

  return v*0.25;
    10b6:	be 01       	movw	r22, r28
    10b8:	83 e0       	ldi	r24, 0x03	; 3
    10ba:	76 95       	lsr	r23
    10bc:	67 95       	ror	r22
    10be:	8a 95       	dec	r24
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <_ZN7MAX667511readCelsiusEv+0x48>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__floatunsisf>
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5e e3       	ldi	r21, 0x3E	; 62
    10d2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3>
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <_ZN7MAX667511readCelsiusEv+0x6e>

  digitalWrite(cs, HIGH);

  if (v & 0x4) {
    // uh oh, no thermocouple attached!
    return NAN; 
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	80 ec       	ldi	r24, 0xC0	; 192
    10de:	9f e7       	ldi	r25, 0x7F	; 127
  }

  v >>= 3;

  return v*0.25;
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    10ea:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_state>
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <twi_sendStop>
    10f4:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <twi_inRepStart>
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	82 e1       	ldi	r24, 0x12	; 18
    10fc:	0e 94 3a 10 	call	0x2074	; 0x2074 <digitalWrite>
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	83 e1       	ldi	r24, 0x13	; 19
    1104:	0e 94 3a 10 	call	0x2074	; 0x2074 <digitalWrite>
    1108:	e9 eb       	ldi	r30, 0xB9	; 185
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8e 7f       	andi	r24, 0xFE	; 254
    1110:	80 83       	st	Z, r24
    1112:	80 81       	ld	r24, Z
    1114:	8d 7f       	andi	r24, 0xFD	; 253
    1116:	80 83       	st	Z, r24
    1118:	88 e4       	ldi	r24, 0x48	; 72
    111a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    111e:	85 e4       	ldi	r24, 0x45	; 69
    1120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1124:	08 95       	ret

00001126 <twi_writeTo>:
    1126:	0f 93       	push	r16
    1128:	41 32       	cpi	r20, 0x21	; 33
    112a:	08 f0       	brcs	.+2      	; 0x112e <twi_writeTo+0x8>
    112c:	4a c0       	rjmp	.+148    	; 0x11c2 <twi_writeTo+0x9c>
    112e:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <twi_state>
    1132:	91 11       	cpse	r25, r1
    1134:	fc cf       	rjmp	.-8      	; 0x112e <twi_writeTo+0x8>
    1136:	32 e0       	ldi	r19, 0x02	; 2
    1138:	30 93 db 01 	sts	0x01DB, r19	; 0x8001db <twi_state>
    113c:	00 93 d9 01 	sts	0x01D9, r16	; 0x8001d9 <twi_sendStop>
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	30 93 6e 01 	sts	0x016E, r19	; 0x80016e <twi_error>
    1146:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <twi_masterBufferIndex>
    114a:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <twi_masterBufferLength>
    114e:	56 2f       	mov	r21, r22
    1150:	a4 eb       	ldi	r26, 0xB4	; 180
    1152:	b1 e0       	ldi	r27, 0x01	; 1
    1154:	fb 01       	movw	r30, r22
    1156:	3e 2f       	mov	r19, r30
    1158:	35 1b       	sub	r19, r21
    115a:	34 17       	cp	r19, r20
    115c:	18 f4       	brcc	.+6      	; 0x1164 <twi_writeTo+0x3e>
    115e:	31 91       	ld	r19, Z+
    1160:	3d 93       	st	X+, r19
    1162:	f9 cf       	rjmp	.-14     	; 0x1156 <twi_writeTo+0x30>
    1164:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <twi_slarw>
    1168:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <twi_slarw>
    116c:	88 0f       	add	r24, r24
    116e:	83 2b       	or	r24, r19
    1170:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <twi_slarw>
    1174:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <twi_inRepStart>
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	61 f4       	brne	.+24     	; 0x1194 <twi_writeTo+0x6e>
    117c:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <twi_inRepStart>
    1180:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <twi_slarw>
    1184:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1188:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    118c:	83 fd       	sbrc	r24, 3
    118e:	f8 cf       	rjmp	.-16     	; 0x1180 <twi_writeTo+0x5a>
    1190:	85 ec       	ldi	r24, 0xC5	; 197
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <twi_writeTo+0x70>
    1194:	85 ee       	ldi	r24, 0xE5	; 229
    1196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    119a:	22 23       	and	r18, r18
    119c:	21 f0       	breq	.+8      	; 0x11a6 <twi_writeTo+0x80>
    119e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <twi_state>
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	d1 f3       	breq	.-12     	; 0x119a <twi_writeTo+0x74>
    11a6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <twi_error>
    11aa:	8f 3f       	cpi	r24, 0xFF	; 255
    11ac:	79 f0       	breq	.+30     	; 0x11cc <twi_writeTo+0xa6>
    11ae:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <twi_error>
    11b2:	80 32       	cpi	r24, 0x20	; 32
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <twi_writeTo+0xa0>
    11b6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <twi_error>
    11ba:	80 33       	cpi	r24, 0x30	; 48
    11bc:	31 f0       	breq	.+12     	; 0x11ca <twi_writeTo+0xa4>
    11be:	94 e0       	ldi	r25, 0x04	; 4
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <twi_writeTo+0xa6>
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <twi_writeTo+0xa6>
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <twi_writeTo+0xa6>
    11ca:	93 e0       	ldi	r25, 0x03	; 3
    11cc:	89 2f       	mov	r24, r25
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <twi_transmit>:
    11d2:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <twi_txBufferLength>
    11d6:	26 2f       	mov	r18, r22
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	24 0f       	add	r18, r20
    11dc:	31 1d       	adc	r19, r1
    11de:	21 32       	cpi	r18, 0x21	; 33
    11e0:	31 05       	cpc	r19, r1
    11e2:	dc f4       	brge	.+54     	; 0x121a <twi_transmit+0x48>
    11e4:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <twi_state>
    11e8:	24 30       	cpi	r18, 0x04	; 4
    11ea:	c9 f4       	brne	.+50     	; 0x121e <twi_transmit+0x4c>
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	86 17       	cp	r24, r22
    11f4:	58 f4       	brcc	.+22     	; 0x120c <twi_transmit+0x3a>
    11f6:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <twi_txBufferLength>
    11fa:	21 91       	ld	r18, Z+
    11fc:	dc 01       	movw	r26, r24
    11fe:	ae 56       	subi	r26, 0x6E	; 110
    1200:	be 4f       	sbci	r27, 0xFE	; 254
    1202:	a3 0f       	add	r26, r19
    1204:	b1 1d       	adc	r27, r1
    1206:	2c 93       	st	X, r18
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	f3 cf       	rjmp	.-26     	; 0x11f2 <twi_transmit+0x20>
    120c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_txBufferLength>
    1210:	68 0f       	add	r22, r24
    1212:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <twi_txBufferLength>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	08 95       	ret
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	08 95       	ret
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	08 95       	ret

00001222 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1222:	85 ed       	ldi	r24, 0xD5	; 213
    1224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1228:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    122c:	84 fd       	sbrc	r24, 4
    122e:	fc cf       	rjmp	.-8      	; 0x1228 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1230:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_state>
    1234:	08 95       	ret

00001236 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1236:	85 ec       	ldi	r24, 0xC5	; 197
    1238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    123c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_state>
    1240:	08 95       	ret

00001242 <__vector_24>:
}

ISR(TWI_vect)
{
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	11 24       	eor	r1, r1
    124c:	2f 93       	push	r18
    124e:	3f 93       	push	r19
    1250:	4f 93       	push	r20
    1252:	5f 93       	push	r21
    1254:	6f 93       	push	r22
    1256:	7f 93       	push	r23
    1258:	8f 93       	push	r24
    125a:	9f 93       	push	r25
    125c:	af 93       	push	r26
    125e:	bf 93       	push	r27
    1260:	ef 93       	push	r30
    1262:	ff 93       	push	r31
  switch(TW_STATUS){
    1264:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1268:	88 7f       	andi	r24, 0xF8	; 248
    126a:	80 36       	cpi	r24, 0x60	; 96
    126c:	09 f4       	brne	.+2      	; 0x1270 <__vector_24+0x2e>
    126e:	9e c0       	rjmp	.+316    	; 0x13ac <__vector_24+0x16a>
    1270:	78 f5       	brcc	.+94     	; 0x12d0 <__vector_24+0x8e>
    1272:	88 32       	cpi	r24, 0x28	; 40
    1274:	09 f4       	brne	.+2      	; 0x1278 <__vector_24+0x36>
    1276:	5d c0       	rjmp	.+186    	; 0x1332 <__vector_24+0xf0>
    1278:	90 f4       	brcc	.+36     	; 0x129e <__vector_24+0x5c>
    127a:	80 31       	cpi	r24, 0x10	; 16
    127c:	09 f4       	brne	.+2      	; 0x1280 <__vector_24+0x3e>
    127e:	56 c0       	rjmp	.+172    	; 0x132c <__vector_24+0xea>
    1280:	38 f4       	brcc	.+14     	; 0x1290 <__vector_24+0x4e>
    1282:	88 23       	and	r24, r24
    1284:	09 f4       	brne	.+2      	; 0x1288 <__vector_24+0x46>
    1286:	f5 c0       	rjmp	.+490    	; 0x1472 <__vector_24+0x230>
    1288:	88 30       	cpi	r24, 0x08	; 8
    128a:	09 f4       	brne	.+2      	; 0x128e <__vector_24+0x4c>
    128c:	4f c0       	rjmp	.+158    	; 0x132c <__vector_24+0xea>
    128e:	f5 c0       	rjmp	.+490    	; 0x147a <__vector_24+0x238>
    1290:	88 31       	cpi	r24, 0x18	; 24
    1292:	09 f4       	brne	.+2      	; 0x1296 <__vector_24+0x54>
    1294:	4e c0       	rjmp	.+156    	; 0x1332 <__vector_24+0xf0>
    1296:	80 32       	cpi	r24, 0x20	; 32
    1298:	09 f4       	brne	.+2      	; 0x129c <__vector_24+0x5a>
    129a:	5f c0       	rjmp	.+190    	; 0x135a <__vector_24+0x118>
    129c:	ee c0       	rjmp	.+476    	; 0x147a <__vector_24+0x238>
    129e:	80 34       	cpi	r24, 0x40	; 64
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <__vector_24+0x62>
    12a2:	6a c0       	rjmp	.+212    	; 0x1378 <__vector_24+0x136>
    12a4:	58 f4       	brcc	.+22     	; 0x12bc <__vector_24+0x7a>
    12a6:	80 33       	cpi	r24, 0x30	; 48
    12a8:	09 f4       	brne	.+2      	; 0x12ac <__vector_24+0x6a>
    12aa:	57 c0       	rjmp	.+174    	; 0x135a <__vector_24+0x118>
    12ac:	88 33       	cpi	r24, 0x38	; 56
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <__vector_24+0x70>
    12b0:	e4 c0       	rjmp	.+456    	; 0x147a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    12b2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <twi_error>
      twi_releaseBus();
    12b6:	0e 94 1b 09 	call	0x1236	; 0x1236 <twi_releaseBus>
      break;
    12ba:	df c0       	rjmp	.+446    	; 0x147a <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    12bc:	80 35       	cpi	r24, 0x50	; 80
    12be:	09 f4       	brne	.+2      	; 0x12c2 <__vector_24+0x80>
    12c0:	4f c0       	rjmp	.+158    	; 0x1360 <__vector_24+0x11e>
    12c2:	88 35       	cpi	r24, 0x58	; 88
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <__vector_24+0x86>
    12c6:	5d c0       	rjmp	.+186    	; 0x1382 <__vector_24+0x140>
    12c8:	88 34       	cpi	r24, 0x48	; 72
    12ca:	09 f0       	breq	.+2      	; 0x12ce <__vector_24+0x8c>
    12cc:	d6 c0       	rjmp	.+428    	; 0x147a <__vector_24+0x238>
    12ce:	d3 c0       	rjmp	.+422    	; 0x1476 <__vector_24+0x234>
    12d0:	88 39       	cpi	r24, 0x98	; 152
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <__vector_24+0x94>
    12d4:	c4 c0       	rjmp	.+392    	; 0x145e <__vector_24+0x21c>
    12d6:	a8 f4       	brcc	.+42     	; 0x1302 <__vector_24+0xc0>
    12d8:	88 37       	cpi	r24, 0x78	; 120
    12da:	09 f4       	brne	.+2      	; 0x12de <__vector_24+0x9c>
    12dc:	67 c0       	rjmp	.+206    	; 0x13ac <__vector_24+0x16a>
    12de:	38 f4       	brcc	.+14     	; 0x12ee <__vector_24+0xac>
    12e0:	88 36       	cpi	r24, 0x68	; 104
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <__vector_24+0xa4>
    12e4:	63 c0       	rjmp	.+198    	; 0x13ac <__vector_24+0x16a>
    12e6:	80 37       	cpi	r24, 0x70	; 112
    12e8:	09 f4       	brne	.+2      	; 0x12ec <__vector_24+0xaa>
    12ea:	60 c0       	rjmp	.+192    	; 0x13ac <__vector_24+0x16a>
    12ec:	c6 c0       	rjmp	.+396    	; 0x147a <__vector_24+0x238>
    12ee:	88 38       	cpi	r24, 0x88	; 136
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <__vector_24+0xb2>
    12f2:	b5 c0       	rjmp	.+362    	; 0x145e <__vector_24+0x21c>
    12f4:	80 39       	cpi	r24, 0x90	; 144
    12f6:	09 f4       	brne	.+2      	; 0x12fa <__vector_24+0xb8>
    12f8:	5f c0       	rjmp	.+190    	; 0x13b8 <__vector_24+0x176>
    12fa:	80 38       	cpi	r24, 0x80	; 128
    12fc:	09 f0       	breq	.+2      	; 0x1300 <__vector_24+0xbe>
    12fe:	bd c0       	rjmp	.+378    	; 0x147a <__vector_24+0x238>
    1300:	5b c0       	rjmp	.+182    	; 0x13b8 <__vector_24+0x176>
    1302:	80 3b       	cpi	r24, 0xB0	; 176
    1304:	09 f4       	brne	.+2      	; 0x1308 <__vector_24+0xc6>
    1306:	83 c0       	rjmp	.+262    	; 0x140e <__vector_24+0x1cc>
    1308:	38 f4       	brcc	.+14     	; 0x1318 <__vector_24+0xd6>
    130a:	80 3a       	cpi	r24, 0xA0	; 160
    130c:	09 f4       	brne	.+2      	; 0x1310 <__vector_24+0xce>
    130e:	66 c0       	rjmp	.+204    	; 0x13dc <__vector_24+0x19a>
    1310:	88 3a       	cpi	r24, 0xA8	; 168
    1312:	09 f4       	brne	.+2      	; 0x1316 <__vector_24+0xd4>
    1314:	7c c0       	rjmp	.+248    	; 0x140e <__vector_24+0x1cc>
    1316:	b1 c0       	rjmp	.+354    	; 0x147a <__vector_24+0x238>
    1318:	80 3c       	cpi	r24, 0xC0	; 192
    131a:	09 f4       	brne	.+2      	; 0x131e <__vector_24+0xdc>
    131c:	a4 c0       	rjmp	.+328    	; 0x1466 <__vector_24+0x224>
    131e:	88 3c       	cpi	r24, 0xC8	; 200
    1320:	09 f4       	brne	.+2      	; 0x1324 <__vector_24+0xe2>
    1322:	a1 c0       	rjmp	.+322    	; 0x1466 <__vector_24+0x224>
    1324:	88 3b       	cpi	r24, 0xB8	; 184
    1326:	09 f4       	brne	.+2      	; 0x132a <__vector_24+0xe8>
    1328:	87 c0       	rjmp	.+270    	; 0x1438 <__vector_24+0x1f6>
    132a:	a7 c0       	rjmp	.+334    	; 0x147a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    132c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <twi_slarw>
    1330:	10 c0       	rjmp	.+32     	; 0x1352 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1332:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
    1336:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <twi_masterBufferLength>
    133a:	98 17       	cp	r25, r24
    133c:	70 f5       	brcc	.+92     	; 0x139a <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    133e:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	8e 0f       	add	r24, r30
    1346:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_masterBufferIndex>
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	ec 54       	subi	r30, 0x4C	; 76
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	80 81       	ld	r24, Z
    1352:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1356:	85 ec       	ldi	r24, 0xC5	; 197
    1358:	83 c0       	rjmp	.+262    	; 0x1460 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    135a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <twi_error>
    135e:	8b c0       	rjmp	.+278    	; 0x1476 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1360:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	8e 0f       	add	r24, r30
    1368:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_masterBufferIndex>
    136c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	ec 54       	subi	r30, 0x4C	; 76
    1374:	fe 4f       	sbci	r31, 0xFE	; 254
    1376:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1378:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
    137c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <twi_masterBufferLength>
    1380:	6b c0       	rjmp	.+214    	; 0x1458 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1382:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	8e 0f       	add	r24, r30
    138a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_masterBufferIndex>
    138e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	ec 54       	subi	r30, 0x4C	; 76
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	80 83       	st	Z, r24
	if (twi_sendStop)
    139a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_sendStop>
    139e:	81 11       	cpse	r24, r1
    13a0:	6a c0       	rjmp	.+212    	; 0x1476 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    13a8:	84 ea       	ldi	r24, 0xA4	; 164
    13aa:	5e c0       	rjmp	.+188    	; 0x1468 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    13b2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <twi_rxBufferIndex>
    13b6:	cf cf       	rjmp	.-98     	; 0x1356 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    13b8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <twi_rxBufferIndex>
    13bc:	80 32       	cpi	r24, 0x20	; 32
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <__vector_24+0x180>
    13c0:	4e c0       	rjmp	.+156    	; 0x145e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    13c2:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <twi_rxBufferIndex>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	8e 0f       	add	r24, r30
    13ca:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <twi_rxBufferIndex>
    13ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	e0 59       	subi	r30, 0x90	; 144
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	80 83       	st	Z, r24
    13da:	bd cf       	rjmp	.-134    	; 0x1356 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    13dc:	0e 94 1b 09 	call	0x1236	; 0x1236 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    13e0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <twi_rxBufferIndex>
    13e4:	80 32       	cpi	r24, 0x20	; 32
    13e6:	30 f4       	brcc	.+12     	; 0x13f4 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    13e8:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <twi_rxBufferIndex>
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	e0 59       	subi	r30, 0x90	; 144
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    13f4:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <twi_rxBufferIndex>
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <twi_onSlaveReceive>
    13fe:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <twi_onSlaveReceive+0x1>
    1402:	80 e7       	ldi	r24, 0x70	; 112
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1408:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <twi_rxBufferIndex>
      break;
    140c:	36 c0       	rjmp	.+108    	; 0x147a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    140e:	84 e0       	ldi	r24, 0x04	; 4
    1410:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1414:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1418:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    141c:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <twi_onSlaveTransmit>
    1420:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <twi_onSlaveTransmit+0x1>
    1424:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1426:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_txBufferLength>
    142a:	81 11       	cpse	r24, r1
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1434:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1438:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <twi_txBufferIndex>
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	8e 0f       	add	r24, r30
    1440:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <twi_txBufferIndex>
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	ee 56       	subi	r30, 0x6E	; 110
    1448:	fe 4f       	sbci	r31, 0xFE	; 254
    144a:	80 81       	ld	r24, Z
    144c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1450:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <twi_txBufferIndex>
    1454:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_txBufferLength>
    1458:	98 17       	cp	r25, r24
    145a:	08 f4       	brcc	.+2      	; 0x145e <__vector_24+0x21c>
    145c:	7c cf       	rjmp	.-264    	; 0x1356 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    145e:	85 e8       	ldi	r24, 0x85	; 133
    1460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1464:	0a c0       	rjmp	.+20     	; 0x147a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1466:	85 ec       	ldi	r24, 0xC5	; 197
    1468:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    146c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_state>
      break;
    1470:	04 c0       	rjmp	.+8      	; 0x147a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1472:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <twi_error>
      twi_stop();
    1476:	0e 94 11 09 	call	0x1222	; 0x1222 <twi_stop>
      break;
  }
}
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    149c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_ZN7TwoWire14rxBufferLengthE>
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <_ZN7TwoWire13rxBufferIndexE>
    14a6:	82 1b       	sub	r24, r18
    14a8:	91 09       	sbc	r25, r1
    14aa:	08 95       	ret

000014ac <_ZN7TwoWire4readEv>:
    14ac:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <_ZN7TwoWire13rxBufferIndexE>
    14b0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_ZN7TwoWire14rxBufferLengthE>
    14b4:	98 17       	cp	r25, r24
    14b6:	50 f4       	brcc	.+20     	; 0x14cc <_ZN7TwoWire4readEv+0x20>
    14b8:	e9 2f       	mov	r30, r25
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	e2 5f       	subi	r30, 0xF2	; 242
    14be:	fd 4f       	sbci	r31, 0xFD	; 253
    14c0:	20 81       	ld	r18, Z
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	9f 5f       	subi	r25, 0xFF	; 255
    14c6:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <_ZN7TwoWire13rxBufferIndexE>
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <_ZN7TwoWire4readEv+0x24>
    14cc:	2f ef       	ldi	r18, 0xFF	; 255
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	c9 01       	movw	r24, r18
    14d2:	08 95       	ret

000014d4 <_ZN7TwoWire4peekEv>:
    14d4:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <_ZN7TwoWire13rxBufferIndexE>
    14d8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_ZN7TwoWire14rxBufferLengthE>
    14dc:	e8 17       	cp	r30, r24
    14de:	30 f4       	brcc	.+12     	; 0x14ec <_ZN7TwoWire4peekEv+0x18>
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	e2 5f       	subi	r30, 0xF2	; 242
    14e4:	fd 4f       	sbci	r31, 0xFD	; 253
    14e6:	80 81       	ld	r24, Z
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	08 95       	ret
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	9f ef       	ldi	r25, 0xFF	; 255
    14f0:	08 95       	ret

000014f2 <_ZN7TwoWire5flushEv>:
    14f2:	08 95       	ret

000014f4 <_ZN7TwoWire5writeEPKhj>:
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	7c 01       	movw	r14, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8a 01       	movw	r16, r20
    150a:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <_ZN7TwoWire12transmittingE>
    150e:	22 23       	and	r18, r18
    1510:	89 f0       	breq	.+34     	; 0x1534 <_ZN7TwoWire5writeEPKhj+0x40>
    1512:	eb 01       	movw	r28, r22
    1514:	6b 01       	movw	r12, r22
    1516:	c4 0e       	add	r12, r20
    1518:	d5 1e       	adc	r13, r21
    151a:	cc 15       	cp	r28, r12
    151c:	dd 05       	cpc	r29, r13
    151e:	69 f0       	breq	.+26     	; 0x153a <_ZN7TwoWire5writeEPKhj+0x46>
    1520:	69 91       	ld	r22, Y+
    1522:	d7 01       	movw	r26, r14
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	01 90       	ld	r0, Z+
    152a:	f0 81       	ld	r31, Z
    152c:	e0 2d       	mov	r30, r0
    152e:	c7 01       	movw	r24, r14
    1530:	09 95       	icall
    1532:	f3 cf       	rjmp	.-26     	; 0x151a <_ZN7TwoWire5writeEPKhj+0x26>
    1534:	64 2f       	mov	r22, r20
    1536:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <twi_transmit>
    153a:	c8 01       	movw	r24, r16
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	08 95       	ret

0000154e <_ZN7TwoWire5writeEh>:
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	1f 92       	push	r1
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	69 83       	std	Y+1, r22	; 0x01
    155a:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <_ZN7TwoWire12transmittingE>
    155e:	22 23       	and	r18, r18
    1560:	d1 f0       	breq	.+52     	; 0x1596 <_ZN7TwoWire5writeEh+0x48>
    1562:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <_ZN7TwoWire14txBufferLengthE>
    1566:	20 32       	cpi	r18, 0x20	; 32
    1568:	40 f0       	brcs	.+16     	; 0x157a <_ZN7TwoWire5writeEh+0x2c>
    156a:	21 e0       	ldi	r18, 0x01	; 1
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	fc 01       	movw	r30, r24
    1570:	33 83       	std	Z+3, r19	; 0x03
    1572:	22 83       	std	Z+2, r18	; 0x02
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	15 c0       	rjmp	.+42     	; 0x15a4 <_ZN7TwoWire5writeEh+0x56>
    157a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_ZN7TwoWire13txBufferIndexE>
    157e:	e8 2f       	mov	r30, r24
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	e5 51       	subi	r30, 0x15	; 21
    1584:	fe 4f       	sbci	r31, 0xFE	; 254
    1586:	99 81       	ldd	r25, Y+1	; 0x01
    1588:	90 83       	st	Z, r25
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <_ZN7TwoWire13txBufferIndexE>
    1590:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <_ZN7TwoWire14txBufferLengthE>
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <_ZN7TwoWire5writeEh+0x52>
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <twi_transmit>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0f 90       	pop	r0
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <_ZN7TwoWireC1Ev>:
    15ac:	fc 01       	movw	r30, r24
    15ae:	13 82       	std	Z+3, r1	; 0x03
    15b0:	12 82       	std	Z+2, r1	; 0x02
    15b2:	88 ee       	ldi	r24, 0xE8	; 232
    15b4:	93 e0       	ldi	r25, 0x03	; 3
    15b6:	a0 e0       	ldi	r26, 0x00	; 0
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	84 83       	std	Z+4, r24	; 0x04
    15bc:	95 83       	std	Z+5, r25	; 0x05
    15be:	a6 83       	std	Z+6, r26	; 0x06
    15c0:	b7 83       	std	Z+7, r27	; 0x07
    15c2:	82 e3       	ldi	r24, 0x32	; 50
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	91 83       	std	Z+1, r25	; 0x01
    15c8:	80 83       	st	Z, r24
    15ca:	08 95       	ret

000015cc <_ZN7TwoWire5beginEv>:
    15cc:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <_ZN7TwoWire13rxBufferIndexE>
    15d0:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <_ZN7TwoWire14rxBufferLengthE>
    15d4:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <_ZN7TwoWire13txBufferIndexE>
    15d8:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <_ZN7TwoWire14txBufferLengthE>
    15dc:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <twi_init>

000015e0 <_ZN7TwoWire17beginTransmissionEh>:
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <_ZN7TwoWire12transmittingE>
    15e6:	60 93 0b 02 	sts	0x020B, r22	; 0x80020b <_ZN7TwoWire9txAddressE>
    15ea:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <_ZN7TwoWire13txBufferIndexE>
    15ee:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <_ZN7TwoWire14txBufferLengthE>
    15f2:	08 95       	ret

000015f4 <_ZN7TwoWire15endTransmissionEh>:
    15f4:	0f 93       	push	r16
    15f6:	06 2f       	mov	r16, r22
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    15fa:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <_ZN7TwoWire14txBufferLengthE>
    15fe:	6b ee       	ldi	r22, 0xEB	; 235
    1600:	71 e0       	ldi	r23, 0x01	; 1
    1602:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZN7TwoWire9txAddressE>
    1606:	0e 94 93 08 	call	0x1126	; 0x1126 <twi_writeTo>
    160a:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <_ZN7TwoWire13txBufferIndexE>
    160e:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <_ZN7TwoWire14txBufferLengthE>
    1612:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <_ZN7TwoWire12transmittingE>
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret

0000161a <_ZN7TwoWire15endTransmissionEv>:
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <_ZN7TwoWire15endTransmissionEh>

00001620 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1620:	8c ed       	ldi	r24, 0xDC	; 220
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <_ZN7TwoWireC1Ev>

00001628 <_ZN11ThermometerC1Eiii>:
*/

#include "Thermometer.h"

// default constructor
Thermometer::Thermometer(int pinDO, int pinCS,int pinCLK)
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	8c 01       	movw	r16, r24
    1638:	f6 2e       	mov	r15, r22
    163a:	e4 2e       	mov	r14, r20
    163c:	d2 2e       	mov	r13, r18
{
	_thermocouple = new MAX6675(pinDO, pinCS,pinCLK);
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_Znwj>
    1646:	ec 01       	movw	r28, r24
    1648:	2d 2d       	mov	r18, r13
    164a:	4e 2d       	mov	r20, r14
    164c:	6f 2d       	mov	r22, r15
    164e:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN7MAX6675C1Eaaa>
    1652:	f8 01       	movw	r30, r16
    1654:	d1 83       	std	Z+1, r29	; 0x01
    1656:	c0 83       	st	Z, r28
} //Thermometer
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	08 95       	ret

00001668 <_ZN11Thermometer4ReadEv>:

double Thermometer:: Read() {
	// basic readout test, just print the current temp
	return _thermocouple->readCelsius();
    1668:	fc 01       	movw	r30, r24
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	0c 94 39 08 	jmp	0x1072	; 0x1072 <_ZN7MAX667511readCelsiusEv>

00001672 <__subsf3>:
    1672:	50 58       	subi	r21, 0x80	; 128

00001674 <__addsf3>:
    1674:	bb 27       	eor	r27, r27
    1676:	aa 27       	eor	r26, r26
    1678:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__addsf3x>
    167c:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__fp_round>
    1680:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fp_pscA>
    1684:	38 f0       	brcs	.+14     	; 0x1694 <__addsf3+0x20>
    1686:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_pscB>
    168a:	20 f0       	brcs	.+8      	; 0x1694 <__addsf3+0x20>
    168c:	39 f4       	brne	.+14     	; 0x169c <__addsf3+0x28>
    168e:	9f 3f       	cpi	r25, 0xFF	; 255
    1690:	19 f4       	brne	.+6      	; 0x1698 <__addsf3+0x24>
    1692:	26 f4       	brtc	.+8      	; 0x169c <__addsf3+0x28>
    1694:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__fp_nan>
    1698:	0e f4       	brtc	.+2      	; 0x169c <__addsf3+0x28>
    169a:	e0 95       	com	r30
    169c:	e7 fb       	bst	r30, 7
    169e:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__fp_inf>

000016a2 <__addsf3x>:
    16a2:	e9 2f       	mov	r30, r25
    16a4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__fp_split3>
    16a8:	58 f3       	brcs	.-42     	; 0x1680 <__addsf3+0xc>
    16aa:	ba 17       	cp	r27, r26
    16ac:	62 07       	cpc	r22, r18
    16ae:	73 07       	cpc	r23, r19
    16b0:	84 07       	cpc	r24, r20
    16b2:	95 07       	cpc	r25, r21
    16b4:	20 f0       	brcs	.+8      	; 0x16be <__addsf3x+0x1c>
    16b6:	79 f4       	brne	.+30     	; 0x16d6 <__addsf3x+0x34>
    16b8:	a6 f5       	brtc	.+104    	; 0x1722 <__addsf3x+0x80>
    16ba:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_zero>
    16be:	0e f4       	brtc	.+2      	; 0x16c2 <__addsf3x+0x20>
    16c0:	e0 95       	com	r30
    16c2:	0b 2e       	mov	r0, r27
    16c4:	ba 2f       	mov	r27, r26
    16c6:	a0 2d       	mov	r26, r0
    16c8:	0b 01       	movw	r0, r22
    16ca:	b9 01       	movw	r22, r18
    16cc:	90 01       	movw	r18, r0
    16ce:	0c 01       	movw	r0, r24
    16d0:	ca 01       	movw	r24, r20
    16d2:	a0 01       	movw	r20, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	ff 27       	eor	r31, r31
    16d8:	59 1b       	sub	r21, r25
    16da:	99 f0       	breq	.+38     	; 0x1702 <__addsf3x+0x60>
    16dc:	59 3f       	cpi	r21, 0xF9	; 249
    16de:	50 f4       	brcc	.+20     	; 0x16f4 <__addsf3x+0x52>
    16e0:	50 3e       	cpi	r21, 0xE0	; 224
    16e2:	68 f1       	brcs	.+90     	; 0x173e <__addsf3x+0x9c>
    16e4:	1a 16       	cp	r1, r26
    16e6:	f0 40       	sbci	r31, 0x00	; 0
    16e8:	a2 2f       	mov	r26, r18
    16ea:	23 2f       	mov	r18, r19
    16ec:	34 2f       	mov	r19, r20
    16ee:	44 27       	eor	r20, r20
    16f0:	58 5f       	subi	r21, 0xF8	; 248
    16f2:	f3 cf       	rjmp	.-26     	; 0x16da <__addsf3x+0x38>
    16f4:	46 95       	lsr	r20
    16f6:	37 95       	ror	r19
    16f8:	27 95       	ror	r18
    16fa:	a7 95       	ror	r26
    16fc:	f0 40       	sbci	r31, 0x00	; 0
    16fe:	53 95       	inc	r21
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <__addsf3x+0x52>
    1702:	7e f4       	brtc	.+30     	; 0x1722 <__addsf3x+0x80>
    1704:	1f 16       	cp	r1, r31
    1706:	ba 0b       	sbc	r27, r26
    1708:	62 0b       	sbc	r22, r18
    170a:	73 0b       	sbc	r23, r19
    170c:	84 0b       	sbc	r24, r20
    170e:	ba f0       	brmi	.+46     	; 0x173e <__addsf3x+0x9c>
    1710:	91 50       	subi	r25, 0x01	; 1
    1712:	a1 f0       	breq	.+40     	; 0x173c <__addsf3x+0x9a>
    1714:	ff 0f       	add	r31, r31
    1716:	bb 1f       	adc	r27, r27
    1718:	66 1f       	adc	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	88 1f       	adc	r24, r24
    171e:	c2 f7       	brpl	.-16     	; 0x1710 <__addsf3x+0x6e>
    1720:	0e c0       	rjmp	.+28     	; 0x173e <__addsf3x+0x9c>
    1722:	ba 0f       	add	r27, r26
    1724:	62 1f       	adc	r22, r18
    1726:	73 1f       	adc	r23, r19
    1728:	84 1f       	adc	r24, r20
    172a:	48 f4       	brcc	.+18     	; 0x173e <__addsf3x+0x9c>
    172c:	87 95       	ror	r24
    172e:	77 95       	ror	r23
    1730:	67 95       	ror	r22
    1732:	b7 95       	ror	r27
    1734:	f7 95       	ror	r31
    1736:	9e 3f       	cpi	r25, 0xFE	; 254
    1738:	08 f0       	brcs	.+2      	; 0x173c <__addsf3x+0x9a>
    173a:	b0 cf       	rjmp	.-160    	; 0x169c <__addsf3+0x28>
    173c:	93 95       	inc	r25
    173e:	88 0f       	add	r24, r24
    1740:	08 f0       	brcs	.+2      	; 0x1744 <__addsf3x+0xa2>
    1742:	99 27       	eor	r25, r25
    1744:	ee 0f       	add	r30, r30
    1746:	97 95       	ror	r25
    1748:	87 95       	ror	r24
    174a:	08 95       	ret

0000174c <__cmpsf2>:
    174c:	0e 94 90 0c 	call	0x1920	; 0x1920 <__fp_cmp>
    1750:	08 f4       	brcc	.+2      	; 0x1754 <__cmpsf2+0x8>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	08 95       	ret

00001756 <__divsf3>:
    1756:	0e 94 bf 0b 	call	0x177e	; 0x177e <__divsf3x>
    175a:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__fp_round>
    175e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_pscB>
    1762:	58 f0       	brcs	.+22     	; 0x177a <__divsf3+0x24>
    1764:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fp_pscA>
    1768:	40 f0       	brcs	.+16     	; 0x177a <__divsf3+0x24>
    176a:	29 f4       	brne	.+10     	; 0x1776 <__divsf3+0x20>
    176c:	5f 3f       	cpi	r21, 0xFF	; 255
    176e:	29 f0       	breq	.+10     	; 0x177a <__divsf3+0x24>
    1770:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__fp_inf>
    1774:	51 11       	cpse	r21, r1
    1776:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_szero>
    177a:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__fp_nan>

0000177e <__divsf3x>:
    177e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__fp_split3>
    1782:	68 f3       	brcs	.-38     	; 0x175e <__divsf3+0x8>

00001784 <__divsf3_pse>:
    1784:	99 23       	and	r25, r25
    1786:	b1 f3       	breq	.-20     	; 0x1774 <__divsf3+0x1e>
    1788:	55 23       	and	r21, r21
    178a:	91 f3       	breq	.-28     	; 0x1770 <__divsf3+0x1a>
    178c:	95 1b       	sub	r25, r21
    178e:	55 0b       	sbc	r21, r21
    1790:	bb 27       	eor	r27, r27
    1792:	aa 27       	eor	r26, r26
    1794:	62 17       	cp	r22, r18
    1796:	73 07       	cpc	r23, r19
    1798:	84 07       	cpc	r24, r20
    179a:	38 f0       	brcs	.+14     	; 0x17aa <__divsf3_pse+0x26>
    179c:	9f 5f       	subi	r25, 0xFF	; 255
    179e:	5f 4f       	sbci	r21, 0xFF	; 255
    17a0:	22 0f       	add	r18, r18
    17a2:	33 1f       	adc	r19, r19
    17a4:	44 1f       	adc	r20, r20
    17a6:	aa 1f       	adc	r26, r26
    17a8:	a9 f3       	breq	.-22     	; 0x1794 <__divsf3_pse+0x10>
    17aa:	35 d0       	rcall	.+106    	; 0x1816 <__divsf3_pse+0x92>
    17ac:	0e 2e       	mov	r0, r30
    17ae:	3a f0       	brmi	.+14     	; 0x17be <__divsf3_pse+0x3a>
    17b0:	e0 e8       	ldi	r30, 0x80	; 128
    17b2:	32 d0       	rcall	.+100    	; 0x1818 <__divsf3_pse+0x94>
    17b4:	91 50       	subi	r25, 0x01	; 1
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	e6 95       	lsr	r30
    17ba:	00 1c       	adc	r0, r0
    17bc:	ca f7       	brpl	.-14     	; 0x17b0 <__divsf3_pse+0x2c>
    17be:	2b d0       	rcall	.+86     	; 0x1816 <__divsf3_pse+0x92>
    17c0:	fe 2f       	mov	r31, r30
    17c2:	29 d0       	rcall	.+82     	; 0x1816 <__divsf3_pse+0x92>
    17c4:	66 0f       	add	r22, r22
    17c6:	77 1f       	adc	r23, r23
    17c8:	88 1f       	adc	r24, r24
    17ca:	bb 1f       	adc	r27, r27
    17cc:	26 17       	cp	r18, r22
    17ce:	37 07       	cpc	r19, r23
    17d0:	48 07       	cpc	r20, r24
    17d2:	ab 07       	cpc	r26, r27
    17d4:	b0 e8       	ldi	r27, 0x80	; 128
    17d6:	09 f0       	breq	.+2      	; 0x17da <__divsf3_pse+0x56>
    17d8:	bb 0b       	sbc	r27, r27
    17da:	80 2d       	mov	r24, r0
    17dc:	bf 01       	movw	r22, r30
    17de:	ff 27       	eor	r31, r31
    17e0:	93 58       	subi	r25, 0x83	; 131
    17e2:	5f 4f       	sbci	r21, 0xFF	; 255
    17e4:	3a f0       	brmi	.+14     	; 0x17f4 <__divsf3_pse+0x70>
    17e6:	9e 3f       	cpi	r25, 0xFE	; 254
    17e8:	51 05       	cpc	r21, r1
    17ea:	78 f0       	brcs	.+30     	; 0x180a <__divsf3_pse+0x86>
    17ec:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__fp_inf>
    17f0:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_szero>
    17f4:	5f 3f       	cpi	r21, 0xFF	; 255
    17f6:	e4 f3       	brlt	.-8      	; 0x17f0 <__divsf3_pse+0x6c>
    17f8:	98 3e       	cpi	r25, 0xE8	; 232
    17fa:	d4 f3       	brlt	.-12     	; 0x17f0 <__divsf3_pse+0x6c>
    17fc:	86 95       	lsr	r24
    17fe:	77 95       	ror	r23
    1800:	67 95       	ror	r22
    1802:	b7 95       	ror	r27
    1804:	f7 95       	ror	r31
    1806:	9f 5f       	subi	r25, 0xFF	; 255
    1808:	c9 f7       	brne	.-14     	; 0x17fc <__divsf3_pse+0x78>
    180a:	88 0f       	add	r24, r24
    180c:	91 1d       	adc	r25, r1
    180e:	96 95       	lsr	r25
    1810:	87 95       	ror	r24
    1812:	97 f9       	bld	r25, 7
    1814:	08 95       	ret
    1816:	e1 e0       	ldi	r30, 0x01	; 1
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	bb 1f       	adc	r27, r27
    1820:	62 17       	cp	r22, r18
    1822:	73 07       	cpc	r23, r19
    1824:	84 07       	cpc	r24, r20
    1826:	ba 07       	cpc	r27, r26
    1828:	20 f0       	brcs	.+8      	; 0x1832 <__divsf3_pse+0xae>
    182a:	62 1b       	sub	r22, r18
    182c:	73 0b       	sbc	r23, r19
    182e:	84 0b       	sbc	r24, r20
    1830:	ba 0b       	sbc	r27, r26
    1832:	ee 1f       	adc	r30, r30
    1834:	88 f7       	brcc	.-30     	; 0x1818 <__divsf3_pse+0x94>
    1836:	e0 95       	com	r30
    1838:	08 95       	ret

0000183a <__fixsfsi>:
    183a:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixunssfsi>
    183e:	68 94       	set
    1840:	b1 11       	cpse	r27, r1
    1842:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_szero>
    1846:	08 95       	ret

00001848 <__fixunssfsi>:
    1848:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__fp_splitA>
    184c:	88 f0       	brcs	.+34     	; 0x1870 <__fixunssfsi+0x28>
    184e:	9f 57       	subi	r25, 0x7F	; 127
    1850:	98 f0       	brcs	.+38     	; 0x1878 <__fixunssfsi+0x30>
    1852:	b9 2f       	mov	r27, r25
    1854:	99 27       	eor	r25, r25
    1856:	b7 51       	subi	r27, 0x17	; 23
    1858:	b0 f0       	brcs	.+44     	; 0x1886 <__fixunssfsi+0x3e>
    185a:	e1 f0       	breq	.+56     	; 0x1894 <__fixunssfsi+0x4c>
    185c:	66 0f       	add	r22, r22
    185e:	77 1f       	adc	r23, r23
    1860:	88 1f       	adc	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	1a f0       	brmi	.+6      	; 0x186c <__fixunssfsi+0x24>
    1866:	ba 95       	dec	r27
    1868:	c9 f7       	brne	.-14     	; 0x185c <__fixunssfsi+0x14>
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <__fixunssfsi+0x4c>
    186c:	b1 30       	cpi	r27, 0x01	; 1
    186e:	91 f0       	breq	.+36     	; 0x1894 <__fixunssfsi+0x4c>
    1870:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__fp_zero>
    1874:	b1 e0       	ldi	r27, 0x01	; 1
    1876:	08 95       	ret
    1878:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_zero>
    187c:	67 2f       	mov	r22, r23
    187e:	78 2f       	mov	r23, r24
    1880:	88 27       	eor	r24, r24
    1882:	b8 5f       	subi	r27, 0xF8	; 248
    1884:	39 f0       	breq	.+14     	; 0x1894 <__fixunssfsi+0x4c>
    1886:	b9 3f       	cpi	r27, 0xF9	; 249
    1888:	cc f3       	brlt	.-14     	; 0x187c <__fixunssfsi+0x34>
    188a:	86 95       	lsr	r24
    188c:	77 95       	ror	r23
    188e:	67 95       	ror	r22
    1890:	b3 95       	inc	r27
    1892:	d9 f7       	brne	.-10     	; 0x188a <__fixunssfsi+0x42>
    1894:	3e f4       	brtc	.+14     	; 0x18a4 <__fixunssfsi+0x5c>
    1896:	90 95       	com	r25
    1898:	80 95       	com	r24
    189a:	70 95       	com	r23
    189c:	61 95       	neg	r22
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	8f 4f       	sbci	r24, 0xFF	; 255
    18a2:	9f 4f       	sbci	r25, 0xFF	; 255
    18a4:	08 95       	ret

000018a6 <__floatunsisf>:
    18a6:	e8 94       	clt
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <__floatsisf+0x12>

000018aa <__floatsisf>:
    18aa:	97 fb       	bst	r25, 7
    18ac:	3e f4       	brtc	.+14     	; 0x18bc <__floatsisf+0x12>
    18ae:	90 95       	com	r25
    18b0:	80 95       	com	r24
    18b2:	70 95       	com	r23
    18b4:	61 95       	neg	r22
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	99 23       	and	r25, r25
    18be:	a9 f0       	breq	.+42     	; 0x18ea <__floatsisf+0x40>
    18c0:	f9 2f       	mov	r31, r25
    18c2:	96 e9       	ldi	r25, 0x96	; 150
    18c4:	bb 27       	eor	r27, r27
    18c6:	93 95       	inc	r25
    18c8:	f6 95       	lsr	r31
    18ca:	87 95       	ror	r24
    18cc:	77 95       	ror	r23
    18ce:	67 95       	ror	r22
    18d0:	b7 95       	ror	r27
    18d2:	f1 11       	cpse	r31, r1
    18d4:	f8 cf       	rjmp	.-16     	; 0x18c6 <__floatsisf+0x1c>
    18d6:	fa f4       	brpl	.+62     	; 0x1916 <__floatsisf+0x6c>
    18d8:	bb 0f       	add	r27, r27
    18da:	11 f4       	brne	.+4      	; 0x18e0 <__floatsisf+0x36>
    18dc:	60 ff       	sbrs	r22, 0
    18de:	1b c0       	rjmp	.+54     	; 0x1916 <__floatsisf+0x6c>
    18e0:	6f 5f       	subi	r22, 0xFF	; 255
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	16 c0       	rjmp	.+44     	; 0x1916 <__floatsisf+0x6c>
    18ea:	88 23       	and	r24, r24
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <__floatsisf+0x48>
    18ee:	96 e9       	ldi	r25, 0x96	; 150
    18f0:	11 c0       	rjmp	.+34     	; 0x1914 <__floatsisf+0x6a>
    18f2:	77 23       	and	r23, r23
    18f4:	21 f0       	breq	.+8      	; 0x18fe <__floatsisf+0x54>
    18f6:	9e e8       	ldi	r25, 0x8E	; 142
    18f8:	87 2f       	mov	r24, r23
    18fa:	76 2f       	mov	r23, r22
    18fc:	05 c0       	rjmp	.+10     	; 0x1908 <__floatsisf+0x5e>
    18fe:	66 23       	and	r22, r22
    1900:	71 f0       	breq	.+28     	; 0x191e <__floatsisf+0x74>
    1902:	96 e8       	ldi	r25, 0x86	; 134
    1904:	86 2f       	mov	r24, r22
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	2a f0       	brmi	.+10     	; 0x1916 <__floatsisf+0x6c>
    190c:	9a 95       	dec	r25
    190e:	66 0f       	add	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	88 1f       	adc	r24, r24
    1914:	da f7       	brpl	.-10     	; 0x190c <__floatsisf+0x62>
    1916:	88 0f       	add	r24, r24
    1918:	96 95       	lsr	r25
    191a:	87 95       	ror	r24
    191c:	97 f9       	bld	r25, 7
    191e:	08 95       	ret

00001920 <__fp_cmp>:
    1920:	99 0f       	add	r25, r25
    1922:	00 08       	sbc	r0, r0
    1924:	55 0f       	add	r21, r21
    1926:	aa 0b       	sbc	r26, r26
    1928:	e0 e8       	ldi	r30, 0x80	; 128
    192a:	fe ef       	ldi	r31, 0xFE	; 254
    192c:	16 16       	cp	r1, r22
    192e:	17 06       	cpc	r1, r23
    1930:	e8 07       	cpc	r30, r24
    1932:	f9 07       	cpc	r31, r25
    1934:	c0 f0       	brcs	.+48     	; 0x1966 <__fp_cmp+0x46>
    1936:	12 16       	cp	r1, r18
    1938:	13 06       	cpc	r1, r19
    193a:	e4 07       	cpc	r30, r20
    193c:	f5 07       	cpc	r31, r21
    193e:	98 f0       	brcs	.+38     	; 0x1966 <__fp_cmp+0x46>
    1940:	62 1b       	sub	r22, r18
    1942:	73 0b       	sbc	r23, r19
    1944:	84 0b       	sbc	r24, r20
    1946:	95 0b       	sbc	r25, r21
    1948:	39 f4       	brne	.+14     	; 0x1958 <__fp_cmp+0x38>
    194a:	0a 26       	eor	r0, r26
    194c:	61 f0       	breq	.+24     	; 0x1966 <__fp_cmp+0x46>
    194e:	23 2b       	or	r18, r19
    1950:	24 2b       	or	r18, r20
    1952:	25 2b       	or	r18, r21
    1954:	21 f4       	brne	.+8      	; 0x195e <__fp_cmp+0x3e>
    1956:	08 95       	ret
    1958:	0a 26       	eor	r0, r26
    195a:	09 f4       	brne	.+2      	; 0x195e <__fp_cmp+0x3e>
    195c:	a1 40       	sbci	r26, 0x01	; 1
    195e:	a6 95       	lsr	r26
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	81 1d       	adc	r24, r1
    1964:	81 1d       	adc	r24, r1
    1966:	08 95       	ret

00001968 <__fp_inf>:
    1968:	97 f9       	bld	r25, 7
    196a:	9f 67       	ori	r25, 0x7F	; 127
    196c:	80 e8       	ldi	r24, 0x80	; 128
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	08 95       	ret

00001974 <__fp_nan>:
    1974:	9f ef       	ldi	r25, 0xFF	; 255
    1976:	80 ec       	ldi	r24, 0xC0	; 192
    1978:	08 95       	ret

0000197a <__fp_pscA>:
    197a:	00 24       	eor	r0, r0
    197c:	0a 94       	dec	r0
    197e:	16 16       	cp	r1, r22
    1980:	17 06       	cpc	r1, r23
    1982:	18 06       	cpc	r1, r24
    1984:	09 06       	cpc	r0, r25
    1986:	08 95       	ret

00001988 <__fp_pscB>:
    1988:	00 24       	eor	r0, r0
    198a:	0a 94       	dec	r0
    198c:	12 16       	cp	r1, r18
    198e:	13 06       	cpc	r1, r19
    1990:	14 06       	cpc	r1, r20
    1992:	05 06       	cpc	r0, r21
    1994:	08 95       	ret

00001996 <__fp_round>:
    1996:	09 2e       	mov	r0, r25
    1998:	03 94       	inc	r0
    199a:	00 0c       	add	r0, r0
    199c:	11 f4       	brne	.+4      	; 0x19a2 <__fp_round+0xc>
    199e:	88 23       	and	r24, r24
    19a0:	52 f0       	brmi	.+20     	; 0x19b6 <__fp_round+0x20>
    19a2:	bb 0f       	add	r27, r27
    19a4:	40 f4       	brcc	.+16     	; 0x19b6 <__fp_round+0x20>
    19a6:	bf 2b       	or	r27, r31
    19a8:	11 f4       	brne	.+4      	; 0x19ae <__fp_round+0x18>
    19aa:	60 ff       	sbrs	r22, 0
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <__fp_round+0x20>
    19ae:	6f 5f       	subi	r22, 0xFF	; 255
    19b0:	7f 4f       	sbci	r23, 0xFF	; 255
    19b2:	8f 4f       	sbci	r24, 0xFF	; 255
    19b4:	9f 4f       	sbci	r25, 0xFF	; 255
    19b6:	08 95       	ret

000019b8 <__fp_split3>:
    19b8:	57 fd       	sbrc	r21, 7
    19ba:	90 58       	subi	r25, 0x80	; 128
    19bc:	44 0f       	add	r20, r20
    19be:	55 1f       	adc	r21, r21
    19c0:	59 f0       	breq	.+22     	; 0x19d8 <__fp_splitA+0x10>
    19c2:	5f 3f       	cpi	r21, 0xFF	; 255
    19c4:	71 f0       	breq	.+28     	; 0x19e2 <__fp_splitA+0x1a>
    19c6:	47 95       	ror	r20

000019c8 <__fp_splitA>:
    19c8:	88 0f       	add	r24, r24
    19ca:	97 fb       	bst	r25, 7
    19cc:	99 1f       	adc	r25, r25
    19ce:	61 f0       	breq	.+24     	; 0x19e8 <__fp_splitA+0x20>
    19d0:	9f 3f       	cpi	r25, 0xFF	; 255
    19d2:	79 f0       	breq	.+30     	; 0x19f2 <__fp_splitA+0x2a>
    19d4:	87 95       	ror	r24
    19d6:	08 95       	ret
    19d8:	12 16       	cp	r1, r18
    19da:	13 06       	cpc	r1, r19
    19dc:	14 06       	cpc	r1, r20
    19de:	55 1f       	adc	r21, r21
    19e0:	f2 cf       	rjmp	.-28     	; 0x19c6 <__fp_split3+0xe>
    19e2:	46 95       	lsr	r20
    19e4:	f1 df       	rcall	.-30     	; 0x19c8 <__fp_splitA>
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <__fp_splitA+0x30>
    19e8:	16 16       	cp	r1, r22
    19ea:	17 06       	cpc	r1, r23
    19ec:	18 06       	cpc	r1, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	f1 cf       	rjmp	.-30     	; 0x19d4 <__fp_splitA+0xc>
    19f2:	86 95       	lsr	r24
    19f4:	71 05       	cpc	r23, r1
    19f6:	61 05       	cpc	r22, r1
    19f8:	08 94       	sec
    19fa:	08 95       	ret

000019fc <__fp_zero>:
    19fc:	e8 94       	clt

000019fe <__fp_szero>:
    19fe:	bb 27       	eor	r27, r27
    1a00:	66 27       	eor	r22, r22
    1a02:	77 27       	eor	r23, r23
    1a04:	cb 01       	movw	r24, r22
    1a06:	97 f9       	bld	r25, 7
    1a08:	08 95       	ret

00001a0a <__gesf2>:
    1a0a:	0e 94 90 0c 	call	0x1920	; 0x1920 <__fp_cmp>
    1a0e:	08 f4       	brcc	.+2      	; 0x1a12 <__gesf2+0x8>
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	08 95       	ret

00001a14 <__mulsf3>:
    1a14:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__mulsf3x>
    1a18:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__fp_round>
    1a1c:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fp_pscA>
    1a20:	38 f0       	brcs	.+14     	; 0x1a30 <__mulsf3+0x1c>
    1a22:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_pscB>
    1a26:	20 f0       	brcs	.+8      	; 0x1a30 <__mulsf3+0x1c>
    1a28:	95 23       	and	r25, r21
    1a2a:	11 f0       	breq	.+4      	; 0x1a30 <__mulsf3+0x1c>
    1a2c:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__fp_inf>
    1a30:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__fp_nan>
    1a34:	11 24       	eor	r1, r1
    1a36:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_szero>

00001a3a <__mulsf3x>:
    1a3a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__fp_split3>
    1a3e:	70 f3       	brcs	.-36     	; 0x1a1c <__mulsf3+0x8>

00001a40 <__mulsf3_pse>:
    1a40:	95 9f       	mul	r25, r21
    1a42:	c1 f3       	breq	.-16     	; 0x1a34 <__mulsf3+0x20>
    1a44:	95 0f       	add	r25, r21
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	55 1f       	adc	r21, r21
    1a4a:	62 9f       	mul	r22, r18
    1a4c:	f0 01       	movw	r30, r0
    1a4e:	72 9f       	mul	r23, r18
    1a50:	bb 27       	eor	r27, r27
    1a52:	f0 0d       	add	r31, r0
    1a54:	b1 1d       	adc	r27, r1
    1a56:	63 9f       	mul	r22, r19
    1a58:	aa 27       	eor	r26, r26
    1a5a:	f0 0d       	add	r31, r0
    1a5c:	b1 1d       	adc	r27, r1
    1a5e:	aa 1f       	adc	r26, r26
    1a60:	64 9f       	mul	r22, r20
    1a62:	66 27       	eor	r22, r22
    1a64:	b0 0d       	add	r27, r0
    1a66:	a1 1d       	adc	r26, r1
    1a68:	66 1f       	adc	r22, r22
    1a6a:	82 9f       	mul	r24, r18
    1a6c:	22 27       	eor	r18, r18
    1a6e:	b0 0d       	add	r27, r0
    1a70:	a1 1d       	adc	r26, r1
    1a72:	62 1f       	adc	r22, r18
    1a74:	73 9f       	mul	r23, r19
    1a76:	b0 0d       	add	r27, r0
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	62 1f       	adc	r22, r18
    1a7c:	83 9f       	mul	r24, r19
    1a7e:	a0 0d       	add	r26, r0
    1a80:	61 1d       	adc	r22, r1
    1a82:	22 1f       	adc	r18, r18
    1a84:	74 9f       	mul	r23, r20
    1a86:	33 27       	eor	r19, r19
    1a88:	a0 0d       	add	r26, r0
    1a8a:	61 1d       	adc	r22, r1
    1a8c:	23 1f       	adc	r18, r19
    1a8e:	84 9f       	mul	r24, r20
    1a90:	60 0d       	add	r22, r0
    1a92:	21 1d       	adc	r18, r1
    1a94:	82 2f       	mov	r24, r18
    1a96:	76 2f       	mov	r23, r22
    1a98:	6a 2f       	mov	r22, r26
    1a9a:	11 24       	eor	r1, r1
    1a9c:	9f 57       	subi	r25, 0x7F	; 127
    1a9e:	50 40       	sbci	r21, 0x00	; 0
    1aa0:	9a f0       	brmi	.+38     	; 0x1ac8 <__mulsf3_pse+0x88>
    1aa2:	f1 f0       	breq	.+60     	; 0x1ae0 <__mulsf3_pse+0xa0>
    1aa4:	88 23       	and	r24, r24
    1aa6:	4a f0       	brmi	.+18     	; 0x1aba <__mulsf3_pse+0x7a>
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	bb 1f       	adc	r27, r27
    1aae:	66 1f       	adc	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	88 1f       	adc	r24, r24
    1ab4:	91 50       	subi	r25, 0x01	; 1
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	a9 f7       	brne	.-22     	; 0x1aa4 <__mulsf3_pse+0x64>
    1aba:	9e 3f       	cpi	r25, 0xFE	; 254
    1abc:	51 05       	cpc	r21, r1
    1abe:	80 f0       	brcs	.+32     	; 0x1ae0 <__mulsf3_pse+0xa0>
    1ac0:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__fp_inf>
    1ac4:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__fp_szero>
    1ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aca:	e4 f3       	brlt	.-8      	; 0x1ac4 <__mulsf3_pse+0x84>
    1acc:	98 3e       	cpi	r25, 0xE8	; 232
    1ace:	d4 f3       	brlt	.-12     	; 0x1ac4 <__mulsf3_pse+0x84>
    1ad0:	86 95       	lsr	r24
    1ad2:	77 95       	ror	r23
    1ad4:	67 95       	ror	r22
    1ad6:	b7 95       	ror	r27
    1ad8:	f7 95       	ror	r31
    1ada:	e7 95       	ror	r30
    1adc:	9f 5f       	subi	r25, 0xFF	; 255
    1ade:	c1 f7       	brne	.-16     	; 0x1ad0 <__mulsf3_pse+0x90>
    1ae0:	fe 2b       	or	r31, r30
    1ae2:	88 0f       	add	r24, r24
    1ae4:	91 1d       	adc	r25, r1
    1ae6:	96 95       	lsr	r25
    1ae8:	87 95       	ror	r24
    1aea:	97 f9       	bld	r25, 7
    1aec:	08 95       	ret

00001aee <initVariant>:
    1aee:	08 95       	ret

00001af0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1af0:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <init>

	initVariant();
    1af4:	0e 94 77 0d 	call	0x1aee	; 0x1aee <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1af8:	0e 94 cf 01 	call	0x39e	; 0x39e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1afc:	c0 e0       	ldi	r28, 0x00	; 0
    1afe:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1b00:	0e 94 ef 02 	call	0x5de	; 0x5de <loop>
		if (serialEventRun) serialEventRun();
    1b04:	20 97       	sbiw	r28, 0x00	; 0
    1b06:	e1 f3       	breq	.-8      	; 0x1b00 <main+0x10>
    1b08:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b0c:	f9 cf       	rjmp	.-14     	; 0x1b00 <main+0x10>

00001b0e <_Znwj>:
    1b0e:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <malloc>

00001b12 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	6c 01       	movw	r12, r24
    1b24:	7a 01       	movw	r14, r20
    1b26:	8b 01       	movw	r16, r22
    1b28:	c0 e0       	ldi	r28, 0x00	; 0
    1b2a:	d0 e0       	ldi	r29, 0x00	; 0
    1b2c:	ce 15       	cp	r28, r14
    1b2e:	df 05       	cpc	r29, r15
    1b30:	81 f0       	breq	.+32     	; 0x1b52 <_ZN5Print5writeEPKhj+0x40>
    1b32:	d8 01       	movw	r26, r16
    1b34:	6d 91       	ld	r22, X+
    1b36:	8d 01       	movw	r16, r26
    1b38:	d6 01       	movw	r26, r12
    1b3a:	ed 91       	ld	r30, X+
    1b3c:	fc 91       	ld	r31, X
    1b3e:	01 90       	ld	r0, Z+
    1b40:	f0 81       	ld	r31, Z
    1b42:	e0 2d       	mov	r30, r0
    1b44:	c6 01       	movw	r24, r12
    1b46:	09 95       	icall
    1b48:	89 2b       	or	r24, r25
    1b4a:	11 f0       	breq	.+4      	; 0x1b50 <_ZN5Print5writeEPKhj+0x3e>
    1b4c:	21 96       	adiw	r28, 0x01	; 1
    1b4e:	ee cf       	rjmp	.-36     	; 0x1b2c <_ZN5Print5writeEPKhj+0x1a>
    1b50:	7e 01       	movw	r14, r28
    1b52:	c7 01       	movw	r24, r14
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	08 95       	ret

00001b66 <_ZN5Print5writeEPKc>:
    1b66:	61 15       	cp	r22, r1
    1b68:	71 05       	cpc	r23, r1
    1b6a:	79 f0       	breq	.+30     	; 0x1b8a <_ZN5Print5writeEPKc+0x24>
    1b6c:	fb 01       	movw	r30, r22
    1b6e:	01 90       	ld	r0, Z+
    1b70:	00 20       	and	r0, r0
    1b72:	e9 f7       	brne	.-6      	; 0x1b6e <_ZN5Print5writeEPKc+0x8>
    1b74:	31 97       	sbiw	r30, 0x01	; 1
    1b76:	af 01       	movw	r20, r30
    1b78:	46 1b       	sub	r20, r22
    1b7a:	57 0b       	sbc	r21, r23
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	ed 91       	ld	r30, X+
    1b80:	fc 91       	ld	r31, X
    1b82:	02 80       	ldd	r0, Z+2	; 0x02
    1b84:	f3 81       	ldd	r31, Z+3	; 0x03
    1b86:	e0 2d       	mov	r30, r0
    1b88:	09 94       	ijmp
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	08 95       	ret

00001b90 <_ZN5Print5printEPKc>:
    1b90:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <_ZN5Print5writeEPKc>

00001b94 <_ZN5Print5printEc>:
    1b94:	dc 01       	movw	r26, r24
    1b96:	ed 91       	ld	r30, X+
    1b98:	fc 91       	ld	r31, X
    1b9a:	01 90       	ld	r0, Z+
    1b9c:	f0 81       	ld	r31, Z
    1b9e:	e0 2d       	mov	r30, r0
    1ba0:	09 94       	ijmp

00001ba2 <_ZN5Print11printNumberEmh>:
    1ba2:	8f 92       	push	r8
    1ba4:	9f 92       	push	r9
    1ba6:	af 92       	push	r10
    1ba8:	bf 92       	push	r11
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	a1 97       	sbiw	r28, 0x21	; 33
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	7c 01       	movw	r14, r24
    1bc8:	fa 01       	movw	r30, r20
    1bca:	cb 01       	movw	r24, r22
    1bcc:	19 a2       	std	Y+33, r1	; 0x21
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	08 f4       	brcc	.+2      	; 0x1bd4 <_ZN5Print11printNumberEmh+0x32>
    1bd2:	2a e0       	ldi	r18, 0x0A	; 10
    1bd4:	8e 01       	movw	r16, r28
    1bd6:	0f 5d       	subi	r16, 0xDF	; 223
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	82 2e       	mov	r8, r18
    1bdc:	91 2c       	mov	r9, r1
    1bde:	a1 2c       	mov	r10, r1
    1be0:	b1 2c       	mov	r11, r1
    1be2:	bf 01       	movw	r22, r30
    1be4:	a5 01       	movw	r20, r10
    1be6:	94 01       	movw	r18, r8
    1be8:	0e 94 93 10 	call	0x2126	; 0x2126 <__udivmodsi4>
    1bec:	f9 01       	movw	r30, r18
    1bee:	ca 01       	movw	r24, r20
    1bf0:	01 50       	subi	r16, 0x01	; 1
    1bf2:	11 09       	sbc	r17, r1
    1bf4:	6a 30       	cpi	r22, 0x0A	; 10
    1bf6:	10 f4       	brcc	.+4      	; 0x1bfc <_ZN5Print11printNumberEmh+0x5a>
    1bf8:	60 5d       	subi	r22, 0xD0	; 208
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <_ZN5Print11printNumberEmh+0x5c>
    1bfc:	69 5c       	subi	r22, 0xC9	; 201
    1bfe:	d8 01       	movw	r26, r16
    1c00:	6c 93       	st	X, r22
    1c02:	23 2b       	or	r18, r19
    1c04:	24 2b       	or	r18, r20
    1c06:	25 2b       	or	r18, r21
    1c08:	61 f7       	brne	.-40     	; 0x1be2 <_ZN5Print11printNumberEmh+0x40>
    1c0a:	b8 01       	movw	r22, r16
    1c0c:	c7 01       	movw	r24, r14
    1c0e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_ZN5Print5writeEPKc>
    1c12:	a1 96       	adiw	r28, 0x21	; 33
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	bf 90       	pop	r11
    1c2c:	af 90       	pop	r10
    1c2e:	9f 90       	pop	r9
    1c30:	8f 90       	pop	r8
    1c32:	08 95       	ret

00001c34 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1c34:	cf 92       	push	r12
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
  if (base == 0) {
    1c44:	21 15       	cp	r18, r1
    1c46:	31 05       	cpc	r19, r1
    1c48:	81 f4       	brne	.+32     	; 0x1c6a <_ZN5Print5printEli+0x36>
    return write(n);
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	ed 91       	ld	r30, X+
    1c4e:	fc 91       	ld	r31, X
    1c50:	01 90       	ld	r0, Z+
    1c52:	f0 81       	ld	r31, Z
    1c54:	e0 2d       	mov	r30, r0
    1c56:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1c68:	09 94       	ijmp
  } else if (base == 10) {
    1c6a:	2a 30       	cpi	r18, 0x0A	; 10
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	01 f5       	brne	.+64     	; 0x1cb0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1c70:	77 ff       	sbrs	r23, 7
    1c72:	1d c0       	rjmp	.+58     	; 0x1cae <_ZN5Print5printEli+0x7a>
    1c74:	6a 01       	movw	r12, r20
    1c76:	7b 01       	movw	r14, r22
    1c78:	ec 01       	movw	r28, r24
      int t = print('-');
    1c7a:	6d e2       	ldi	r22, 0x2D	; 45
    1c7c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN5Print5printEc>
    1c80:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1c82:	44 27       	eor	r20, r20
    1c84:	55 27       	eor	r21, r21
    1c86:	ba 01       	movw	r22, r20
    1c88:	4c 19       	sub	r20, r12
    1c8a:	5d 09       	sbc	r21, r13
    1c8c:	6e 09       	sbc	r22, r14
    1c8e:	7f 09       	sbc	r23, r15
    1c90:	2a e0       	ldi	r18, 0x0A	; 10
    1c92:	ce 01       	movw	r24, r28
    1c94:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN5Print11printNumberEmh>
    1c98:	80 0f       	add	r24, r16
    1c9a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	cf 90       	pop	r12
    1cac:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1cae:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1cc0:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <_ZN5Print11printNumberEmh>

00001cc4 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1cc4:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1cc6:	ab 01       	movw	r20, r22
    1cc8:	77 0f       	add	r23, r23
    1cca:	66 0b       	sbc	r22, r22
    1ccc:	77 0b       	sbc	r23, r23
    1cce:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <_ZN5Print5printEli>

00001cd2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1cd2:	08 95       	ret

00001cd4 <attachInterrupt>:
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	e8 f4       	brcc	.+58     	; 0x1d12 <attachInterrupt+0x3e>
    1cd8:	e8 2f       	mov	r30, r24
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	ea 5f       	subi	r30, 0xFA	; 250
    1ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce4:	71 83       	std	Z+1, r23	; 0x01
    1ce6:	60 83       	st	Z, r22
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	41 f0       	breq	.+16     	; 0x1cfc <attachInterrupt+0x28>
    1cec:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1cf0:	8c 7f       	andi	r24, 0xFC	; 252
    1cf2:	48 2b       	or	r20, r24
    1cf4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1cf8:	e8 9a       	sbi	0x1d, 0	; 29
    1cfa:	08 95       	ret
    1cfc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1d00:	83 7f       	andi	r24, 0xF3	; 243
    1d02:	44 0f       	add	r20, r20
    1d04:	55 1f       	adc	r21, r21
    1d06:	44 0f       	add	r20, r20
    1d08:	55 1f       	adc	r21, r21
    1d0a:	48 2b       	or	r20, r24
    1d0c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1d10:	e9 9a       	sbi	0x1d, 1	; 29
    1d12:	08 95       	ret

00001d14 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	2f 93       	push	r18
    1d20:	3f 93       	push	r19
    1d22:	4f 93       	push	r20
    1d24:	5f 93       	push	r21
    1d26:	6f 93       	push	r22
    1d28:	7f 93       	push	r23
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	af 93       	push	r26
    1d30:	bf 93       	push	r27
    1d32:	ef 93       	push	r30
    1d34:	ff 93       	push	r31
    1d36:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
    1d3a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
    1d3e:	09 95       	icall
    1d40:	ff 91       	pop	r31
    1d42:	ef 91       	pop	r30
    1d44:	bf 91       	pop	r27
    1d46:	af 91       	pop	r26
    1d48:	9f 91       	pop	r25
    1d4a:	8f 91       	pop	r24
    1d4c:	7f 91       	pop	r23
    1d4e:	6f 91       	pop	r22
    1d50:	5f 91       	pop	r21
    1d52:	4f 91       	pop	r20
    1d54:	3f 91       	pop	r19
    1d56:	2f 91       	pop	r18
    1d58:	0f 90       	pop	r0
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	0f 90       	pop	r0
    1d5e:	1f 90       	pop	r1
    1d60:	18 95       	reti

00001d62 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1d62:	1f 92       	push	r1
    1d64:	0f 92       	push	r0
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	0f 92       	push	r0
    1d6a:	11 24       	eor	r1, r1
    1d6c:	2f 93       	push	r18
    1d6e:	3f 93       	push	r19
    1d70:	4f 93       	push	r20
    1d72:	5f 93       	push	r21
    1d74:	6f 93       	push	r22
    1d76:	7f 93       	push	r23
    1d78:	8f 93       	push	r24
    1d7a:	9f 93       	push	r25
    1d7c:	af 93       	push	r26
    1d7e:	bf 93       	push	r27
    1d80:	ef 93       	push	r30
    1d82:	ff 93       	push	r31
    1d84:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
    1d88:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
    1d8c:	09 95       	icall
    1d8e:	ff 91       	pop	r31
    1d90:	ef 91       	pop	r30
    1d92:	bf 91       	pop	r27
    1d94:	af 91       	pop	r26
    1d96:	9f 91       	pop	r25
    1d98:	8f 91       	pop	r24
    1d9a:	7f 91       	pop	r23
    1d9c:	6f 91       	pop	r22
    1d9e:	5f 91       	pop	r21
    1da0:	4f 91       	pop	r20
    1da2:	3f 91       	pop	r19
    1da4:	2f 91       	pop	r18
    1da6:	0f 90       	pop	r0
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	0f 90       	pop	r0
    1dac:	1f 90       	pop	r1
    1dae:	18 95       	reti

00001db0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1db0:	1f 92       	push	r1
    1db2:	0f 92       	push	r0
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	0f 92       	push	r0
    1db8:	11 24       	eor	r1, r1
    1dba:	2f 93       	push	r18
    1dbc:	3f 93       	push	r19
    1dbe:	8f 93       	push	r24
    1dc0:	9f 93       	push	r25
    1dc2:	af 93       	push	r26
    1dc4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1dc6:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <timer0_millis>
    1dca:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <timer0_millis+0x1>
    1dce:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <timer0_millis+0x2>
    1dd2:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1dd6:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1dda:	23 e0       	ldi	r18, 0x03	; 3
    1ddc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1dde:	2d 37       	cpi	r18, 0x7D	; 125
    1de0:	20 f4       	brcc	.+8      	; 0x1dea <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	a1 1d       	adc	r26, r1
    1de6:	b1 1d       	adc	r27, r1
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1dea:	26 e8       	ldi	r18, 0x86	; 134
    1dec:	23 0f       	add	r18, r19
		m += 1;
    1dee:	02 96       	adiw	r24, 0x02	; 2
    1df0:	a1 1d       	adc	r26, r1
    1df2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1df4:	20 93 2e 02 	sts	0x022E, r18	; 0x80022e <timer0_fract>
	timer0_millis = m;
    1df8:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <timer0_millis>
    1dfc:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <timer0_millis+0x1>
    1e00:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <timer0_millis+0x2>
    1e04:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <timer0_millis+0x3>
	timer0_overflow_count++;
    1e08:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <timer0_overflow_count>
    1e0c:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <timer0_overflow_count+0x1>
    1e10:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <timer0_overflow_count+0x2>
    1e14:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <timer0_overflow_count+0x3>
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	a1 1d       	adc	r26, r1
    1e1c:	b1 1d       	adc	r27, r1
    1e1e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <timer0_overflow_count>
    1e22:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <timer0_overflow_count+0x1>
    1e26:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <timer0_overflow_count+0x2>
    1e2a:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <timer0_overflow_count+0x3>
}
    1e2e:	bf 91       	pop	r27
    1e30:	af 91       	pop	r26
    1e32:	9f 91       	pop	r25
    1e34:	8f 91       	pop	r24
    1e36:	3f 91       	pop	r19
    1e38:	2f 91       	pop	r18
    1e3a:	0f 90       	pop	r0
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	0f 90       	pop	r0
    1e40:	1f 90       	pop	r1
    1e42:	18 95       	reti

00001e44 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1e44:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1e46:	f8 94       	cli
	m = timer0_millis;
    1e48:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <timer0_millis>
    1e4c:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <timer0_millis+0x1>
    1e50:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <timer0_millis+0x2>
    1e54:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <timer0_millis+0x3>
	SREG = oldSREG;
    1e58:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1e5a:	08 95       	ret

00001e5c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1e5c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1e5e:	f8 94       	cli
	m = timer0_overflow_count;
    1e60:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <timer0_overflow_count>
    1e64:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <timer0_overflow_count+0x1>
    1e68:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <timer0_overflow_count+0x2>
    1e6c:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1e70:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1e72:	a8 9b       	sbis	0x15, 0	; 21
    1e74:	05 c0       	rjmp	.+10     	; 0x1e80 <micros+0x24>
    1e76:	2f 3f       	cpi	r18, 0xFF	; 255
    1e78:	19 f0       	breq	.+6      	; 0x1e80 <micros+0x24>
		m++;
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1e80:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1e82:	ba 2f       	mov	r27, r26
    1e84:	a9 2f       	mov	r26, r25
    1e86:	98 2f       	mov	r25, r24
    1e88:	88 27       	eor	r24, r24
    1e8a:	82 0f       	add	r24, r18
    1e8c:	91 1d       	adc	r25, r1
    1e8e:	a1 1d       	adc	r26, r1
    1e90:	b1 1d       	adc	r27, r1
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	42 e0       	ldi	r20, 0x02	; 2
    1e98:	66 0f       	add	r22, r22
    1e9a:	77 1f       	adc	r23, r23
    1e9c:	88 1f       	adc	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	4a 95       	dec	r20
    1ea2:	d1 f7       	brne	.-12     	; 0x1e98 <micros+0x3c>
}
    1ea4:	08 95       	ret

00001ea6 <delay>:

void delay(unsigned long ms)
{
    1ea6:	8f 92       	push	r8
    1ea8:	9f 92       	push	r9
    1eaa:	af 92       	push	r10
    1eac:	bf 92       	push	r11
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	6b 01       	movw	r12, r22
    1eb8:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1eba:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <micros>
    1ebe:	4b 01       	movw	r8, r22
    1ec0:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1ec2:	c1 14       	cp	r12, r1
    1ec4:	d1 04       	cpc	r13, r1
    1ec6:	e1 04       	cpc	r14, r1
    1ec8:	f1 04       	cpc	r15, r1
    1eca:	01 f1       	breq	.+64     	; 0x1f0c <delay+0x66>
		yield();
    1ecc:	0e 94 92 10 	call	0x2124	; 0x2124 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1ed0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <micros>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	88 19       	sub	r24, r8
    1eda:	99 09       	sbc	r25, r9
    1edc:	aa 09       	sbc	r26, r10
    1ede:	bb 09       	sbc	r27, r11
    1ee0:	88 3e       	cpi	r24, 0xE8	; 232
    1ee2:	93 40       	sbci	r25, 0x03	; 3
    1ee4:	a1 05       	cpc	r26, r1
    1ee6:	b1 05       	cpc	r27, r1
    1ee8:	60 f3       	brcs	.-40     	; 0x1ec2 <delay+0x1c>
			ms--;
    1eea:	21 e0       	ldi	r18, 0x01	; 1
    1eec:	c2 1a       	sub	r12, r18
    1eee:	d1 08       	sbc	r13, r1
    1ef0:	e1 08       	sbc	r14, r1
    1ef2:	f1 08       	sbc	r15, r1
			start += 1000;
    1ef4:	88 ee       	ldi	r24, 0xE8	; 232
    1ef6:	88 0e       	add	r8, r24
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	98 1e       	adc	r9, r24
    1efc:	a1 1c       	adc	r10, r1
    1efe:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1f00:	c1 14       	cp	r12, r1
    1f02:	d1 04       	cpc	r13, r1
    1f04:	e1 04       	cpc	r14, r1
    1f06:	f1 04       	cpc	r15, r1
    1f08:	19 f7       	brne	.-58     	; 0x1ed0 <delay+0x2a>
    1f0a:	db cf       	rjmp	.-74     	; 0x1ec2 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	df 90       	pop	r13
    1f12:	cf 90       	pop	r12
    1f14:	bf 90       	pop	r11
    1f16:	af 90       	pop	r10
    1f18:	9f 90       	pop	r9
    1f1a:	8f 90       	pop	r8
    1f1c:	08 95       	ret

00001f1e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	91 05       	cpc	r25, r1
    1f22:	38 f0       	brcs	.+14     	; 0x1f32 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1f2c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <delayMicroseconds+0x10>
    1f32:	08 95       	ret

00001f34 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1f34:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1f36:	84 b5       	in	r24, 0x24	; 36
    1f38:	82 60       	ori	r24, 0x02	; 2
    1f3a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1f3c:	84 b5       	in	r24, 0x24	; 36
    1f3e:	81 60       	ori	r24, 0x01	; 1
    1f40:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1f42:	85 b5       	in	r24, 0x25	; 37
    1f44:	82 60       	ori	r24, 0x02	; 2
    1f46:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1f48:	85 b5       	in	r24, 0x25	; 37
    1f4a:	81 60       	ori	r24, 0x01	; 1
    1f4c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1f4e:	ee e6       	ldi	r30, 0x6E	; 110
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	81 60       	ori	r24, 0x01	; 1
    1f56:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1f58:	e1 e8       	ldi	r30, 0x81	; 129
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1f5e:	80 81       	ld	r24, Z
    1f60:	82 60       	ori	r24, 0x02	; 2
    1f62:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1f64:	80 81       	ld	r24, Z
    1f66:	81 60       	ori	r24, 0x01	; 1
    1f68:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1f6a:	e0 e8       	ldi	r30, 0x80	; 128
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	81 60       	ori	r24, 0x01	; 1
    1f72:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1f74:	e1 eb       	ldi	r30, 0xB1	; 177
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	84 60       	ori	r24, 0x04	; 4
    1f7c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1f7e:	e0 eb       	ldi	r30, 0xB0	; 176
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	81 60       	ori	r24, 0x01	; 1
    1f86:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1f88:	ea e7       	ldi	r30, 0x7A	; 122
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	84 60       	ori	r24, 0x04	; 4
    1f90:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1f92:	80 81       	ld	r24, Z
    1f94:	82 60       	ori	r24, 0x02	; 2
    1f96:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1f98:	80 81       	ld	r24, Z
    1f9a:	81 60       	ori	r24, 0x01	; 1
    1f9c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 68       	ori	r24, 0x80	; 128
    1fa2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1fa4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1fa8:	08 95       	ret

00001faa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	81 f0       	breq	.+32     	; 0x1fce <turnOffPWM+0x24>
    1fae:	28 f4       	brcc	.+10     	; 0x1fba <turnOffPWM+0x10>
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	99 f0       	breq	.+38     	; 0x1fda <turnOffPWM+0x30>
    1fb4:	82 30       	cpi	r24, 0x02	; 2
    1fb6:	a1 f0       	breq	.+40     	; 0x1fe0 <turnOffPWM+0x36>
    1fb8:	08 95       	ret
    1fba:	87 30       	cpi	r24, 0x07	; 7
    1fbc:	a9 f0       	breq	.+42     	; 0x1fe8 <turnOffPWM+0x3e>
    1fbe:	88 30       	cpi	r24, 0x08	; 8
    1fc0:	b9 f0       	breq	.+46     	; 0x1ff0 <turnOffPWM+0x46>
    1fc2:	84 30       	cpi	r24, 0x04	; 4
    1fc4:	d1 f4       	brne	.+52     	; 0x1ffa <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1fc6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1fca:	8f 7d       	andi	r24, 0xDF	; 223
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1fce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1fd2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1fd4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1fd8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1fda:	84 b5       	in	r24, 0x24	; 36
    1fdc:	8f 77       	andi	r24, 0x7F	; 127
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1fe0:	84 b5       	in	r24, 0x24	; 36
    1fe2:	8f 7d       	andi	r24, 0xDF	; 223
    1fe4:	84 bd       	out	0x24, r24	; 36
    1fe6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1fe8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1fec:	8f 77       	andi	r24, 0x7F	; 127
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1ff0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ff4:	8f 7d       	andi	r24, 0xDF	; 223
    1ff6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ffa:	08 95       	ret

00001ffc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	fc 01       	movw	r30, r24
    2004:	e4 58       	subi	r30, 0x84	; 132
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    200a:	fc 01       	movw	r30, r24
    200c:	e0 57       	subi	r30, 0x70	; 112
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2012:	88 23       	and	r24, r24
    2014:	61 f1       	breq	.+88     	; 0x206e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	fc 01       	movw	r30, r24
    201e:	e8 54       	subi	r30, 0x48	; 72
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	c5 91       	lpm	r28, Z+
    2024:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2026:	fc 01       	movw	r30, r24
    2028:	e2 55       	subi	r30, 0x52	; 82
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	a5 91       	lpm	r26, Z+
    202e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2030:	61 11       	cpse	r22, r1
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2034:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2036:	f8 94       	cli
		*reg &= ~bit;
    2038:	88 81       	ld	r24, Y
    203a:	20 95       	com	r18
    203c:	82 23       	and	r24, r18
    203e:	88 83       	st	Y, r24
		*out &= ~bit;
    2040:	ec 91       	ld	r30, X
    2042:	2e 23       	and	r18, r30
    2044:	0b c0       	rjmp	.+22     	; 0x205c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2046:	62 30       	cpi	r22, 0x02	; 2
    2048:	61 f4       	brne	.+24     	; 0x2062 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    204a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    204c:	f8 94       	cli
		*reg &= ~bit;
    204e:	88 81       	ld	r24, Y
    2050:	32 2f       	mov	r19, r18
    2052:	30 95       	com	r19
    2054:	83 23       	and	r24, r19
    2056:	88 83       	st	Y, r24
		*out |= bit;
    2058:	ec 91       	ld	r30, X
    205a:	2e 2b       	or	r18, r30
    205c:	2c 93       	st	X, r18
		SREG = oldSREG;
    205e:	9f bf       	out	0x3f, r25	; 63
    2060:	06 c0       	rjmp	.+12     	; 0x206e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2062:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2064:	f8 94       	cli
		*reg |= bit;
    2066:	e8 81       	ld	r30, Y
    2068:	2e 2b       	or	r18, r30
    206a:	28 83       	st	Y, r18
		SREG = oldSREG;
    206c:	8f bf       	out	0x3f, r24	; 63
	}
}
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	08 95       	ret

00002074 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	f9 01       	movw	r30, r18
    2080:	e8 59       	subi	r30, 0x98	; 152
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2086:	f9 01       	movw	r30, r18
    2088:	e4 58       	subi	r30, 0x84	; 132
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    208e:	f9 01       	movw	r30, r18
    2090:	e0 57       	subi	r30, 0x70	; 112
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2096:	cc 23       	and	r28, r28
    2098:	c1 f0       	breq	.+48     	; 0x20ca <digitalWrite+0x56>
    209a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    209c:	81 11       	cpse	r24, r1
    209e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <turnOffPWM>

	out = portOutputRegister(port);
    20a2:	ec 2f       	mov	r30, r28
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e2 55       	subi	r30, 0x52	; 82
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	a5 91       	lpm	r26, Z+
    20b0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    20b2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    20b4:	f8 94       	cli

	if (val == LOW) {
    20b6:	11 11       	cpse	r17, r1
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <digitalWrite+0x4e>
		*out &= ~bit;
    20ba:	8c 91       	ld	r24, X
    20bc:	d0 95       	com	r29
    20be:	d8 23       	and	r29, r24
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    20c2:	ec 91       	ld	r30, X
    20c4:	de 2b       	or	r29, r30
    20c6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    20c8:	9f bf       	out	0x3f, r25	; 63
}
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	08 95       	ret

000020d2 <digitalRead>:

int digitalRead(uint8_t pin)
{
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	f9 01       	movw	r30, r18
    20dc:	e8 59       	subi	r30, 0x98	; 152
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    20e2:	f9 01       	movw	r30, r18
    20e4:	e4 58       	subi	r30, 0x84	; 132
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    20ea:	f9 01       	movw	r30, r18
    20ec:	e0 57       	subi	r30, 0x70	; 112
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    20f2:	cc 23       	and	r28, r28
    20f4:	91 f0       	breq	.+36     	; 0x211a <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    20f6:	81 11       	cpse	r24, r1
    20f8:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    20fc:	ec 2f       	mov	r30, r28
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	ec 55       	subi	r30, 0x5C	; 92
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	a5 91       	lpm	r26, Z+
    210a:	b4 91       	lpm	r27, Z
    210c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    210e:	ed 23       	and	r30, r29
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	21 f4       	brne	.+8      	; 0x211e <digitalRead+0x4c>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	02 c0       	rjmp	.+4      	; 0x211e <digitalRead+0x4c>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	08 95       	ret

00002124 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2124:	08 95       	ret

00002126 <__udivmodsi4>:
    2126:	a1 e2       	ldi	r26, 0x21	; 33
    2128:	1a 2e       	mov	r1, r26
    212a:	aa 1b       	sub	r26, r26
    212c:	bb 1b       	sub	r27, r27
    212e:	fd 01       	movw	r30, r26
    2130:	0d c0       	rjmp	.+26     	; 0x214c <__udivmodsi4_ep>

00002132 <__udivmodsi4_loop>:
    2132:	aa 1f       	adc	r26, r26
    2134:	bb 1f       	adc	r27, r27
    2136:	ee 1f       	adc	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	a2 17       	cp	r26, r18
    213c:	b3 07       	cpc	r27, r19
    213e:	e4 07       	cpc	r30, r20
    2140:	f5 07       	cpc	r31, r21
    2142:	20 f0       	brcs	.+8      	; 0x214c <__udivmodsi4_ep>
    2144:	a2 1b       	sub	r26, r18
    2146:	b3 0b       	sbc	r27, r19
    2148:	e4 0b       	sbc	r30, r20
    214a:	f5 0b       	sbc	r31, r21

0000214c <__udivmodsi4_ep>:
    214c:	66 1f       	adc	r22, r22
    214e:	77 1f       	adc	r23, r23
    2150:	88 1f       	adc	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	1a 94       	dec	r1
    2156:	69 f7       	brne	.-38     	; 0x2132 <__udivmodsi4_loop>
    2158:	60 95       	com	r22
    215a:	70 95       	com	r23
    215c:	80 95       	com	r24
    215e:	90 95       	com	r25
    2160:	9b 01       	movw	r18, r22
    2162:	ac 01       	movw	r20, r24
    2164:	bd 01       	movw	r22, r26
    2166:	cf 01       	movw	r24, r30
    2168:	08 95       	ret

0000216a <__tablejump2__>:
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	05 90       	lpm	r0, Z+
    2170:	f4 91       	lpm	r31, Z
    2172:	e0 2d       	mov	r30, r0
    2174:	09 94       	ijmp

00002176 <malloc>:
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	82 30       	cpi	r24, 0x02	; 2
    2180:	91 05       	cpc	r25, r1
    2182:	10 f4       	brcc	.+4      	; 0x2188 <malloc+0x12>
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <__flp>
    218c:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <__flp+0x1>
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	a0 e0       	ldi	r26, 0x00	; 0
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	30 97       	sbiw	r30, 0x00	; 0
    219a:	19 f1       	breq	.+70     	; 0x21e2 <malloc+0x6c>
    219c:	40 81       	ld	r20, Z
    219e:	51 81       	ldd	r21, Z+1	; 0x01
    21a0:	02 81       	ldd	r16, Z+2	; 0x02
    21a2:	13 81       	ldd	r17, Z+3	; 0x03
    21a4:	48 17       	cp	r20, r24
    21a6:	59 07       	cpc	r21, r25
    21a8:	c8 f0       	brcs	.+50     	; 0x21dc <malloc+0x66>
    21aa:	84 17       	cp	r24, r20
    21ac:	95 07       	cpc	r25, r21
    21ae:	69 f4       	brne	.+26     	; 0x21ca <malloc+0x54>
    21b0:	10 97       	sbiw	r26, 0x00	; 0
    21b2:	31 f0       	breq	.+12     	; 0x21c0 <malloc+0x4a>
    21b4:	12 96       	adiw	r26, 0x02	; 2
    21b6:	0c 93       	st	X, r16
    21b8:	12 97       	sbiw	r26, 0x02	; 2
    21ba:	13 96       	adiw	r26, 0x03	; 3
    21bc:	1c 93       	st	X, r17
    21be:	27 c0       	rjmp	.+78     	; 0x220e <malloc+0x98>
    21c0:	00 93 39 02 	sts	0x0239, r16	; 0x800239 <__flp>
    21c4:	10 93 3a 02 	sts	0x023A, r17	; 0x80023a <__flp+0x1>
    21c8:	22 c0       	rjmp	.+68     	; 0x220e <malloc+0x98>
    21ca:	21 15       	cp	r18, r1
    21cc:	31 05       	cpc	r19, r1
    21ce:	19 f0       	breq	.+6      	; 0x21d6 <malloc+0x60>
    21d0:	42 17       	cp	r20, r18
    21d2:	53 07       	cpc	r21, r19
    21d4:	18 f4       	brcc	.+6      	; 0x21dc <malloc+0x66>
    21d6:	9a 01       	movw	r18, r20
    21d8:	bd 01       	movw	r22, r26
    21da:	ef 01       	movw	r28, r30
    21dc:	df 01       	movw	r26, r30
    21de:	f8 01       	movw	r30, r16
    21e0:	db cf       	rjmp	.-74     	; 0x2198 <malloc+0x22>
    21e2:	21 15       	cp	r18, r1
    21e4:	31 05       	cpc	r19, r1
    21e6:	f9 f0       	breq	.+62     	; 0x2226 <malloc+0xb0>
    21e8:	28 1b       	sub	r18, r24
    21ea:	39 0b       	sbc	r19, r25
    21ec:	24 30       	cpi	r18, 0x04	; 4
    21ee:	31 05       	cpc	r19, r1
    21f0:	80 f4       	brcc	.+32     	; 0x2212 <malloc+0x9c>
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	61 15       	cp	r22, r1
    21f8:	71 05       	cpc	r23, r1
    21fa:	21 f0       	breq	.+8      	; 0x2204 <malloc+0x8e>
    21fc:	fb 01       	movw	r30, r22
    21fe:	93 83       	std	Z+3, r25	; 0x03
    2200:	82 83       	std	Z+2, r24	; 0x02
    2202:	04 c0       	rjmp	.+8      	; 0x220c <malloc+0x96>
    2204:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <__flp+0x1>
    2208:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <__flp>
    220c:	fe 01       	movw	r30, r28
    220e:	32 96       	adiw	r30, 0x02	; 2
    2210:	44 c0       	rjmp	.+136    	; 0x229a <malloc+0x124>
    2212:	fe 01       	movw	r30, r28
    2214:	e2 0f       	add	r30, r18
    2216:	f3 1f       	adc	r31, r19
    2218:	81 93       	st	Z+, r24
    221a:	91 93       	st	Z+, r25
    221c:	22 50       	subi	r18, 0x02	; 2
    221e:	31 09       	sbc	r19, r1
    2220:	39 83       	std	Y+1, r19	; 0x01
    2222:	28 83       	st	Y, r18
    2224:	3a c0       	rjmp	.+116    	; 0x229a <malloc+0x124>
    2226:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <__brkval>
    222a:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <__brkval+0x1>
    222e:	23 2b       	or	r18, r19
    2230:	41 f4       	brne	.+16     	; 0x2242 <malloc+0xcc>
    2232:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2236:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    223a:	30 93 38 02 	sts	0x0238, r19	; 0x800238 <__brkval+0x1>
    223e:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <__brkval>
    2242:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2246:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    224a:	21 15       	cp	r18, r1
    224c:	31 05       	cpc	r19, r1
    224e:	41 f4       	brne	.+16     	; 0x2260 <malloc+0xea>
    2250:	2d b7       	in	r18, 0x3d	; 61
    2252:	3e b7       	in	r19, 0x3e	; 62
    2254:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2258:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    225c:	24 1b       	sub	r18, r20
    225e:	35 0b       	sbc	r19, r21
    2260:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <__brkval>
    2264:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <__brkval+0x1>
    2268:	e2 17       	cp	r30, r18
    226a:	f3 07       	cpc	r31, r19
    226c:	a0 f4       	brcc	.+40     	; 0x2296 <malloc+0x120>
    226e:	2e 1b       	sub	r18, r30
    2270:	3f 0b       	sbc	r19, r31
    2272:	28 17       	cp	r18, r24
    2274:	39 07       	cpc	r19, r25
    2276:	78 f0       	brcs	.+30     	; 0x2296 <malloc+0x120>
    2278:	ac 01       	movw	r20, r24
    227a:	4e 5f       	subi	r20, 0xFE	; 254
    227c:	5f 4f       	sbci	r21, 0xFF	; 255
    227e:	24 17       	cp	r18, r20
    2280:	35 07       	cpc	r19, r21
    2282:	48 f0       	brcs	.+18     	; 0x2296 <malloc+0x120>
    2284:	4e 0f       	add	r20, r30
    2286:	5f 1f       	adc	r21, r31
    2288:	50 93 38 02 	sts	0x0238, r21	; 0x800238 <__brkval+0x1>
    228c:	40 93 37 02 	sts	0x0237, r20	; 0x800237 <__brkval>
    2290:	81 93       	st	Z+, r24
    2292:	91 93       	st	Z+, r25
    2294:	02 c0       	rjmp	.+4      	; 0x229a <malloc+0x124>
    2296:	e0 e0       	ldi	r30, 0x00	; 0
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	cf 01       	movw	r24, r30
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	08 95       	ret

000022a6 <free>:
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <free+0xa>
    22ae:	81 c0       	rjmp	.+258    	; 0x23b2 <free+0x10c>
    22b0:	fc 01       	movw	r30, r24
    22b2:	32 97       	sbiw	r30, 0x02	; 2
    22b4:	13 82       	std	Z+3, r1	; 0x03
    22b6:	12 82       	std	Z+2, r1	; 0x02
    22b8:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <__flp>
    22bc:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <__flp+0x1>
    22c0:	10 97       	sbiw	r26, 0x00	; 0
    22c2:	81 f4       	brne	.+32     	; 0x22e4 <free+0x3e>
    22c4:	20 81       	ld	r18, Z
    22c6:	31 81       	ldd	r19, Z+1	; 0x01
    22c8:	82 0f       	add	r24, r18
    22ca:	93 1f       	adc	r25, r19
    22cc:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <__brkval>
    22d0:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <__brkval+0x1>
    22d4:	28 17       	cp	r18, r24
    22d6:	39 07       	cpc	r19, r25
    22d8:	51 f5       	brne	.+84     	; 0x232e <free+0x88>
    22da:	f0 93 38 02 	sts	0x0238, r31	; 0x800238 <__brkval+0x1>
    22de:	e0 93 37 02 	sts	0x0237, r30	; 0x800237 <__brkval>
    22e2:	67 c0       	rjmp	.+206    	; 0x23b2 <free+0x10c>
    22e4:	ed 01       	movw	r28, r26
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	ce 17       	cp	r28, r30
    22ec:	df 07       	cpc	r29, r31
    22ee:	40 f4       	brcc	.+16     	; 0x2300 <free+0x5a>
    22f0:	4a 81       	ldd	r20, Y+2	; 0x02
    22f2:	5b 81       	ldd	r21, Y+3	; 0x03
    22f4:	9e 01       	movw	r18, r28
    22f6:	41 15       	cp	r20, r1
    22f8:	51 05       	cpc	r21, r1
    22fa:	f1 f0       	breq	.+60     	; 0x2338 <free+0x92>
    22fc:	ea 01       	movw	r28, r20
    22fe:	f5 cf       	rjmp	.-22     	; 0x22ea <free+0x44>
    2300:	d3 83       	std	Z+3, r29	; 0x03
    2302:	c2 83       	std	Z+2, r28	; 0x02
    2304:	40 81       	ld	r20, Z
    2306:	51 81       	ldd	r21, Z+1	; 0x01
    2308:	84 0f       	add	r24, r20
    230a:	95 1f       	adc	r25, r21
    230c:	c8 17       	cp	r28, r24
    230e:	d9 07       	cpc	r29, r25
    2310:	59 f4       	brne	.+22     	; 0x2328 <free+0x82>
    2312:	88 81       	ld	r24, Y
    2314:	99 81       	ldd	r25, Y+1	; 0x01
    2316:	84 0f       	add	r24, r20
    2318:	95 1f       	adc	r25, r21
    231a:	02 96       	adiw	r24, 0x02	; 2
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	93 83       	std	Z+3, r25	; 0x03
    2326:	82 83       	std	Z+2, r24	; 0x02
    2328:	21 15       	cp	r18, r1
    232a:	31 05       	cpc	r19, r1
    232c:	29 f4       	brne	.+10     	; 0x2338 <free+0x92>
    232e:	f0 93 3a 02 	sts	0x023A, r31	; 0x80023a <__flp+0x1>
    2332:	e0 93 39 02 	sts	0x0239, r30	; 0x800239 <__flp>
    2336:	3d c0       	rjmp	.+122    	; 0x23b2 <free+0x10c>
    2338:	e9 01       	movw	r28, r18
    233a:	fb 83       	std	Y+3, r31	; 0x03
    233c:	ea 83       	std	Y+2, r30	; 0x02
    233e:	49 91       	ld	r20, Y+
    2340:	59 91       	ld	r21, Y+
    2342:	c4 0f       	add	r28, r20
    2344:	d5 1f       	adc	r29, r21
    2346:	ec 17       	cp	r30, r28
    2348:	fd 07       	cpc	r31, r29
    234a:	61 f4       	brne	.+24     	; 0x2364 <free+0xbe>
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	84 0f       	add	r24, r20
    2352:	95 1f       	adc	r25, r21
    2354:	02 96       	adiw	r24, 0x02	; 2
    2356:	e9 01       	movw	r28, r18
    2358:	99 83       	std	Y+1, r25	; 0x01
    235a:	88 83       	st	Y, r24
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	9b 83       	std	Y+3, r25	; 0x03
    2362:	8a 83       	std	Y+2, r24	; 0x02
    2364:	e0 e0       	ldi	r30, 0x00	; 0
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	12 96       	adiw	r26, 0x02	; 2
    236a:	8d 91       	ld	r24, X+
    236c:	9c 91       	ld	r25, X
    236e:	13 97       	sbiw	r26, 0x03	; 3
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	19 f0       	breq	.+6      	; 0x237a <free+0xd4>
    2374:	fd 01       	movw	r30, r26
    2376:	dc 01       	movw	r26, r24
    2378:	f7 cf       	rjmp	.-18     	; 0x2368 <free+0xc2>
    237a:	8d 91       	ld	r24, X+
    237c:	9c 91       	ld	r25, X
    237e:	11 97       	sbiw	r26, 0x01	; 1
    2380:	9d 01       	movw	r18, r26
    2382:	2e 5f       	subi	r18, 0xFE	; 254
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	82 0f       	add	r24, r18
    2388:	93 1f       	adc	r25, r19
    238a:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <__brkval>
    238e:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <__brkval+0x1>
    2392:	28 17       	cp	r18, r24
    2394:	39 07       	cpc	r19, r25
    2396:	69 f4       	brne	.+26     	; 0x23b2 <free+0x10c>
    2398:	30 97       	sbiw	r30, 0x00	; 0
    239a:	29 f4       	brne	.+10     	; 0x23a6 <free+0x100>
    239c:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <__flp+0x1>
    23a0:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <__flp>
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <free+0x104>
    23a6:	13 82       	std	Z+3, r1	; 0x03
    23a8:	12 82       	std	Z+2, r1	; 0x02
    23aa:	b0 93 38 02 	sts	0x0238, r27	; 0x800238 <__brkval+0x1>
    23ae:	a0 93 37 02 	sts	0x0237, r26	; 0x800237 <__brkval>
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <eeprom_read_byte>:
    23b8:	f9 99       	sbic	0x1f, 1	; 31
    23ba:	fe cf       	rjmp	.-4      	; 0x23b8 <eeprom_read_byte>
    23bc:	92 bd       	out	0x22, r25	; 34
    23be:	81 bd       	out	0x21, r24	; 33
    23c0:	f8 9a       	sbi	0x1f, 0	; 31
    23c2:	99 27       	eor	r25, r25
    23c4:	80 b5       	in	r24, 0x20	; 32
    23c6:	08 95       	ret

000023c8 <_exit>:
    23c8:	f8 94       	cli

000023ca <__stop_program>:
    23ca:	ff cf       	rjmp	.-2      	; 0x23ca <__stop_program>
