
Bottom_heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00003b72  00003c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010f  0080019a  0080019a  00003ca0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b40  00000000  00000000  00003d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000159a5  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d11  00000000  00000000  0001a1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005db2  00000000  00000000  0001df06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002390  00000000  00000000  00023cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000461a  00000000  00000000  00026048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b90a  00000000  00000000  0002a662  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad8  00000000  00000000  00035f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__vector_1>
       8:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__vector_2>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__vector_24>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	7c 0e       	add	r7, r28
      c4:	d6 13       	cpse	r29, r22

000000c6 <__ctors_end>:
      c6:	88 0e       	add	r8, r24

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e2 e7       	ldi	r30, 0x72	; 114
      dc:	fb e3       	ldi	r31, 0x3B	; 59
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	aa 39       	cpi	r26, 0x9A	; 154
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	aa e9       	ldi	r26, 0x9A	; 154
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a9 3a       	cpi	r26, 0xA9	; 169
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <main>
     114:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN6Dimmer14TimerInterruptEv>:
	_timer->run();
}

//----------------------ОБРАБОТЧИКИ ПРЕРЫВАНИЙ--------------------------
void  Dimmer::TimerInterrupt() // прерывания таймера срабатывают каждые 40 мкс
{
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	ec 01       	movw	r28, r24
	_tic++;                       // счетчик
     122:	88 85       	ldd	r24, Y+8	; 0x08
     124:	99 85       	ldd	r25, Y+9	; 0x09
     126:	01 96       	adiw	r24, 0x01	; 1
     128:	99 87       	std	Y+9, r25	; 0x09
     12a:	88 87       	std	Y+8, r24	; 0x08
	for(int i=0; i< sizeof(_items); i++)
	{	 if (_tic <= _itemValues[i]) continue;	    // если настало время включать ток
     12c:	ee 81       	ldd	r30, Y+6	; 0x06
     12e:	ff 81       	ldd	r31, Y+7	; 0x07
     130:	60 81       	ld	r22, Z
     132:	71 81       	ldd	r23, Z+1	; 0x01
     134:	68 17       	cp	r22, r24
     136:	79 07       	cpc	r23, r25
     138:	24 f4       	brge	.+8      	; 0x142 <_ZN6Dimmer14TimerInterruptEv+0x26>
		_items[i].UpdateValue(_itemValues[i]);
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	9b 81       	ldd	r25, Y+3	; 0x03
     13e:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN10DimmerItem11UpdateValueEi>
//----------------------ОБРАБОТЧИКИ ПРЕРЫВАНИЙ--------------------------
void  Dimmer::TimerInterrupt() // прерывания таймера срабатывают каждые 40 мкс
{
	_tic++;                       // счетчик
	for(int i=0; i< sizeof(_items); i++)
	{	 if (_tic <= _itemValues[i]) continue;	    // если настало время включать ток
     142:	ee 81       	ldd	r30, Y+6	; 0x06
     144:	ff 81       	ldd	r31, Y+7	; 0x07
     146:	62 81       	ldd	r22, Z+2	; 0x02
     148:	73 81       	ldd	r23, Z+3	; 0x03
     14a:	88 85       	ldd	r24, Y+8	; 0x08
     14c:	99 85       	ldd	r25, Y+9	; 0x09
     14e:	68 17       	cp	r22, r24
     150:	79 07       	cpc	r23, r25
     152:	3c f4       	brge	.+14     	; 0x162 <_ZN6Dimmer14TimerInterruptEv+0x46>
		_items[i].UpdateValue(_itemValues[i]);
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	9b 81       	ldd	r25, Y+3	; 0x03
     158:	02 96       	adiw	r24, 0x02	; 2
	}
	//digitalWrite(dimPin, 1);   // врубить ток
}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
void  Dimmer::TimerInterrupt() // прерывания таймера срабатывают каждые 40 мкс
{
	_tic++;                       // счетчик
	for(int i=0; i< sizeof(_items); i++)
	{	 if (_tic <= _itemValues[i]) continue;	    // если настало время включать ток
		_items[i].UpdateValue(_itemValues[i]);
     15e:	0c 94 3a 01 	jmp	0x274	; 0x274 <_ZN10DimmerItem11UpdateValueEi>
	}
	//digitalWrite(dimPin, 1);   // врубить ток
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <_ZN6Dimmer10DetectDownEv>:
	attachInterrupt(0, (void(*)())&Dimmer::DetectDown, RISING);  // перенастроить прерывание
}


void   Dimmer::DetectDown() // обработка внешнего прерывания на пересекание нуля сверху
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	ec 01       	movw	r28, r24
	_tic = 0;                                 // обнулить счетчик
     16e:	19 86       	std	Y+9, r1	; 0x09
     170:	18 86       	std	Y+8, r1	; 0x08
	_timer->disable(_timerId);// остановить таймерd
     172:	6a 85       	ldd	r22, Y+10	; 0x0a
     174:	7b 85       	ldd	r23, Y+11	; 0x0b
     176:	8c 81       	ldd	r24, Y+4	; 0x04
     178:	9d 81       	ldd	r25, Y+5	; 0x05
     17a:	0e 94 31 11 	call	0x2262	; 0x2262 <_ZN11SimpleTimer7disableEi>
	//StopTimer1();
	for(int i=0; i< sizeof(_items); i++)
	{
		_items[i].UpdateValue(0);  // вырубить ток
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	8a 81       	ldd	r24, Y+2	; 0x02
     184:	9b 81       	ldd	r25, Y+3	; 0x03
     186:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN10DimmerItem11UpdateValueEi>
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	9b 81       	ldd	r25, Y+3	; 0x03
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	02 96       	adiw	r24, 0x02	; 2
     194:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN10DimmerItem11UpdateValueEi>
	}
	//digitalWrite(dimPin, 0);
	
	attachInterrupt(0, (void(*)())&Dimmer::DetectUp, FALLING);   // перенастроить прерывание
     198:	42 e0       	ldi	r20, 0x02	; 2
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	65 ed       	ldi	r22, 0xD5	; 213
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	80 e0       	ldi	r24, 0x00	; 0
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
	{
		_items[i].UpdateValue(0);  // вырубить ток
	}
	//digitalWrite(dimPin, 0);
	
	attachInterrupt(0, (void(*)())&Dimmer::DetectUp, FALLING);   // перенастроить прерывание
     1a6:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <attachInterrupt>

000001aa <_ZN6Dimmer8DetectUpEv>:
	}
	//digitalWrite(dimPin, 1);   // врубить ток
}

void  Dimmer::DetectUp()	 // обработка внешнего прерывания на пересекание нуля снизу
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	ec 01       	movw	r28, r24
	_tic = 0;                                 // обнулить счетчик
     1b0:	19 86       	std	Y+9, r1	; 0x09
     1b2:	18 86       	std	Y+8, r1	; 0x08
	_timer->enable(_timerId);
     1b4:	6a 85       	ldd	r22, Y+10	; 0x0a
     1b6:	7b 85       	ldd	r23, Y+11	; 0x0b
     1b8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ba:	9d 81       	ldd	r25, Y+5	; 0x05
     1bc:	0e 94 26 11 	call	0x224c	; 0x224c <_ZN11SimpleTimer6enableEi>
	_timer->restartTimer(_timerId); // перезапустить таймер
     1c0:	6a 85       	ldd	r22, Y+10	; 0x0a
     1c2:	7b 85       	ldd	r23, Y+11	; 0x0b
     1c4:	8c 81       	ldd	r24, Y+4	; 0x04
     1c6:	9d 81       	ldd	r25, Y+5	; 0x05
     1c8:	0e 94 0c 11 	call	0x2218	; 0x2218 <_ZN11SimpleTimer12restartTimerEi>
	//ResumeTimer1();
	attachInterrupt(0, (void(*)())&Dimmer::DetectDown, RISING);  // перенастроить прерывание
     1cc:	43 e0       	ldi	r20, 0x03	; 3
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	64 eb       	ldi	r22, 0xB4	; 180
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
{
	_tic = 0;                                 // обнулить счетчик
	_timer->enable(_timerId);
	_timer->restartTimer(_timerId); // перезапустить таймер
	//ResumeTimer1();
	attachInterrupt(0, (void(*)())&Dimmer::DetectDown, RISING);  // перенастроить прерывание
     1da:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <attachInterrupt>

000001de <_ZN6DimmerC1EiP10DimmerItemPi>:
//void DetectDown();
//void TimerInterrupt();


// default constructor
Dimmer::Dimmer(int zeroPin, DimmerItem* items, int* itemValues)
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
     1e8:	86 2f       	mov	r24, r22
{
	_items = items;
     1ea:	5b 83       	std	Y+3, r21	; 0x03
     1ec:	4a 83       	std	Y+2, r20	; 0x02
	_itemValues = itemValues;
     1ee:	3f 83       	std	Y+7, r19	; 0x07
     1f0:	2e 83       	std	Y+6, r18	; 0x06
	_zeroPin = zeroPin;
     1f2:	68 83       	st	Y, r22
     1f4:	79 83       	std	Y+1, r23	; 0x01
	pinMode(zeroPin, INPUT);				// настраиваем порт на вход для отслеживания прохождения сигнала через ноль
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	0e 94 2a 19 	call	0x3254	; 0x3254 <pinMode>
	attachInterrupt(0, (void(*)())&Dimmer::DetectUp, FALLING);  // настроить срабатывание прерывания interrupt0 на pin 2 на низкий уровень
     1fc:	42 e0       	ldi	r20, 0x02	; 2
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	65 ed       	ldi	r22, 0xD5	; 213
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <attachInterrupt>
	_timer = new SimpleTimer();
     20a:	8c ea       	ldi	r24, 0xAC	; 172
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     212:	8c 01       	movw	r16, r24
     214:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_ZN11SimpleTimerC1Ev>
     218:	1d 83       	std	Y+5, r17	; 0x05
     21a:	0c 83       	std	Y+4, r16	; 0x04
	_timerId = _timer->setInterval(timerInterval,(void(*)())&Dimmer::TimerInterrupt);
     21c:	2e e8       	ldi	r18, 0x8E	; 142
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	48 e2       	ldi	r20, 0x28	; 40
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	c8 01       	movw	r24, r16
     22a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_ZN11SimpleTimer11setIntervalElPFvvE>
     22e:	9b 87       	std	Y+11, r25	; 0x0b
     230:	8a 87       	std	Y+10, r24	; 0x0a
	_timer->disable(_timerId);
     232:	bc 01       	movw	r22, r24
     234:	8c 81       	ldd	r24, Y+4	; 0x04
     236:	9d 81       	ldd	r25, Y+5	; 0x05
	//StartTimer1(TimerInterrupt, 40);        // время для одного разряда ШИМ
	//StopTimer1();                           // остановить таймер
} //Dimmer
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
	_zeroPin = zeroPin;
	pinMode(zeroPin, INPUT);				// настраиваем порт на вход для отслеживания прохождения сигнала через ноль
	attachInterrupt(0, (void(*)())&Dimmer::DetectUp, FALLING);  // настроить срабатывание прерывания interrupt0 на pin 2 на низкий уровень
	_timer = new SimpleTimer();
	_timerId = _timer->setInterval(timerInterval,(void(*)())&Dimmer::TimerInterrupt);
	_timer->disable(_timerId);
     240:	0c 94 31 11 	jmp	0x2262	; 0x2262 <_ZN11SimpleTimer7disableEi>

00000244 <_ZN6Dimmer15UpdateItemValueEPi>:
} //Dimmer


void Dimmer::UpdateItemValue(int* itemValues)
{
	_itemValues = itemValues;
     244:	fc 01       	movw	r30, r24
     246:	77 83       	std	Z+7, r23	; 0x07
     248:	66 83       	std	Z+6, r22	; 0x06
     24a:	08 95       	ret

0000024c <_ZN6Dimmer6UpdateEv>:
}

void Dimmer::Update()
{
	_timer->run();
     24c:	fc 01       	movw	r30, r24
     24e:	84 81       	ldd	r24, Z+4	; 0x04
     250:	95 81       	ldd	r25, Z+5	; 0x05
     252:	0c 94 47 10 	jmp	0x208e	; 0x208e <_ZN11SimpleTimer3runEv>

00000256 <_ZN10DimmerItemC1Ei>:
*/
#include <Arduino.h>
#include "DimmerItem.h"

// default constructor
DimmerItem::DimmerItem(int dimPin)
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	ec 01       	movw	r28, r24
     25c:	86 2f       	mov	r24, r22
{
	_dimPin = dimPin;
     25e:	68 83       	st	Y, r22
     260:	79 83       	std	Y+1, r23	; 0x01
	pinMode(_dimPin, OUTPUT);
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	0e 94 2a 19 	call	0x3254	; 0x3254 <pinMode>
	digitalWrite(_dimPin, 0);
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	88 81       	ld	r24, Y
} //DimmerItem
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
// default constructor
DimmerItem::DimmerItem(int dimPin)
{
	_dimPin = dimPin;
	pinMode(_dimPin, OUTPUT);
	digitalWrite(_dimPin, 0);
     270:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <digitalWrite>

00000274 <_ZN10DimmerItem11UpdateValueEi>:
} //DimmerItem

void DimmerItem::UpdateValue(int dimVal)
{
	digitalWrite(_dimPin, 255-dimVal);
     274:	60 95       	com	r22
     276:	fc 01       	movw	r30, r24
     278:	80 81       	ld	r24, Z
     27a:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <digitalWrite>

0000027e <_ZN10DimmerItemD1Ev>:
}
// default destructor
DimmerItem::~DimmerItem()
     27e:	08 95       	ret

00000280 <_ZN11Display16x2C1EP17LiquidCrystal_I2C>:
Display16x2:: Display16x2(LiquidCrystal_I2C* lcd)
{
	//_lcd = new LiquidCrystal_I2C(adress, col, row);
	//_lcd->begin();
	//_lcd->clear();
	_lcd = lcd;
     280:	fc 01       	movw	r30, r24
     282:	71 83       	std	Z+1, r23	; 0x01
     284:	60 83       	st	Z, r22
     286:	08 95       	ret

00000288 <_ZN11Display16x215PrintLineValuesEiiii>:
}

void Display16x2::PrintLineValues(int line, int setTemp, int curTemp, int power)
{
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
     29e:	7b 01       	movw	r14, r22
     2a0:	5a 01       	movw	r10, r20
     2a2:	69 01       	movw	r12, r18
	_lcd->setCursor(1,line);
     2a4:	46 2f       	mov	r20, r22
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	88 81       	ld	r24, Y
     2aa:	99 81       	ldd	r25, Y+1	; 0x01
     2ac:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(line==0?"U:":"D:");
     2b0:	e1 14       	cp	r14, r1
     2b2:	f1 04       	cpc	r15, r1
     2b4:	19 f0       	breq	.+6      	; 0x2bc <_ZN11Display16x215PrintLineValuesEiiii+0x34>
     2b6:	67 e1       	ldi	r22, 0x17	; 23
     2b8:	71 e0       	ldi	r23, 0x01	; 1
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <_ZN11Display16x215PrintLineValuesEiiii+0x38>
     2bc:	64 e1       	ldi	r22, 0x14	; 20
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	88 81       	ld	r24, Y
     2c2:	99 81       	ldd	r25, Y+1	; 0x01
     2c4:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZN5Print5printEPKc>
	_lcd->setCursor(3,line);
     2c8:	4e 2d       	mov	r20, r14
     2ca:	63 e0       	ldi	r22, 0x03	; 3
     2cc:	88 81       	ld	r24, Y
     2ce:	99 81       	ldd	r25, Y+1	; 0x01
     2d0:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(setTemp);
     2d4:	4a e0       	ldi	r20, 0x0A	; 10
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	b5 01       	movw	r22, r10
     2da:	88 81       	ld	r24, Y
     2dc:	99 81       	ldd	r25, Y+1	; 0x01
     2de:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <_ZN5Print5printEii>
	_lcd->setCursor(6,line);
     2e2:	4e 2d       	mov	r20, r14
     2e4:	66 e0       	ldi	r22, 0x06	; 6
     2e6:	88 81       	ld	r24, Y
     2e8:	99 81       	ldd	r25, Y+1	; 0x01
     2ea:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print("C-");
     2ee:	6a e1       	ldi	r22, 0x1A	; 26
     2f0:	71 e0       	ldi	r23, 0x01	; 1
     2f2:	88 81       	ld	r24, Y
     2f4:	99 81       	ldd	r25, Y+1	; 0x01
     2f6:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZN5Print5printEPKc>
	_lcd->setCursor(8,line);
     2fa:	4e 2d       	mov	r20, r14
     2fc:	68 e0       	ldi	r22, 0x08	; 8
     2fe:	88 81       	ld	r24, Y
     300:	99 81       	ldd	r25, Y+1	; 0x01
     302:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(curTemp);
     306:	4a e0       	ldi	r20, 0x0A	; 10
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	b6 01       	movw	r22, r12
     30c:	88 81       	ld	r24, Y
     30e:	99 81       	ldd	r25, Y+1	; 0x01
     310:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <_ZN5Print5printEii>
	_lcd->setCursor(11,line);
     314:	4e 2d       	mov	r20, r14
     316:	6b e0       	ldi	r22, 0x0B	; 11
     318:	88 81       	ld	r24, Y
     31a:	99 81       	ldd	r25, Y+1	; 0x01
     31c:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print("C ");
     320:	6d e1       	ldi	r22, 0x1D	; 29
     322:	71 e0       	ldi	r23, 0x01	; 1
     324:	88 81       	ld	r24, Y
     326:	99 81       	ldd	r25, Y+1	; 0x01
     328:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZN5Print5printEPKc>
	_lcd->setCursor(13,line);
     32c:	4e 2d       	mov	r20, r14
     32e:	6d e0       	ldi	r22, 0x0D	; 13
     330:	88 81       	ld	r24, Y
     332:	99 81       	ldd	r25, Y+1	; 0x01
     334:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(power);
     338:	4a e0       	ldi	r20, 0x0A	; 10
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	b8 01       	movw	r22, r16
     33e:	88 81       	ld	r24, Y
     340:	99 81       	ldd	r25, Y+1	; 0x01
     342:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <_ZN5Print5printEii>
	_lcd->setCursor(15,line);
     346:	4e 2d       	mov	r20, r14
     348:	6f e0       	ldi	r22, 0x0F	; 15
     34a:	88 81       	ld	r24, Y
     34c:	99 81       	ldd	r25, Y+1	; 0x01
     34e:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print("%");
     352:	60 e2       	ldi	r22, 0x20	; 32
     354:	71 e0       	ldi	r23, 0x01	; 1
     356:	88 81       	ld	r24, Y
     358:	99 81       	ldd	r25, Y+1	; 0x01
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	bf 90       	pop	r11
     36c:	af 90       	pop	r10
	_lcd->setCursor(11,line);
	_lcd->print("C ");
	_lcd->setCursor(13,line);
	_lcd->print(power);
	_lcd->setCursor(15,line);
	_lcd->print("%");
     36e:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <_ZN5Print5printEPKc>

00000372 <_ZN11Display16x212PrintEditIntEi>:
}

void Display16x2::PrintEditInt(int val)
{
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	ec 01       	movw	r28, r24
     37c:	8b 01       	movw	r16, r22
	_lcd->setCursor(0,1);
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	88 81       	ld	r24, Y
     384:	99 81       	ldd	r25, Y+1	; 0x01
     386:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(val);
     38a:	4a e0       	ldi	r20, 0x0A	; 10
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	b8 01       	movw	r22, r16
     390:	88 81       	ld	r24, Y
     392:	99 81       	ldd	r25, Y+1	; 0x01
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
}

void Display16x2::PrintEditInt(int val)
{
	_lcd->setCursor(0,1);
	_lcd->print(val);
     39c:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <_ZN5Print5printEii>

000003a0 <_ZN11Display16x213PrintEditBoolEb>:
}

void  Display16x2::PrintEditBool(bool val)
{
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	ec 01       	movw	r28, r24
     3a8:	16 2f       	mov	r17, r22
	_lcd->setCursor(0,1);
     3aa:	41 e0       	ldi	r20, 0x01	; 1
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	88 81       	ld	r24, Y
     3b0:	99 81       	ldd	r25, Y+1	; 0x01
     3b2:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(val?"TRUE":"FALSE");
     3b6:	11 11       	cpse	r17, r1
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <_ZN11Display16x213PrintEditBoolEb+0x20>
     3ba:	67 e2       	ldi	r22, 0x27	; 39
     3bc:	71 e0       	ldi	r23, 0x01	; 1
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <_ZN11Display16x213PrintEditBoolEb+0x24>
     3c0:	62 e2       	ldi	r22, 0x22	; 34
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	88 81       	ld	r24, Y
     3c6:	99 81       	ldd	r25, Y+1	; 0x01
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
}

void  Display16x2::PrintEditBool(bool val)
{
	_lcd->setCursor(0,1);
	_lcd->print(val?"TRUE":"FALSE");
     3ce:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <_ZN5Print5printEPKc>

000003d2 <_ZN11Display16x29ClearEditEi>:
}

void Display16x2::ClearEdit(int line)
{
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
	_lcd->setCursor(0,0);
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	88 81       	ld	r24, Y
     3de:	99 81       	ldd	r25, Y+1	; 0x01
     3e0:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	_lcd->print(" ");
     3e4:	66 e8       	ldi	r22, 0x86	; 134
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
}

void Display16x2::ClearEdit(int line)
{
	_lcd->setCursor(0,0);
	_lcd->print(" ");
     3f0:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <_ZN5Print5printEPKc>

000003f4 <_ZN11Display16x25ClearEv>:
}
void  Display16x2::Clear()
{
	_lcd->clear();
     3f4:	fc 01       	movw	r30, r24
     3f6:	80 81       	ld	r24, Z
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <_ZN17LiquidCrystal_I2C5clearEv>

000003fe <_Z12MenuCallbacki>:
	val = max(val,minTemp);
}

void MenuCallback(int index)
{
	_curMenuIndex = index;
     3fe:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_curMenuIndex+0x1>
     402:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_curMenuIndex>
     406:	08 95       	ret

00000408 <_Z21TimerHeatingInterruptv>:
	EncoderButtonUpdate();
}

void TimerHeatingInterrupt()
{
	_timerHeating->restartTimer(_timerHeatingId);
     408:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <__data_end>
     40c:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <__data_end+0x1>
     410:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <_timerHeating>
     414:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_timerHeating+0x1>
     418:	0e 94 0c 11 	call	0x2218	; 0x2218 <_ZN11SimpleTimer12restartTimerEi>
	if(_heaterOn && _regulationDown)
     41c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <_heaterOn>
     420:	88 23       	and	r24, r24
     422:	d1 f0       	breq	.+52     	; 0x458 <_Z21TimerHeatingInterruptv+0x50>
     424:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_regulationDown>
     428:	88 23       	and	r24, r24
     42a:	b1 f0       	breq	.+44     	; 0x458 <_Z21TimerHeatingInterruptv+0x50>
	{
		if(abs(_pidOldDownVal-_pidDownVal)<10)
     42c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <_pidDownVal>
     430:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <_pidDownVal+0x1>
     434:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_pidOldDownVal>
     438:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <_pidOldDownVal+0x1>
     43c:	82 1b       	sub	r24, r18
     43e:	93 0b       	sbc	r25, r19
     440:	09 96       	adiw	r24, 0x09	; 9
     442:	43 97       	sbiw	r24, 0x13	; 19
     444:	28 f4       	brcc	.+10     	; 0x450 <_Z21TimerHeatingInterruptv+0x48>
		{
			_regulationDown = false;
     446:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_regulationDown>
			_regulationUp = true;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <_regulationUp>
		}
		_pidOldDownVal = _pidDownVal;
     450:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <_pidOldDownVal+0x1>
     454:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <_pidOldDownVal>
     458:	08 95       	ret

0000045a <_Z13HeatingUpdatev>:
	}
}

void HeatingUpdate()
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <_Z13HeatingUpdatev+0x6>
     460:	00 d0       	rcall	.+0      	; 0x462 <_Z13HeatingUpdatev+0x8>
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	if(_heaterOn)
     466:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <_heaterOn>
     46a:	88 23       	and	r24, r24
     46c:	09 f4       	brne	.+2      	; 0x470 <_Z13HeatingUpdatev+0x16>
     46e:	55 c0       	rjmp	.+170    	; 0x51a <_Z13HeatingUpdatev+0xc0>
	{
		_tempDown = _thermometer->Read();
     470:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_thermometer>
     474:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_thermometer+0x1>
     478:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_ZN11Thermometer4ReadEv>
     47c:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <_tempDown>
     480:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <_tempDown+0x1>
     484:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <_tempDown+0x2>
     488:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <_tempDown+0x3>
		_tempUp = 0;
     48c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <_tempUp>
     490:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <_tempUp+0x1>
     494:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <_tempUp+0x2>
     498:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <_tempUp+0x3>

		if(_regulationUp)
     49c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_regulationUp>
     4a0:	88 23       	and	r24, r24
     4a2:	a9 f0       	breq	.+42     	; 0x4ce <_Z13HeatingUpdatev+0x74>
		{
			_pidUp->run();
     4a4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_pidUp>
     4a8:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_pidUp+0x1>
     4ac:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN7AutoPID3runEv>
			_pidUpVal = _pidUp->atSetPoint(1);
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	60 e8       	ldi	r22, 0x80	; 128
     4b6:	7f e3       	ldi	r23, 0x3F	; 63
     4b8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_pidUp>
     4bc:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_pidUp+0x1>
     4c0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN7AutoPID10atSetPointEd>
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <_pidUpVal+0x1>
     4ca:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <_pidUpVal>
		}
		
		if(_regulationDown)
     4ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_regulationDown>
     4d2:	88 23       	and	r24, r24
     4d4:	a9 f0       	breq	.+42     	; 0x500 <_Z13HeatingUpdatev+0xa6>
		{
			_pidDown->run();
     4d6:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_pidDown>
     4da:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_pidDown+0x1>
     4de:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN7AutoPID3runEv>
			_pidDownVal = _pidDown->atSetPoint(1);
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e8       	ldi	r22, 0x80	; 128
     4e8:	7f e3       	ldi	r23, 0x3F	; 63
     4ea:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_pidDown>
     4ee:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_pidDown+0x1>
     4f2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN7AutoPID10atSetPointEd>
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <_pidDownVal+0x1>
     4fc:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_pidDownVal>
		}

		int itemValues[2]{_pidUpVal,_pidDownVal};
     500:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_pidUpVal>
     504:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_pidUpVal+0x1>
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_pidDownVal>
     510:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <_pidDownVal+0x1>
     514:	9c 83       	std	Y+4, r25	; 0x04
     516:	8b 83       	std	Y+3, r24	; 0x03
     518:	04 c0       	rjmp	.+8      	; 0x522 <_Z13HeatingUpdatev+0xc8>
		_dimmer->UpdateItemValue(itemValues);
	}
	else
	{
		int itemValues[2]{0,0};
     51a:	1a 82       	std	Y+2, r1	; 0x02
     51c:	19 82       	std	Y+1, r1	; 0x01
     51e:	1c 82       	std	Y+4, r1	; 0x04
     520:	1b 82       	std	Y+3, r1	; 0x03
		_dimmer->UpdateItemValue(itemValues);
     522:	be 01       	movw	r22, r28
     524:	6f 5f       	subi	r22, 0xFF	; 255
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_dimmer>
     52c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <_dimmer+0x1>
     530:	0e 94 22 01 	call	0x244	; 0x244 <_ZN6Dimmer15UpdateItemValueEPi>
	}
}
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <_Z13DisplayUpdatev>:

void DisplayUpdate()
{
     542:	8f 92       	push	r8
     544:	9f 92       	push	r9
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
	if(_menuActive) return;
     556:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_menuActive>
     55a:	81 11       	cpse	r24, r1
     55c:	86 c0       	rjmp	.+268    	; 0x66a <_Z13DisplayUpdatev+0x128>
	_display->ClearEdit(0);
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_display>
     566:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_display+0x1>
     56a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN11Display16x29ClearEditEi>
	int powerUp = (int)((float)_pidUpVal/(float)OUTPUT_MAX*(float)100);
	_display->PrintLineValues(0,_setTempUp,_tempUp,powerUp);
     56e:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <_pidUpVal>
     572:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <_pidUpVal+0x1>
     576:	07 2e       	mov	r0, r23
     578:	00 0c       	add	r0, r0
     57a:	88 0b       	sbc	r24, r24
     57c:	99 0b       	sbc	r25, r25
     57e:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__floatsisf>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	4f e7       	ldi	r20, 0x7F	; 127
     588:	53 e4       	ldi	r21, 0x43	; 67
     58a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__divsf3>
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	48 ec       	ldi	r20, 0xC8	; 200
     594:	52 e4       	ldi	r21, 0x42	; 66
     596:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
     59a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__fixsfsi>
     59e:	4b 01       	movw	r8, r22
     5a0:	5c 01       	movw	r10, r24
     5a2:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <_tempUp>
     5a6:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <_tempUp+0x1>
     5aa:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_tempUp+0x2>
     5ae:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <_tempUp+0x3>
     5b2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__fixsfsi>
     5b6:	6b 01       	movw	r12, r22
     5b8:	7c 01       	movw	r14, r24
     5ba:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <_setTempUp>
     5be:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <_setTempUp+0x1>
     5c2:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_setTempUp+0x2>
     5c6:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <_setTempUp+0x3>
     5ca:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__fixsfsi>
     5ce:	84 01       	movw	r16, r8
     5d0:	96 01       	movw	r18, r12
     5d2:	ab 01       	movw	r20, r22
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_display>
     5dc:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_display+0x1>
     5e0:	0e 94 44 01 	call	0x288	; 0x288 <_ZN11Display16x215PrintLineValuesEiiii>
	_display->ClearEdit(1);
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_display>
     5ec:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_display+0x1>
     5f0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN11Display16x29ClearEditEi>
	int powerDown = (int)((float)_pidDownVal/(float)OUTPUT_MAX*(float)100);
	_display->PrintLineValues(1,_setTempDown,_tempDown,powerDown);
     5f4:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <_pidDownVal>
     5f8:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <_pidDownVal+0x1>
     5fc:	07 2e       	mov	r0, r23
     5fe:	00 0c       	add	r0, r0
     600:	88 0b       	sbc	r24, r24
     602:	99 0b       	sbc	r25, r25
     604:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__floatsisf>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	4f e7       	ldi	r20, 0x7F	; 127
     60e:	53 e4       	ldi	r21, 0x43	; 67
     610:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__divsf3>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	48 ec       	ldi	r20, 0xC8	; 200
     61a:	52 e4       	ldi	r21, 0x42	; 66
     61c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
     620:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__fixsfsi>
     624:	4b 01       	movw	r8, r22
     626:	5c 01       	movw	r10, r24
     628:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <_tempDown>
     62c:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <_tempDown+0x1>
     630:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_tempDown+0x2>
     634:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_tempDown+0x3>
     638:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__fixsfsi>
     63c:	6b 01       	movw	r12, r22
     63e:	7c 01       	movw	r14, r24
     640:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <_setTempDown>
     644:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <_setTempDown+0x1>
     648:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <_setTempDown+0x2>
     64c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <_setTempDown+0x3>
     650:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__fixsfsi>
     654:	84 01       	movw	r16, r8
     656:	96 01       	movw	r18, r12
     658:	ab 01       	movw	r20, r22
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_display>
     662:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_display+0x1>
     666:	0e 94 44 01 	call	0x288	; 0x288 <_ZN11Display16x215PrintLineValuesEiiii>
}
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	08 95       	ret

00000680 <_Z20SaveSettingsInEepromv>:
		}
	}
}

void SaveSettingsInEeprom()
{
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <eeprom_read_byte>
     68e:	18 2f       	mov	r17, r24
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <eeprom_read_byte>
	int saveUpPid = EEPROM.read(memoryUpTempAdress);
	int saveDownPid = EEPROM.read(memoryDownTempAdress);
     698:	c8 2f       	mov	r28, r24
     69a:	d0 e0       	ldi	r29, 0x00	; 0
	if(saveUpPid != _pidUpVal)
     69c:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <_pidUpVal>
     6a0:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <_pidUpVal+0x1>
     6a4:	81 2f       	mov	r24, r17
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	86 17       	cp	r24, r22
     6aa:	97 07       	cpc	r25, r23
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <_Z20SaveSettingsInEepromv+0x36>
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 67 1d 	call	0x3ace	; 0x3ace <eeprom_write_byte>
	{
		EEPROM.write(memoryUpTempAdress,_pidUpVal);
	}
	if(saveDownPid != _pidDownVal)
     6b6:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <_pidDownVal>
     6ba:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <_pidDownVal+0x1>
     6be:	c6 17       	cp	r28, r22
     6c0:	d7 07       	cpc	r29, r23
     6c2:	39 f0       	breq	.+14     	; 0x6d2 <_Z20SaveSettingsInEepromv+0x52>
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
	{
		EEPROM.write(memoryDownTempAdress,_pidDownVal);
	}
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <eeprom_write_byte>
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	08 95       	ret

000006da <_Z19EncoderButtonUpdatev>:

void EncoderButtonUpdate()
{
	if(!digitalRead(encoderButtonPin))
     6da:	8a e0       	ldi	r24, 0x0A	; 10
     6dc:	0e 94 95 19 	call	0x332a	; 0x332a <digitalRead>
     6e0:	89 2b       	or	r24, r25
     6e2:	69 f4       	brne	.+26     	; 0x6fe <_Z19EncoderButtonUpdatev+0x24>
	{
		if(_menuActive)
     6e4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_menuActive>
     6e8:	88 23       	and	r24, r24
     6ea:	31 f0       	breq	.+12     	; 0x6f8 <_Z19EncoderButtonUpdatev+0x1e>
		{
			_menu->goNext();
     6ec:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_menu>
     6f0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_menu+0x1>
     6f4:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <_ZN4Menu6goNextEv>
		}
		else
		{
			_menuActive = true;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_menuActive>
     6fe:	08 95       	ret

00000700 <_Z13UpdateTempValRdi>:
		}
	}
}

void UpdateTempVal(double& val, int delta)
{
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ec 01       	movw	r28, r24
	val = val + delta;
     70e:	07 2e       	mov	r0, r23
     710:	00 0c       	add	r0, r0
     712:	88 0b       	sbc	r24, r24
     714:	99 0b       	sbc	r25, r25
     716:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__floatsisf>
     71a:	28 81       	ld	r18, Y
     71c:	39 81       	ldd	r19, Y+1	; 0x01
     71e:	4a 81       	ldd	r20, Y+2	; 0x02
     720:	5b 81       	ldd	r21, Y+3	; 0x03
     722:	0e 94 00 14 	call	0x2800	; 0x2800 <__addsf3>
     726:	6b 01       	movw	r12, r22
     728:	7c 01       	movw	r14, r24
	val = min(val,maxTemp);
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	41 ee       	ldi	r20, 0xE1	; 225
     730:	53 e4       	ldi	r21, 0x43	; 67
     732:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__cmpsf2>
     736:	87 ff       	sbrs	r24, 7
     738:	0d c0       	rjmp	.+26     	; 0x754 <_Z13UpdateTempValRdi+0x54>
	val = max(val,minTemp);
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	a9 01       	movw	r20, r18
     740:	c7 01       	movw	r24, r14
     742:	b6 01       	movw	r22, r12
     744:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__gesf2>
     748:	18 16       	cp	r1, r24
     74a:	54 f0       	brlt	.+20     	; 0x760 <_Z13UpdateTempValRdi+0x60>
     74c:	c1 2c       	mov	r12, r1
     74e:	d1 2c       	mov	r13, r1
     750:	76 01       	movw	r14, r12
     752:	06 c0       	rjmp	.+12     	; 0x760 <_Z13UpdateTempValRdi+0x60>
}

void UpdateTempVal(double& val, int delta)
{
	val = val + delta;
	val = min(val,maxTemp);
     754:	c1 2c       	mov	r12, r1
     756:	d1 2c       	mov	r13, r1
     758:	81 ee       	ldi	r24, 0xE1	; 225
     75a:	e8 2e       	mov	r14, r24
     75c:	83 e4       	ldi	r24, 0x43	; 67
     75e:	f8 2e       	mov	r15, r24
	val = max(val,minTemp);
     760:	c8 82       	st	Y, r12
     762:	d9 82       	std	Y+1, r13	; 0x01
     764:	ea 82       	std	Y+2, r14	; 0x02
     766:	fb 82       	std	Y+3, r15	; 0x03
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	08 95       	ret

00000776 <_Z13EncoderUpdatev>:
	int powerDown = (int)((float)_pidDownVal/(float)OUTPUT_MAX*(float)100);
	_display->PrintLineValues(1,_setTempDown,_tempDown,powerDown);
}

void EncoderUpdate()
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
	int enc = _encoder->readEncoder();
     77a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <_encoder>
     77e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <_encoder+0x1>
     782:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN13RotaryEncoder11readEncoderEv>
     786:	ec 01       	movw	r28, r24
	int changevalue = 1;

	if(_menuActive)
     788:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_menuActive>
     78c:	88 23       	and	r24, r24
     78e:	09 f4       	brne	.+2      	; 0x792 <_Z13EncoderUpdatev+0x1c>
     790:	63 c0       	rjmp	.+198    	; 0x858 <_Z13EncoderUpdatev+0xe2>
	{
		//РґРµР№СЃС‚РІРёРµ СЃ РїСѓРЅРєС‚Р°РјРё РјРµРЅСЋ
		if(_curMenuIndex==1)//РІРєР»СЋС‡РёС‚СЊ/РІС‹РєР»СЋС‡РёС‚СЊ РЅР°РіСЂРµРІР°С‚РµР»СЏ
     792:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <_curMenuIndex>
     796:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <_curMenuIndex+0x1>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	89 f4       	brne	.+34     	; 0x7c2 <_Z13EncoderUpdatev+0x4c>
		{
			if(enc != 0)
     7a0:	20 97       	sbiw	r28, 0x00	; 0
     7a2:	31 f0       	breq	.+12     	; 0x7b0 <_Z13EncoderUpdatev+0x3a>
			{
				_heaterOn = !_heaterOn;
     7a4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_heaterOn>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	89 27       	eor	r24, r25
     7ac:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <_heaterOn>
			}
			_display->PrintEditBool(_heaterOn);
     7b0:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <_heaterOn>
     7b4:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_display>
     7b8:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_display+0x1>
     7bc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN11Display16x213PrintEditBoolEb>
     7c0:	36 c0       	rjmp	.+108    	; 0x82e <_Z13EncoderUpdatev+0xb8>

		}
		else if(_curMenuIndex ==2)//РЅР°СЃС‚СЂРѕР№РєР° С‚РµРјРїРµСЂР°С‚СѓСЂС‹ РІРµСЂС…РЅРµРіРѕ РЅР°РіСЂРµРІР°С‚РµР»СЏ
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	91 05       	cpc	r25, r1
     7c6:	21 f4       	brne	.+8      	; 0x7d0 <_Z13EncoderUpdatev+0x5a>
		{
			UpdateTempVal(_tempUp, enc);
     7c8:	be 01       	movw	r22, r28
     7ca:	8a eb       	ldi	r24, 0xBA	; 186
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	06 c0       	rjmp	.+12     	; 0x7dc <_Z13EncoderUpdatev+0x66>
			_display->PrintEditInt(_tempUp);
		}
		else if(_curMenuIndex==3)//РЅР°СЃС‚СЂРѕР№РєР° С‚РµРјРїРµСЂР°С‚СѓСЂС‹ РЅРёР¶РЅРµРіРѕ РЅР°РіСЂРµРІР°С‚РµР»СЏ
     7d0:	83 30       	cpi	r24, 0x03	; 3
     7d2:	91 05       	cpc	r25, r1
     7d4:	b1 f4       	brne	.+44     	; 0x802 <_Z13EncoderUpdatev+0x8c>
		{
			UpdateTempVal(_tempDown, enc);
     7d6:	be 01       	movw	r22, r28
     7d8:	86 eb       	ldi	r24, 0xB6	; 182
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 80 03 	call	0x700	; 0x700 <_Z13UpdateTempValRdi>
			_display->PrintEditInt(_tempUp);
     7e0:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <_tempUp>
     7e4:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <_tempUp+0x1>
     7e8:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_tempUp+0x2>
     7ec:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <_tempUp+0x3>
     7f0:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__fixsfsi>
     7f4:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_display>
     7f8:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_display+0x1>
     7fc:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN11Display16x212PrintEditIntEi>
     800:	16 c0       	rjmp	.+44     	; 0x82e <_Z13EncoderUpdatev+0xb8>
		}
		else if (_curMenuIndex == 4)//РІС‹С…РѕРґ РёР· РјРµРЅСЋ РЅР°СЃС‚СЂРѕРµРє
     802:	04 97       	sbiw	r24, 0x04	; 4
     804:	a1 f4       	brne	.+40     	; 0x82e <_Z13EncoderUpdatev+0xb8>
		{
			_curMenuIndex=0;
     806:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <_curMenuIndex+0x1>
     80a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <_curMenuIndex>
			_menu->goBack();
     80e:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_menu>
     812:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_menu+0x1>
     816:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN4Menu6goBackEv>
			_display->Clear();
     81a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_display>
     81e:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_display+0x1>
     822:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN11Display16x25ClearEv>
			_menuActive = false;
     826:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_menuActive>
			SaveSettingsInEeprom();
     82a:	0e 94 40 03 	call	0x680	; 0x680 <_Z20SaveSettingsInEepromv>
		}
		//Р»РёСЃС‚Р°РЅРёРµ РјРµРЅСЋ
		if(enc > 0)
     82e:	1c 16       	cp	r1, r28
     830:	1d 06       	cpc	r1, r29
     832:	44 f4       	brge	.+16     	; 0x844 <_Z13EncoderUpdatev+0xce>
		{
			_menu->goUp();
     834:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_menu>
     838:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_menu+0x1>
		else if(enc<0)
		{
			_menu->goDown();
		}
	}
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
			SaveSettingsInEeprom();
		}
		//Р»РёСЃС‚Р°РЅРёРµ РјРµРЅСЋ
		if(enc > 0)
		{
			_menu->goUp();
     840:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <_ZN4Menu4goUpEv>
		}
		else if(enc<0)
     844:	cd 2b       	or	r28, r29
     846:	41 f0       	breq	.+16     	; 0x858 <_Z13EncoderUpdatev+0xe2>
		{
			_menu->goDown();
     848:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_menu>
     84c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_menu+0x1>
		}
	}
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
		{
			_menu->goUp();
		}
		else if(enc<0)
		{
			_menu->goDown();
     854:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <_ZN4Menu6goDownEv>
		}
	}
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <loop>:
	_timerHeatingId =_timerHeating->setInterval(timerInterval,TimerHeatingInterrupt);
}

void loop()
{
	_timerHeating->run();
     85e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <_timerHeating>
     862:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_timerHeating+0x1>
     866:	0e 94 47 10 	call	0x208e	; 0x208e <_ZN11SimpleTimer3runEv>
	_dimmer->Update();
     86a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_dimmer>
     86e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <_dimmer+0x1>
     872:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN6Dimmer6UpdateEv>
	HeatingUpdate();
     876:	0e 94 2d 02 	call	0x45a	; 0x45a <_Z13HeatingUpdatev>
	DisplayUpdate();
     87a:	0e 94 a1 02 	call	0x542	; 0x542 <_Z13DisplayUpdatev>
	EncoderUpdate();
     87e:	0e 94 bb 03 	call	0x776	; 0x776 <_Z13EncoderUpdatev>
	EncoderButtonUpdate();
     882:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_Z19EncoderButtonUpdatev>

00000886 <_Z15CreateMenuItemsv>:
{
	_curMenuIndex = index;
}

MItm* CreateMenuItems()
{
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	ca 56       	subi	r28, 0x6A	; 106
     898:	d1 09       	sbc	r29, r1
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
		MItm("SETTINGS",0,0), //СЌС‚РѕС‚ РїСѓРЅРєС‚ СЏРІР»СЏРµС‚СЃСЏ Р·Р°РіРѕР»РѕРІРєРѕРј РїРѕРґРјРµРЅСЋ СЃ РёРЅРґРµРєСЃРѕРј 0 (С‚Рѕ РµСЃС‚СЊ РіР»Р°РІРЅРѕРіРѕ РјРµРЅСЋ)
		MItm("ON/OFF",1), //РїСѓРЅРєС‚ РіР»Р°РІРЅРѕРіРѕ РјРµРЅСЋ, РєРѕС‚РѕСЂС‹Р№ РїСЂРё РІС‹Р±РѕСЂРµ РїРµСЂРµС…РѕРґРёС‚ РЅР° РїРѕРґРјРµРЅСЋ СЃ РёРЅРґРµРєСЃРѕРј 1
		MItm("Set temp in up",2), //СЃ РёРЅРґРµРєСЃРѕРј 2
		MItm("Set temp in down",3), //Рё СЃ РёРЅРґРµРєСЃРѕРј 3 СЃРѕРѕС‚РІРµС‚СЃС‚РІРµРЅРЅРѕ
		MItm(" <<Exit",4) //РІРѕС‚ С‚Р°Рє РјРѕР¶РЅРѕ СЃРѕР·РґР°РІР°С‚СЊ РєРЅРѕРїРєСѓ "РќР°Р·Р°Рґ"
	};
     8a4:	6d e2       	ldi	r22, 0x2D	; 45
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	ce 01       	movw	r24, r28
     8aa:	8b 59       	subi	r24, 0x9B	; 155
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	be 01       	movw	r22, r28
     8bc:	6b 59       	subi	r22, 0x9B	; 155
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	7c 01       	movw	r14, r24
     8c6:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN4MItmC1E6Stringii>
     8ca:	ce 01       	movw	r24, r28
     8cc:	8b 59       	subi	r24, 0x9B	; 155
     8ce:	9f 4f       	sbci	r25, 0xFF	; 255
     8d0:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
     8d4:	66 e3       	ldi	r22, 0x36	; 54
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	ce 01       	movw	r24, r28
     8da:	8b 59       	subi	r24, 0x9B	; 155
     8dc:	9f 4f       	sbci	r25, 0xFF	; 255
     8de:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
     8e2:	2f ef       	ldi	r18, 0xFF	; 255
     8e4:	3f ef       	ldi	r19, 0xFF	; 255
     8e6:	41 e0       	ldi	r20, 0x01	; 1
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	be 01       	movw	r22, r28
     8ec:	6b 59       	subi	r22, 0x9B	; 155
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	ce 01       	movw	r24, r28
     8f2:	45 96       	adiw	r24, 0x15	; 21
     8f4:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN4MItmC1E6Stringii>
     8f8:	ce 01       	movw	r24, r28
     8fa:	8b 59       	subi	r24, 0x9B	; 155
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
     902:	6d e3       	ldi	r22, 0x3D	; 61
     904:	71 e0       	ldi	r23, 0x01	; 1
     906:	ce 01       	movw	r24, r28
     908:	8b 59       	subi	r24, 0x9B	; 155
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
     910:	2f ef       	ldi	r18, 0xFF	; 255
     912:	3f ef       	ldi	r19, 0xFF	; 255
     914:	42 e0       	ldi	r20, 0x02	; 2
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	be 01       	movw	r22, r28
     91a:	6b 59       	subi	r22, 0x9B	; 155
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	89 96       	adiw	r24, 0x29	; 41
     922:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN4MItmC1E6Stringii>
     926:	ce 01       	movw	r24, r28
     928:	8b 59       	subi	r24, 0x9B	; 155
     92a:	9f 4f       	sbci	r25, 0xFF	; 255
     92c:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
     930:	6c e4       	ldi	r22, 0x4C	; 76
     932:	71 e0       	ldi	r23, 0x01	; 1
     934:	ce 01       	movw	r24, r28
     936:	8b 59       	subi	r24, 0x9B	; 155
     938:	9f 4f       	sbci	r25, 0xFF	; 255
     93a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
     93e:	2f ef       	ldi	r18, 0xFF	; 255
     940:	3f ef       	ldi	r19, 0xFF	; 255
     942:	43 e0       	ldi	r20, 0x03	; 3
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	be 01       	movw	r22, r28
     948:	6b 59       	subi	r22, 0x9B	; 155
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	ce 01       	movw	r24, r28
     94e:	cd 96       	adiw	r24, 0x3d	; 61
     950:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN4MItmC1E6Stringii>
     954:	ce 01       	movw	r24, r28
     956:	8b 59       	subi	r24, 0x9B	; 155
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
     95e:	6d e5       	ldi	r22, 0x5D	; 93
     960:	71 e0       	ldi	r23, 0x01	; 1
     962:	ce 01       	movw	r24, r28
     964:	8b 59       	subi	r24, 0x9B	; 155
     966:	9f 4f       	sbci	r25, 0xFF	; 255
     968:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	3f ef       	ldi	r19, 0xFF	; 255
     970:	44 e0       	ldi	r20, 0x04	; 4
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	be 01       	movw	r22, r28
     976:	6b 59       	subi	r22, 0x9B	; 155
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	8f 5a       	subi	r24, 0xAF	; 175
     97e:	9f 4f       	sbci	r25, 0xFF	; 255
     980:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN4MItmC1E6Stringii>
     984:	ce 01       	movw	r24, r28
     986:	8b 59       	subi	r24, 0x9B	; 155
     988:	9f 4f       	sbci	r25, 0xFF	; 255
     98a:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
     98e:	8e 01       	movw	r16, r28
     990:	0b 59       	subi	r16, 0x9B	; 155
     992:	1f 4f       	sbci	r17, 0xFF	; 255
     994:	04 51       	subi	r16, 0x14	; 20
     996:	11 09       	sbc	r17, r1
#ifndef MYMENU_H
#define MYMENU_H

#include <LiquidCrystal_I2C.h>

class MItm
     998:	c8 01       	movw	r24, r16
     99a:	0e 96       	adiw	r24, 0x0e	; 14
     99c:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
     9a0:	c8 01       	movw	r24, r16
     9a2:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
     9a6:	e0 16       	cp	r14, r16
     9a8:	f1 06       	cpc	r15, r17
     9aa:	a1 f7       	brne	.-24     	; 0x994 <__stack+0x95>
	return items;
}
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	c6 59       	subi	r28, 0x96	; 150
     9b2:	df 4f       	sbci	r29, 0xFF	; 255
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	08 95       	ret

000009cc <setup>:
int _pidUpVal =0;
int _pidDownVal =0;
int _pidOldDownVal =0;
int _timerHeatingId;

void setup() {
     9cc:	2f 92       	push	r2
     9ce:	3f 92       	push	r3
     9d0:	4f 92       	push	r4
     9d2:	5f 92       	push	r5
     9d4:	6f 92       	push	r6
     9d6:	7f 92       	push	r7
     9d8:	8f 92       	push	r8
     9da:	9f 92       	push	r9
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	2e 97       	sbiw	r28, 0x0e	; 14
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёРјРёСЂР°
	DimmerItem dimmerItems[2]{DimmerItem(dimUpPin),DimmerItem(dimDownPin)};
     a00:	63 e0       	ldi	r22, 0x03	; 3
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	ce 01       	movw	r24, r28
     a06:	0b 96       	adiw	r24, 0x0b	; 11
     a08:	0e 94 2b 01 	call	0x256	; 0x256 <_ZN10DimmerItemC1Ei>
     a0c:	64 e0       	ldi	r22, 0x04	; 4
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	ce 01       	movw	r24, r28
     a12:	0d 96       	adiw	r24, 0x0d	; 13
     a14:	0e 94 2b 01 	call	0x256	; 0x256 <_ZN10DimmerItemC1Ei>
	int itemValues[2]{0,0};
     a18:	18 86       	std	Y+8, r1	; 0x08
     a1a:	1f 82       	std	Y+7, r1	; 0x07
     a1c:	1a 86       	std	Y+10, r1	; 0x0a
     a1e:	19 86       	std	Y+9, r1	; 0x09
	_dimmer = new Dimmer(zeroPin,dimmerItems,itemValues);
     a20:	8c e0       	ldi	r24, 0x0C	; 12
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     a28:	4c 01       	movw	r8, r24
     a2a:	9e 01       	movw	r18, r28
     a2c:	29 5f       	subi	r18, 0xF9	; 249
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	ae 01       	movw	r20, r28
     a32:	45 5f       	subi	r20, 0xF5	; 245
     a34:	5f 4f       	sbci	r21, 0xFF	; 255
     a36:	62 e0       	ldi	r22, 0x02	; 2
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN6DimmerC1EiP10DimmerItemPi>
     a3e:	90 92 cf 01 	sts	0x01CF, r9	; 0x8001cf <_dimmer+0x1>
     a42:	80 92 ce 01 	sts	0x01CE, r8	; 0x8001ce <_dimmer>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ С‚РµСЂРјРѕРјРµС‚СЂР°
	_thermometer = new Thermometer(therPinDO,therPinCS,therPinCLK);
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     a4e:	4c 01       	movw	r8, r24
     a50:	27 e0       	ldi	r18, 0x07	; 7
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	46 e0       	ldi	r20, 0x06	; 6
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	65 e0       	ldi	r22, 0x05	; 5
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_ZN11ThermometerC1Eiii>
     a60:	90 92 cd 01 	sts	0x01CD, r9	; 0x8001cd <_thermometer+0x1>
     a64:	80 92 cc 01 	sts	0x01CC, r8	; 0x8001cc <_thermometer>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёСЃРїР»РµСЏ
	_lcd = new LiquidCrystal_I2C(0x27, numColsLcd, numRowsLcd);
     a68:	8c e0       	ldi	r24, 0x0C	; 12
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     a70:	4c 01       	movw	r8, r24
     a72:	00 e0       	ldi	r16, 0x00	; 0
     a74:	22 e0       	ldi	r18, 0x02	; 2
     a76:	40 e1       	ldi	r20, 0x10	; 16
     a78:	67 e2       	ldi	r22, 0x27	; 39
     a7a:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN17LiquidCrystal_I2CC1Ehhhh>
     a7e:	90 92 c3 01 	sts	0x01C3, r9	; 0x8001c3 <_lcd+0x1>
     a82:	80 92 c2 01 	sts	0x01C2, r8	; 0x8001c2 <_lcd>
	_lcd->begin();
     a86:	c4 01       	movw	r24, r8
     a88:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN17LiquidCrystal_I2C5beginEv>
	_lcd->clear();
     a8c:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <_lcd>
     a90:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <_lcd+0x1>
     a94:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN17LiquidCrystal_I2C5clearEv>
	_display = new Display16x2(_lcd);
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     aa0:	4c 01       	movw	r8, r24
     aa2:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <_lcd>
     aa6:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <_lcd+0x1>
     aaa:	0e 94 40 01 	call	0x280	; 0x280 <_ZN11Display16x2C1EP17LiquidCrystal_I2C>
     aae:	90 92 cb 01 	sts	0x01CB, r9	; 0x8001cb <_display+0x1>
     ab2:	80 92 ca 01 	sts	0x01CA, r8	; 0x8001ca <_display>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ СЌРЅРєРѕРґРµСЂР°
	_encoder = new RotaryEncoder(encoderAPin,encoderBPin,5,6,1000);
     ab6:	86 e1       	ldi	r24, 0x16	; 22
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     abe:	4c 01       	movw	r8, r24
     ac0:	88 ee       	ldi	r24, 0xE8	; 232
     ac2:	e8 2e       	mov	r14, r24
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	f8 2e       	mov	r15, r24
     ac8:	06 e0       	ldi	r16, 0x06	; 6
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	25 e0       	ldi	r18, 0x05	; 5
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	4c e0       	ldi	r20, 0x0C	; 12
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	6b e0       	ldi	r22, 0x0B	; 11
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	c4 01       	movw	r24, r8
     ada:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN13RotaryEncoderC1Eiiiii>
     ade:	90 92 c5 01 	sts	0x01C5, r9	; 0x8001c5 <_encoder+0x1>
     ae2:	80 92 c4 01 	sts	0x01C4, r8	; 0x8001c4 <_encoder>
	pinMode(encoderButtonPin, INPUT);
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	8a e0       	ldi	r24, 0x0A	; 10
     aea:	0e 94 2a 19 	call	0x3254	; 0x3254 <pinMode>
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ pid
	_pidUp = new AutoPID(&_tempUp, &_setTempUp, &_outputUpVal, OUTPUT_MIN, OUTPUT_MAX, KP, KI, KD);
     aee:	83 e3       	ldi	r24, 0x33	; 51
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     af6:	4c 01       	movw	r8, r24
     af8:	1f 92       	push	r1
     afa:	1f 92       	push	r1
     afc:	1f 92       	push	r1
     afe:	1f 92       	push	r1
     b00:	99 e3       	ldi	r25, 0x39	; 57
     b02:	49 2e       	mov	r4, r25
     b04:	4f 92       	push	r4
     b06:	2d e9       	ldi	r18, 0x9D	; 157
     b08:	52 2e       	mov	r5, r18
     b0a:	5f 92       	push	r5
     b0c:	39 e4       	ldi	r19, 0x49	; 73
     b0e:	63 2e       	mov	r6, r19
     b10:	6f 92       	push	r6
     b12:	42 e5       	ldi	r20, 0x52	; 82
     b14:	74 2e       	mov	r7, r20
     b16:	7f 92       	push	r7
     b18:	5d e3       	ldi	r21, 0x3D	; 61
     b1a:	35 2e       	mov	r3, r21
     b1c:	3f 92       	push	r3
     b1e:	65 ef       	ldi	r22, 0xF5	; 245
     b20:	26 2e       	mov	r2, r22
     b22:	2f 92       	push	r2
     b24:	82 ec       	ldi	r24, 0xC2	; 194
     b26:	8f 93       	push	r24
     b28:	9f e8       	ldi	r25, 0x8F	; 143
     b2a:	9f 93       	push	r25
     b2c:	a1 2c       	mov	r10, r1
     b2e:	b1 2c       	mov	r11, r1
     b30:	7f e7       	ldi	r23, 0x7F	; 127
     b32:	c7 2e       	mov	r12, r23
     b34:	73 e4       	ldi	r23, 0x43	; 67
     b36:	d7 2e       	mov	r13, r23
     b38:	e1 2c       	mov	r14, r1
     b3a:	f1 2c       	mov	r15, r1
     b3c:	87 01       	movw	r16, r14
     b3e:	2a ea       	ldi	r18, 0xAA	; 170
     b40:	31 e0       	ldi	r19, 0x01	; 1
     b42:	42 eb       	ldi	r20, 0xB2	; 178
     b44:	51 e0       	ldi	r21, 0x01	; 1
     b46:	6a eb       	ldi	r22, 0xBA	; 186
     b48:	71 e0       	ldi	r23, 0x01	; 1
     b4a:	c4 01       	movw	r24, r8
     b4c:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN7AutoPIDC1EPdS0_S0_ddddd>
     b50:	90 92 c9 01 	sts	0x01C9, r9	; 0x8001c9 <_pidUp+0x1>
     b54:	80 92 c8 01 	sts	0x01C8, r8	; 0x8001c8 <_pidUp>
	// РµСЃР»Рё С‚РµРјРїРµСЂР°С‚СѓСЂР° РІС‹С€Рµ 4 РіСЂР°РґСѓСЃРѕРІ РЅРёР¶Рµ РёР»Рё РІС‹С€Рµ Р·Р°РґР°РЅРЅРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, OUTPUT Р±СѓРґРµС‚ СѓСЃС‚Р°РЅРѕРІР»РµРЅ РЅР° РјРёРЅ РёР»Рё РјР°РєСЃ СЃРѕРѕС‚РІРµС‚СЃС‚РІРµРЅРЅРѕ
	_pidUp->setBangBang(4);
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	60 e8       	ldi	r22, 0x80	; 128
     b5e:	70 e4       	ldi	r23, 0x40	; 64
     b60:	c4 01       	movw	r24, r8
     b62:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_ZN7AutoPID11setBangBangEd>
	//set PID update interval to 4000ms
	_pidUp->setTimeStep(4000);
     b66:	40 ea       	ldi	r20, 0xA0	; 160
     b68:	5f e0       	ldi	r21, 0x0F	; 15
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_pidUp>
     b72:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <_pidUp+0x1>
     b76:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN7AutoPID11setTimeStepEm>
	
	_pidDown = new AutoPID(&_tempDown, &_setTempDown, &_outputDownVal, OUTPUT_MIN, OUTPUT_MAX, KP, KI, KD);
     b7a:	83 e3       	ldi	r24, 0x33	; 51
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     b82:	4c 01       	movw	r8, r24
     b84:	1f 92       	push	r1
     b86:	1f 92       	push	r1
     b88:	1f 92       	push	r1
     b8a:	1f 92       	push	r1
     b8c:	4f 92       	push	r4
     b8e:	5f 92       	push	r5
     b90:	6f 92       	push	r6
     b92:	7f 92       	push	r7
     b94:	3f 92       	push	r3
     b96:	2f 92       	push	r2
     b98:	82 ec       	ldi	r24, 0xC2	; 194
     b9a:	8f 93       	push	r24
     b9c:	9f e8       	ldi	r25, 0x8F	; 143
     b9e:	9f 93       	push	r25
     ba0:	26 ea       	ldi	r18, 0xA6	; 166
     ba2:	31 e0       	ldi	r19, 0x01	; 1
     ba4:	4e ea       	ldi	r20, 0xAE	; 174
     ba6:	51 e0       	ldi	r21, 0x01	; 1
     ba8:	66 eb       	ldi	r22, 0xB6	; 182
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	c4 01       	movw	r24, r8
     bae:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN7AutoPIDC1EPdS0_S0_ddddd>
     bb2:	90 92 c7 01 	sts	0x01C7, r9	; 0x8001c7 <_pidDown+0x1>
     bb6:	80 92 c6 01 	sts	0x01C6, r8	; 0x8001c6 <_pidDown>
	// РµСЃР»Рё С‚РµРјРїРµСЂР°С‚СѓСЂР° РІС‹С€Рµ 4 РіСЂР°РґСѓСЃРѕРІ РЅРёР¶Рµ РёР»Рё РІС‹С€Рµ Р·Р°РґР°РЅРЅРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, OUTPUT Р±СѓРґРµС‚ СѓСЃС‚Р°РЅРѕРІР»РµРЅ РЅР° РјРёРЅ РёР»Рё РјР°РєСЃ СЃРѕРѕС‚РІРµС‚СЃС‚РІРµРЅРЅРѕ
	_pidDown->setBangBang(4);
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	60 e8       	ldi	r22, 0x80	; 128
     bc0:	70 e4       	ldi	r23, 0x40	; 64
     bc2:	c4 01       	movw	r24, r8
     bc4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_ZN7AutoPID11setBangBangEd>
	//set PID update interval to 4000ms
	_pidDown->setTimeStep(4000);
     bc8:	40 ea       	ldi	r20, 0xA0	; 160
     bca:	5f e0       	ldi	r21, 0x0F	; 15
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_pidDown>
     bd4:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_pidDown+0x1>
     bd8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN7AutoPID11setTimeStepEm>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <eeprom_read_byte>
	
	//СѓС‚СЃР°РЅРѕРІР»РµРЅР°СЏ С‚РµРјРїРµСЂР°С‚СѓСЂР°	(РґРѕР»Р¶РЅРѕ СѓСЃС‚Р°РЅР°РІР»РёРІР°С‚СЃСЏ РІ РЅР°СЃС‚СЂРѕР№РєР°С…)
	_setTempUp = EEPROM.read(memoryUpTempAdress);
     be4:	68 2f       	mov	r22, r24
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__floatunsisf>
     bf0:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <_setTempUp>
     bf4:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <_setTempUp+0x1>
     bf8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <_setTempUp+0x2>
     bfc:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <_setTempUp+0x3>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <eeprom_read_byte>
	_setTempDown = EEPROM.read(memoryDownTempAdress);
     c08:	68 2f       	mov	r22, r24
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__floatunsisf>
     c14:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <_setTempDown>
     c18:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <_setTempDown+0x1>
     c1c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <_setTempDown+0x2>
     c20:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <_setTempDown+0x3>

	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РјРµРЅСЋ
	_menu = new Menu(CreateMenuItems(), menuItems, _lcd, MenuCallback,numRowsLcd, ">");
     c24:	0e 94 43 04 	call	0x886	; 0x886 <_Z15CreateMenuItemsv>
     c28:	3c 01       	movw	r6, r24
     c2a:	65 e6       	ldi	r22, 0x65	; 101
     c2c:	71 e0       	ldi	r23, 0x01	; 1
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
     c36:	86 e2       	ldi	r24, 0x26	; 38
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     c3e:	4c 01       	movw	r8, r24
     c40:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <_lcd>
     c44:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <_lcd+0x1>
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	6c 01       	movw	r12, r24
     c4e:	e2 e0       	ldi	r30, 0x02	; 2
     c50:	ee 2e       	mov	r14, r30
     c52:	f1 2c       	mov	r15, r1
     c54:	0f ef       	ldi	r16, 0xFF	; 255
     c56:	11 e0       	ldi	r17, 0x01	; 1
     c58:	45 e0       	ldi	r20, 0x05	; 5
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	b3 01       	movw	r22, r6
     c5e:	c4 01       	movw	r24, r8
     c60:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String>
     c64:	90 92 c1 01 	sts	0x01C1, r9	; 0x8001c1 <_menu+0x1>
     c68:	80 92 c0 01 	sts	0x01C0, r8	; 0x8001c0 <_menu>
     c6c:	c6 01       	movw	r24, r12
     c6e:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>

	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ С‚Р°Р№РјРµСЂР°
	_timerHeating = new SimpleTimer();
     c72:	8c ea       	ldi	r24, 0xAC	; 172
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
     c7a:	4c 01       	movw	r8, r24
     c7c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_ZN11SimpleTimerC1Ev>
     c80:	90 92 bf 01 	sts	0x01BF, r9	; 0x8001bf <_timerHeating+0x1>
     c84:	80 92 be 01 	sts	0x01BE, r8	; 0x8001be <_timerHeating>
	_timerHeatingId =_timerHeating->setInterval(timerInterval,TimerHeatingInterrupt);
     c88:	24 e0       	ldi	r18, 0x04	; 4
     c8a:	32 e0       	ldi	r19, 0x02	; 2
     c8c:	40 ea       	ldi	r20, 0xA0	; 160
     c8e:	56 e8       	ldi	r21, 0x86	; 134
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	c4 01       	movw	r24, r8
     c96:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_ZN11SimpleTimer11setIntervalElPFvvE>
     c9a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
     c9e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
int _pidOldDownVal =0;
int _timerHeatingId;

void setup() {
	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёРјРёСЂР°
	DimmerItem dimmerItems[2]{DimmerItem(dimUpPin),DimmerItem(dimDownPin)};
     ca2:	ce 01       	movw	r24, r28
     ca4:	0d 96       	adiw	r24, 0x0d	; 13
     ca6:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN10DimmerItemD1Ev>
     caa:	ce 01       	movw	r24, r28
     cac:	0b 96       	adiw	r24, 0x0b	; 11
     cae:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN10DimmerItemD1Ev>
	_menu = new Menu(CreateMenuItems(), menuItems, _lcd, MenuCallback,numRowsLcd, ">");

	//РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ С‚Р°Р№РјРµСЂР°
	_timerHeating = new SimpleTimer();
	_timerHeatingId =_timerHeating->setInterval(timerInterval,TimerHeatingInterrupt);
}
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	2e 96       	adiw	r28, 0x0e	; 14
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	9f 90       	pop	r9
     cde:	8f 90       	pop	r8
     ce0:	7f 90       	pop	r7
     ce2:	6f 90       	pop	r6
     ce4:	5f 90       	pop	r5
     ce6:	4f 90       	pop	r4
     ce8:	3f 90       	pop	r3
     cea:	2f 90       	pop	r2
     cec:	08 95       	ret

00000cee <_ZN7AutoPIDC1EPdS0_S0_ddddd>:
}//void AutoPID::setBangBang

void AutoPID::setOutputRange(double outputMin, double outputMax) {
  _outputMin = outputMin;
  _outputMax = outputMax;
}//void AutoPID::setOutputRange
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	fc 01       	movw	r30, r24
     d08:	75 8f       	std	Z+29, r23	; 0x1d
     d0a:	64 8f       	std	Z+28, r22	; 0x1c
     d0c:	57 8f       	std	Z+31, r21	; 0x1f
     d0e:	46 8f       	std	Z+30, r20	; 0x1e
     d10:	31 a3       	std	Z+33, r19	; 0x21
     d12:	20 a3       	std	Z+32, r18	; 0x20
     d14:	e2 a2       	std	Z+34, r14	; 0x22
     d16:	f3 a2       	std	Z+35, r15	; 0x23
     d18:	04 a3       	std	Z+36, r16	; 0x24
     d1a:	15 a3       	std	Z+37, r17	; 0x25
     d1c:	a6 a2       	std	Z+38, r10	; 0x26
     d1e:	b7 a2       	std	Z+39, r11	; 0x27
     d20:	c0 a6       	std	Z+40, r12	; 0x28
     d22:	d1 a6       	std	Z+41, r13	; 0x29
     d24:	8d 85       	ldd	r24, Y+13	; 0x0d
     d26:	9e 85       	ldd	r25, Y+14	; 0x0e
     d28:	af 85       	ldd	r26, Y+15	; 0x0f
     d2a:	b8 89       	ldd	r27, Y+16	; 0x10
     d2c:	80 83       	st	Z, r24
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	a2 83       	std	Z+2, r26	; 0x02
     d32:	b3 83       	std	Z+3, r27	; 0x03
     d34:	89 89       	ldd	r24, Y+17	; 0x11
     d36:	9a 89       	ldd	r25, Y+18	; 0x12
     d38:	ab 89       	ldd	r26, Y+19	; 0x13
     d3a:	bc 89       	ldd	r27, Y+20	; 0x14
     d3c:	84 83       	std	Z+4, r24	; 0x04
     d3e:	95 83       	std	Z+5, r25	; 0x05
     d40:	a6 83       	std	Z+6, r26	; 0x06
     d42:	b7 83       	std	Z+7, r27	; 0x07
     d44:	8d 89       	ldd	r24, Y+21	; 0x15
     d46:	9e 89       	ldd	r25, Y+22	; 0x16
     d48:	af 89       	ldd	r26, Y+23	; 0x17
     d4a:	b8 8d       	ldd	r27, Y+24	; 0x18
     d4c:	80 87       	std	Z+8, r24	; 0x08
     d4e:	91 87       	std	Z+9, r25	; 0x09
     d50:	a2 87       	std	Z+10, r26	; 0x0a
     d52:	b3 87       	std	Z+11, r27	; 0x0b
     d54:	88 ee       	ldi	r24, 0xE8	; 232
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	82 a7       	std	Z+42, r24	; 0x2a
     d5e:	93 a7       	std	Z+43, r25	; 0x2b
     d60:	a4 a7       	std	Z+44, r26	; 0x2c
     d62:	b5 a7       	std	Z+45, r27	; 0x2d
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	08 95       	ret

00000d7a <_ZN7AutoPID11setBangBangEd>:
     d7a:	fc 01       	movw	r30, r24
     d7c:	44 8b       	std	Z+20, r20	; 0x14
     d7e:	55 8b       	std	Z+21, r21	; 0x15
     d80:	66 8b       	std	Z+22, r22	; 0x16
     d82:	77 8b       	std	Z+23, r23	; 0x17
     d84:	40 8f       	std	Z+24, r20	; 0x18
     d86:	51 8f       	std	Z+25, r21	; 0x19
     d88:	62 8f       	std	Z+26, r22	; 0x1a
     d8a:	73 8f       	std	Z+27, r23	; 0x1b
     d8c:	08 95       	ret

00000d8e <_ZN7AutoPID11setTimeStepEm>:

void AutoPID::setTimeStep(unsigned long timeStep){
  _timeStep = timeStep;
     d8e:	fc 01       	movw	r30, r24
     d90:	42 a7       	std	Z+42, r20	; 0x2a
     d92:	53 a7       	std	Z+43, r21	; 0x2b
     d94:	64 a7       	std	Z+44, r22	; 0x2c
     d96:	75 a7       	std	Z+45, r23	; 0x2d
     d98:	08 95       	ret

00000d9a <_ZN7AutoPID10atSetPointEd>:
}


bool AutoPID::atSetPoint(double threshold) {
     d9a:	8f 92       	push	r8
     d9c:	9f 92       	push	r9
     d9e:	af 92       	push	r10
     da0:	bf 92       	push	r11
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	4a 01       	movw	r8, r20
     db0:	5b 01       	movw	r10, r22
  return abs(*_setpoint - *_input) <= threshold;
     db2:	dc 01       	movw	r26, r24
     db4:	5e 96       	adiw	r26, 0x1e	; 30
     db6:	ed 91       	ld	r30, X+
     db8:	fc 91       	ld	r31, X
     dba:	5f 97       	sbiw	r26, 0x1f	; 31
     dbc:	5c 96       	adiw	r26, 0x1c	; 28
     dbe:	0d 90       	ld	r0, X+
     dc0:	bc 91       	ld	r27, X
     dc2:	a0 2d       	mov	r26, r0
     dc4:	2d 91       	ld	r18, X+
     dc6:	3d 91       	ld	r19, X+
     dc8:	4d 91       	ld	r20, X+
     dca:	5c 91       	ld	r21, X
     dcc:	60 81       	ld	r22, Z
     dce:	71 81       	ldd	r23, Z+1	; 0x01
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	93 81       	ldd	r25, Z+3	; 0x03
     dd4:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__subsf3>
     dd8:	6b 01       	movw	r12, r22
     dda:	7c 01       	movw	r14, r24
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	a9 01       	movw	r20, r18
     de2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__gesf2>
     de6:	18 16       	cp	r1, r24
     de8:	24 f0       	brlt	.+8      	; 0xdf2 <_ZN7AutoPID10atSetPointEd+0x58>
     dea:	f7 fa       	bst	r15, 7
     dec:	f0 94       	com	r15
     dee:	f7 f8       	bld	r15, 7
     df0:	f0 94       	com	r15
     df2:	c1 e0       	ldi	r28, 0x01	; 1
     df4:	a5 01       	movw	r20, r10
     df6:	94 01       	movw	r18, r8
     df8:	c7 01       	movw	r24, r14
     dfa:	b6 01       	movw	r22, r12
     dfc:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__cmpsf2>
     e00:	18 16       	cp	r1, r24
     e02:	0c f4       	brge	.+2      	; 0xe06 <_ZN7AutoPID10atSetPointEd+0x6c>
     e04:	c0 e0       	ldi	r28, 0x00	; 0
}//bool AutoPID::atSetPoint
     e06:	8c 2f       	mov	r24, r28
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	bf 90       	pop	r11
     e16:	af 90       	pop	r10
     e18:	9f 90       	pop	r9
     e1a:	8f 90       	pop	r8
     e1c:	08 95       	ret

00000e1e <_ZN7AutoPID5resetEv>:

void AutoPID::stop() {
  _stopped = true;
  reset();
}
void AutoPID::reset() {
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	ec 01       	movw	r28, r24
  _lastStep = millis();
     e24:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     e28:	6e a7       	std	Y+46, r22	; 0x2e
     e2a:	7f a7       	std	Y+47, r23	; 0x2f
     e2c:	88 ab       	std	Y+48, r24	; 0x30
     e2e:	99 ab       	std	Y+49, r25	; 0x31
  _integral = 0;
     e30:	1c 86       	std	Y+12, r1	; 0x0c
     e32:	1d 86       	std	Y+13, r1	; 0x0d
     e34:	1e 86       	std	Y+14, r1	; 0x0e
     e36:	1f 86       	std	Y+15, r1	; 0x0f
  _previousError = 0;
     e38:	18 8a       	std	Y+16, r1	; 0x10
     e3a:	19 8a       	std	Y+17, r1	; 0x11
     e3c:	1a 8a       	std	Y+18, r1	; 0x12
     e3e:	1b 8a       	std	Y+19, r1	; 0x13
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <_ZN7AutoPID3runEv>:

bool AutoPID::atSetPoint(double threshold) {
  return abs(*_setpoint - *_input) <= threshold;
}//bool AutoPID::atSetPoint

void AutoPID::run() {
     e46:	4f 92       	push	r4
     e48:	5f 92       	push	r5
     e4a:	6f 92       	push	r6
     e4c:	7f 92       	push	r7
     e4e:	8f 92       	push	r8
     e50:	9f 92       	push	r9
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	2a 97       	sbiw	r28, 0x0a	; 10
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	8c 01       	movw	r16, r24
  if (_stopped) {
     e78:	dc 01       	movw	r26, r24
     e7a:	d2 96       	adiw	r26, 0x32	; 50
     e7c:	8c 91       	ld	r24, X
     e7e:	d2 97       	sbiw	r26, 0x32	; 50
     e80:	88 23       	and	r24, r24
     e82:	29 f0       	breq	.+10     	; 0xe8e <_ZN7AutoPID3runEv+0x48>
    _stopped = false;
     e84:	d2 96       	adiw	r26, 0x32	; 50
     e86:	1c 92       	st	X, r1
    reset();
     e88:	c8 01       	movw	r24, r16
     e8a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN7AutoPID5resetEv>
  }
  //if bang thresholds are defined and we're outside of them, use bang-bang control
  if (_bangOn && ((*_setpoint - *_input) > _bangOn)) {
     e8e:	f8 01       	movw	r30, r16
     e90:	c4 88       	ldd	r12, Z+20	; 0x14
     e92:	d5 88       	ldd	r13, Z+21	; 0x15
     e94:	e6 88       	ldd	r14, Z+22	; 0x16
     e96:	f7 88       	ldd	r15, Z+23	; 0x17
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	a9 01       	movw	r20, r18
     e9e:	c7 01       	movw	r24, r14
     ea0:	b6 01       	movw	r22, r12
     ea2:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__cmpsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	11 f1       	breq	.+68     	; 0xeee <_ZN7AutoPID3runEv+0xa8>
     eaa:	d8 01       	movw	r26, r16
     eac:	5e 96       	adiw	r26, 0x1e	; 30
     eae:	8d 91       	ld	r24, X+
     eb0:	9c 91       	ld	r25, X
     eb2:	5f 97       	sbiw	r26, 0x1f	; 31
     eb4:	5c 96       	adiw	r26, 0x1c	; 28
     eb6:	0d 90       	ld	r0, X+
     eb8:	bc 91       	ld	r27, X
     eba:	a0 2d       	mov	r26, r0
     ebc:	2d 91       	ld	r18, X+
     ebe:	3d 91       	ld	r19, X+
     ec0:	4d 91       	ld	r20, X+
     ec2:	5c 91       	ld	r21, X
     ec4:	fc 01       	movw	r30, r24
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__subsf3>
     ed2:	9b 01       	movw	r18, r22
     ed4:	ac 01       	movw	r20, r24
     ed6:	c7 01       	movw	r24, r14
     ed8:	b6 01       	movw	r22, r12
     eda:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__cmpsf2>
     ede:	87 ff       	sbrs	r24, 7
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <_ZN7AutoPID3runEv+0xa8>
    *_output = _outputMax;
     ee2:	f8 01       	movw	r30, r16
     ee4:	86 a1       	ldd	r24, Z+38	; 0x26
     ee6:	97 a1       	ldd	r25, Z+39	; 0x27
     ee8:	a0 a5       	ldd	r26, Z+40	; 0x28
     eea:	b1 a5       	ldd	r27, Z+41	; 0x29
     eec:	2f c0       	rjmp	.+94     	; 0xf4c <_ZN7AutoPID3runEv+0x106>
    _lastStep = millis();
  } else if (_bangOff && ((*_input - *_setpoint) > _bangOff)) {
     eee:	f8 01       	movw	r30, r16
     ef0:	c0 8c       	ldd	r12, Z+24	; 0x18
     ef2:	d1 8c       	ldd	r13, Z+25	; 0x19
     ef4:	e2 8c       	ldd	r14, Z+26	; 0x1a
     ef6:	f3 8c       	ldd	r15, Z+27	; 0x1b
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a9 01       	movw	r20, r18
     efe:	c7 01       	movw	r24, r14
     f00:	b6 01       	movw	r22, r12
     f02:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__cmpsf2>
     f06:	88 23       	and	r24, r24
     f08:	91 f1       	breq	.+100    	; 0xf6e <_ZN7AutoPID3runEv+0x128>
     f0a:	d8 01       	movw	r26, r16
     f0c:	5c 96       	adiw	r26, 0x1c	; 28
     f0e:	8d 91       	ld	r24, X+
     f10:	9c 91       	ld	r25, X
     f12:	5d 97       	sbiw	r26, 0x1d	; 29
     f14:	5e 96       	adiw	r26, 0x1e	; 30
     f16:	0d 90       	ld	r0, X+
     f18:	bc 91       	ld	r27, X
     f1a:	a0 2d       	mov	r26, r0
     f1c:	2d 91       	ld	r18, X+
     f1e:	3d 91       	ld	r19, X+
     f20:	4d 91       	ld	r20, X+
     f22:	5c 91       	ld	r21, X
     f24:	fc 01       	movw	r30, r24
     f26:	60 81       	ld	r22, Z
     f28:	71 81       	ldd	r23, Z+1	; 0x01
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__subsf3>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	c7 01       	movw	r24, r14
     f38:	b6 01       	movw	r22, r12
     f3a:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__cmpsf2>
     f3e:	87 ff       	sbrs	r24, 7
     f40:	16 c0       	rjmp	.+44     	; 0xf6e <_ZN7AutoPID3runEv+0x128>
    *_output = _outputMin;
     f42:	f8 01       	movw	r30, r16
     f44:	82 a1       	ldd	r24, Z+34	; 0x22
     f46:	93 a1       	ldd	r25, Z+35	; 0x23
     f48:	a4 a1       	ldd	r26, Z+36	; 0x24
     f4a:	b5 a1       	ldd	r27, Z+37	; 0x25
     f4c:	20 a1       	ldd	r18, Z+32	; 0x20
     f4e:	31 a1       	ldd	r19, Z+33	; 0x21
     f50:	f9 01       	movw	r30, r18
     f52:	80 83       	st	Z, r24
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	a2 83       	std	Z+2, r26	; 0x02
     f58:	b3 83       	std	Z+3, r27	; 0x03
    _lastStep = millis();
     f5a:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     f5e:	d8 01       	movw	r26, r16
     f60:	9e 96       	adiw	r26, 0x2e	; 46
     f62:	6d 93       	st	X+, r22
     f64:	7d 93       	st	X+, r23
     f66:	8d 93       	st	X+, r24
     f68:	9c 93       	st	X, r25
     f6a:	d1 97       	sbiw	r26, 0x31	; 49
     f6c:	e1 c0       	rjmp	.+450    	; 0x1130 <_ZN7AutoPID3runEv+0x2ea>
  } else {                                    //otherwise use PID control
    unsigned long _dT = millis() - _lastStep;   //calculate time since last update
     f6e:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     f72:	f8 01       	movw	r30, r16
     f74:	c6 a4       	ldd	r12, Z+46	; 0x2e
     f76:	d7 a4       	ldd	r13, Z+47	; 0x2f
     f78:	e0 a8       	ldd	r14, Z+48	; 0x30
     f7a:	f1 a8       	ldd	r15, Z+49	; 0x31
     f7c:	4b 01       	movw	r8, r22
     f7e:	5c 01       	movw	r10, r24
     f80:	8c 18       	sub	r8, r12
     f82:	9d 08       	sbc	r9, r13
     f84:	ae 08       	sbc	r10, r14
     f86:	bf 08       	sbc	r11, r15
    if (_dT >= _timeStep) {                     //if long enough, do PID calculations
     f88:	82 a5       	ldd	r24, Z+42	; 0x2a
     f8a:	93 a5       	ldd	r25, Z+43	; 0x2b
     f8c:	a4 a5       	ldd	r26, Z+44	; 0x2c
     f8e:	b5 a5       	ldd	r27, Z+45	; 0x2d
     f90:	88 16       	cp	r8, r24
     f92:	99 06       	cpc	r9, r25
     f94:	aa 06       	cpc	r10, r26
     f96:	bb 06       	cpc	r11, r27
     f98:	08 f4       	brcc	.+2      	; 0xf9c <_ZN7AutoPID3runEv+0x156>
     f9a:	ca c0       	rjmp	.+404    	; 0x1130 <_ZN7AutoPID3runEv+0x2ea>
      _lastStep = millis();
     f9c:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     fa0:	d8 01       	movw	r26, r16
     fa2:	9e 96       	adiw	r26, 0x2e	; 46
     fa4:	6d 93       	st	X+, r22
     fa6:	7d 93       	st	X+, r23
     fa8:	8d 93       	st	X+, r24
     faa:	9c 93       	st	X, r25
     fac:	d1 97       	sbiw	r26, 0x31	; 49
      double _error = *_setpoint - *_input;
     fae:	5e 96       	adiw	r26, 0x1e	; 30
     fb0:	8d 91       	ld	r24, X+
     fb2:	9c 91       	ld	r25, X
     fb4:	5f 97       	sbiw	r26, 0x1f	; 31
     fb6:	5c 96       	adiw	r26, 0x1c	; 28
     fb8:	0d 90       	ld	r0, X+
     fba:	bc 91       	ld	r27, X
     fbc:	a0 2d       	mov	r26, r0
     fbe:	2d 91       	ld	r18, X+
     fc0:	3d 91       	ld	r19, X+
     fc2:	4d 91       	ld	r20, X+
     fc4:	5c 91       	ld	r21, X
     fc6:	fc 01       	movw	r30, r24
     fc8:	60 81       	ld	r22, Z
     fca:	71 81       	ldd	r23, Z+1	; 0x01
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__subsf3>
     fd4:	6b 01       	movw	r12, r22
     fd6:	7c 01       	movw	r14, r24
      _integral += (_error + _previousError) / 2 * _dT / 1000.0;   //Riemann sum integral
     fd8:	d8 01       	movw	r26, r16
     fda:	50 96       	adiw	r26, 0x10	; 16
     fdc:	8d 91       	ld	r24, X+
     fde:	9d 91       	ld	r25, X+
     fe0:	0d 90       	ld	r0, X+
     fe2:	bc 91       	ld	r27, X
     fe4:	a0 2d       	mov	r26, r0
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	ab 83       	std	Y+3, r26	; 0x03
     fec:	bc 83       	std	Y+4, r27	; 0x04
     fee:	c5 01       	movw	r24, r10
     ff0:	b4 01       	movw	r22, r8
     ff2:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__floatunsisf>
     ff6:	2b 01       	movw	r4, r22
     ff8:	3c 01       	movw	r6, r24
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	3a 81       	ldd	r19, Y+2	; 0x02
     ffe:	4b 81       	ldd	r20, Y+3	; 0x03
    1000:	5c 81       	ldd	r21, Y+4	; 0x04
    1002:	c7 01       	movw	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	0e 94 00 14 	call	0x2800	; 0x2800 <__addsf3>
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    1016:	a3 01       	movw	r20, r6
    1018:	92 01       	movw	r18, r4
    101a:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	4a e7       	ldi	r20, 0x7A	; 122
    1024:	54 e4       	ldi	r21, 0x44	; 68
    1026:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__divsf3>
    102a:	f8 01       	movw	r30, r16
    102c:	24 85       	ldd	r18, Z+12	; 0x0c
    102e:	35 85       	ldd	r19, Z+13	; 0x0d
    1030:	46 85       	ldd	r20, Z+14	; 0x0e
    1032:	57 85       	ldd	r21, Z+15	; 0x0f
    1034:	0e 94 00 14 	call	0x2800	; 0x2800 <__addsf3>
    1038:	4b 01       	movw	r8, r22
    103a:	5c 01       	movw	r10, r24
    103c:	d8 01       	movw	r26, r16
    103e:	1c 96       	adiw	r26, 0x0c	; 12
    1040:	6d 93       	st	X+, r22
    1042:	7d 93       	st	X+, r23
    1044:	8d 93       	st	X+, r24
    1046:	9c 93       	st	X, r25
    1048:	1f 97       	sbiw	r26, 0x0f	; 15
      //_integral = constrain(_integral, _outputMin/_Ki, _outputMax/_Ki);
      double _dError = (_error - _previousError) / _dT / 1000.0;   //derivative
      _previousError = _error;
    104a:	f8 01       	movw	r30, r16
    104c:	c0 8a       	std	Z+16, r12	; 0x10
    104e:	d1 8a       	std	Z+17, r13	; 0x11
    1050:	e2 8a       	std	Z+18, r14	; 0x12
    1052:	f3 8a       	std	Z+19, r15	; 0x13
      double PID = (_Kp * _error) + (_Ki * _integral) + (_Kd * _dError);
    1054:	20 81       	ld	r18, Z
    1056:	31 81       	ldd	r19, Z+1	; 0x01
    1058:	42 81       	ldd	r20, Z+2	; 0x02
    105a:	53 81       	ldd	r21, Z+3	; 0x03
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    1064:	6d 83       	std	Y+5, r22	; 0x05
    1066:	7e 83       	std	Y+6, r23	; 0x06
    1068:	8f 83       	std	Y+7, r24	; 0x07
    106a:	98 87       	std	Y+8, r25	; 0x08
    106c:	d8 01       	movw	r26, r16
    106e:	14 96       	adiw	r26, 0x04	; 4
    1070:	2d 91       	ld	r18, X+
    1072:	3d 91       	ld	r19, X+
    1074:	4d 91       	ld	r20, X+
    1076:	5c 91       	ld	r21, X
    1078:	17 97       	sbiw	r26, 0x07	; 7
    107a:	c5 01       	movw	r24, r10
    107c:	b4 01       	movw	r22, r8
    107e:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	6d 81       	ldd	r22, Y+5	; 0x05
    1088:	7e 81       	ldd	r23, Y+6	; 0x06
    108a:	8f 81       	ldd	r24, Y+7	; 0x07
    108c:	98 85       	ldd	r25, Y+8	; 0x08
    108e:	0e 94 00 14 	call	0x2800	; 0x2800 <__addsf3>
    1092:	4b 01       	movw	r8, r22
    1094:	5c 01       	movw	r10, r24
    1096:	29 81       	ldd	r18, Y+1	; 0x01
    1098:	3a 81       	ldd	r19, Y+2	; 0x02
    109a:	4b 81       	ldd	r20, Y+3	; 0x03
    109c:	5c 81       	ldd	r21, Y+4	; 0x04
    109e:	c7 01       	movw	r24, r14
    10a0:	b6 01       	movw	r22, r12
    10a2:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__subsf3>
    10a6:	a3 01       	movw	r20, r6
    10a8:	92 01       	movw	r18, r4
    10aa:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__divsf3>
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4a e7       	ldi	r20, 0x7A	; 122
    10b4:	54 e4       	ldi	r21, 0x44	; 68
    10b6:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__divsf3>
    10ba:	f8 01       	movw	r30, r16
    10bc:	20 85       	ldd	r18, Z+8	; 0x08
    10be:	31 85       	ldd	r19, Z+9	; 0x09
    10c0:	42 85       	ldd	r20, Z+10	; 0x0a
    10c2:	53 85       	ldd	r21, Z+11	; 0x0b
    10c4:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    10c8:	9b 01       	movw	r18, r22
    10ca:	ac 01       	movw	r20, r24
    10cc:	c5 01       	movw	r24, r10
    10ce:	b4 01       	movw	r22, r8
    10d0:	0e 94 00 14 	call	0x2800	; 0x2800 <__addsf3>
    10d4:	3b 01       	movw	r6, r22
    10d6:	4c 01       	movw	r8, r24
      //*_output = _outputMin + (constrain(PID, 0, 1) * (_outputMax - _outputMin));
      *_output = constrain(PID, _outputMin, _outputMax);
    10d8:	d8 01       	movw	r26, r16
    10da:	90 96       	adiw	r26, 0x20	; 32
    10dc:	cd 90       	ld	r12, X+
    10de:	dc 90       	ld	r13, X
    10e0:	91 97       	sbiw	r26, 0x21	; 33
    10e2:	92 96       	adiw	r26, 0x22	; 34
    10e4:	ac 90       	ld	r10, X
    10e6:	92 97       	sbiw	r26, 0x22	; 34
    10e8:	93 96       	adiw	r26, 0x23	; 35
    10ea:	bc 90       	ld	r11, X
    10ec:	93 97       	sbiw	r26, 0x23	; 35
    10ee:	94 96       	adiw	r26, 0x24	; 36
    10f0:	ec 90       	ld	r14, X
    10f2:	94 97       	sbiw	r26, 0x24	; 36
    10f4:	95 96       	adiw	r26, 0x25	; 37
    10f6:	fc 90       	ld	r15, X
    10f8:	95 01       	movw	r18, r10
    10fa:	a7 01       	movw	r20, r14
    10fc:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__cmpsf2>
    1100:	87 fd       	sbrc	r24, 7
    1102:	0f c0       	rjmp	.+30     	; 0x1122 <_ZN7AutoPID3runEv+0x2dc>
    1104:	f8 01       	movw	r30, r16
    1106:	a6 a0       	ldd	r10, Z+38	; 0x26
    1108:	b7 a0       	ldd	r11, Z+39	; 0x27
    110a:	e0 a4       	ldd	r14, Z+40	; 0x28
    110c:	f1 a4       	ldd	r15, Z+41	; 0x29
    110e:	95 01       	movw	r18, r10
    1110:	a7 01       	movw	r20, r14
    1112:	b3 01       	movw	r22, r6
    1114:	c4 01       	movw	r24, r8
    1116:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__gesf2>
    111a:	18 16       	cp	r1, r24
    111c:	14 f0       	brlt	.+4      	; 0x1122 <_ZN7AutoPID3runEv+0x2dc>
    111e:	53 01       	movw	r10, r6
    1120:	74 01       	movw	r14, r8
    1122:	c5 01       	movw	r24, r10
    1124:	d7 01       	movw	r26, r14
    1126:	f6 01       	movw	r30, r12
    1128:	80 83       	st	Z, r24
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	a2 83       	std	Z+2, r26	; 0x02
    112e:	b3 83       	std	Z+3, r27	; 0x03
    }
  }
}//void AutoPID::run
    1130:	2a 96       	adiw	r28, 0x0a	; 10
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	af 90       	pop	r10
    1150:	9f 90       	pop	r9
    1152:	8f 90       	pop	r8
    1154:	7f 90       	pop	r7
    1156:	6f 90       	pop	r6
    1158:	5f 90       	pop	r5
    115a:	4f 90       	pop	r4
    115c:	08 95       	ret

0000115e <_ZN5Print17availableForWriteEv>:
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
	createChar(char_num, rows);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	08 95       	ret

00001164 <_ZN5Print5flushEv>:
    1164:	08 95       	ret

00001166 <_ZN17LiquidCrystal_I2CC1Ehhhh>:
    1166:	0f 93       	push	r16
    1168:	fc 01       	movw	r30, r24
    116a:	13 82       	std	Z+3, r1	; 0x03
    116c:	12 82       	std	Z+2, r1	; 0x02
    116e:	8b e6       	ldi	r24, 0x6B	; 107
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	80 83       	st	Z, r24
    1176:	64 83       	std	Z+4, r22	; 0x04
    1178:	40 87       	std	Z+8, r20	; 0x08
    117a:	21 87       	std	Z+9, r18	; 0x09
    117c:	02 87       	std	Z+10, r16	; 0x0a
    117e:	88 e0       	ldi	r24, 0x08	; 8
    1180:	83 87       	std	Z+11, r24	; 0x0b
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
    118e:	16 2f       	mov	r17, r22
    1190:	6c 81       	ldd	r22, Y+4	; 0x04
    1192:	8a e4       	ldi	r24, 0x4A	; 74
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 b6 13 	call	0x276c	; 0x276c <_ZN7TwoWire17beginTransmissionEh>
    119a:	6b 85       	ldd	r22, Y+11	; 0x0b
    119c:	61 2b       	or	r22, r17
    119e:	8a e4       	ldi	r24, 0x4A	; 74
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	0e 94 6d 13 	call	0x26da	; 0x26da <_ZN7TwoWire5writeEh>
    11a6:	8a e4       	ldi	r24, 0x4A	; 74
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <_ZN7TwoWire15endTransmissionEv>

000011b4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	8c 01       	movw	r16, r24
    11bc:	c6 2f       	mov	r28, r22
    11be:	64 60       	ori	r22, 0x04	; 4
    11c0:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 bb 18 	call	0x3176	; 0x3176 <delayMicroseconds>
    11cc:	6c 2f       	mov	r22, r28
    11ce:	6b 7f       	andi	r22, 0xFB	; 251
    11d0:	c8 01       	movw	r24, r16
    11d2:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    11d6:	82 e3       	ldi	r24, 0x32	; 50
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <delayMicroseconds>

000011e4 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
    11ec:	16 2f       	mov	r17, r22
    11ee:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    11f2:	61 2f       	mov	r22, r17
    11f4:	ce 01       	movw	r24, r28
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00001200 <_ZN17LiquidCrystal_I2C4sendEhh>:
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	8c 01       	movw	r16, r24
    120a:	c6 2f       	mov	r28, r22
    120c:	d4 2f       	mov	r29, r20
    120e:	60 7f       	andi	r22, 0xF0	; 240
    1210:	64 2b       	or	r22, r20
    1212:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    1216:	80 e1       	ldi	r24, 0x10	; 16
    1218:	c8 9f       	mul	r28, r24
    121a:	b0 01       	movw	r22, r0
    121c:	11 24       	eor	r1, r1
    121e:	6d 2b       	or	r22, r29
    1220:	c8 01       	movw	r24, r16
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000122e <_ZN17LiquidCrystal_I2C7commandEh>:
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	0c 94 00 09 	jmp	0x1200	; 0x1200 <_ZN17LiquidCrystal_I2C4sendEhh>

00001234 <_ZN17LiquidCrystal_I2C5clearEv>:
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN17LiquidCrystal_I2C7commandEh>
    123a:	80 ed       	ldi	r24, 0xD0	; 208
    123c:	97 e0       	ldi	r25, 0x07	; 7
    123e:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <delayMicroseconds>

00001242 <_ZN17LiquidCrystal_I2C4homeEv>:
    1242:	62 e0       	ldi	r22, 0x02	; 2
    1244:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN17LiquidCrystal_I2C7commandEh>
    1248:	80 ed       	ldi	r24, 0xD0	; 208
    124a:	97 e0       	ldi	r25, 0x07	; 7
    124c:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <delayMicroseconds>

00001250 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	28 97       	sbiw	r28, 0x08	; 8
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	9c 01       	movw	r18, r24
    1266:	88 e0       	ldi	r24, 0x08	; 8
    1268:	ec e0       	ldi	r30, 0x0C	; 12
    126a:	f1 e0       	ldi	r31, 0x01	; 1
    126c:	de 01       	movw	r26, r28
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	01 90       	ld	r0, Z+
    1272:	0d 92       	st	X+, r0
    1274:	8a 95       	dec	r24
    1276:	e1 f7       	brne	.-8      	; 0x1270 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    1278:	f9 01       	movw	r30, r18
    127a:	81 85       	ldd	r24, Z+9	; 0x09
    127c:	84 17       	cp	r24, r20
    127e:	10 f4       	brcc	.+4      	; 0x1284 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1280:	4f ef       	ldi	r20, 0xFF	; 255
    1282:	48 0f       	add	r20, r24
    1284:	fe 01       	movw	r30, r28
    1286:	31 96       	adiw	r30, 0x01	; 1
    1288:	e4 0f       	add	r30, r20
    128a:	f1 1d       	adc	r31, r1
    128c:	e4 0f       	add	r30, r20
    128e:	f1 1d       	adc	r31, r1
    1290:	90 81       	ld	r25, Z
    1292:	69 0f       	add	r22, r25
    1294:	60 68       	ori	r22, 0x80	; 128
    1296:	c9 01       	movw	r24, r18
    1298:	28 96       	adiw	r28, 0x08	; 8
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	0c 94 17 09 	jmp	0x122e	; 0x122e <_ZN17LiquidCrystal_I2C7commandEh>

000012ac <_ZN17LiquidCrystal_I2C7displayEv>:
    12ac:	fc 01       	movw	r30, r24
    12ae:	66 81       	ldd	r22, Z+6	; 0x06
    12b0:	26 2f       	mov	r18, r22
    12b2:	24 60       	ori	r18, 0x04	; 4
    12b4:	26 83       	std	Z+6, r18	; 0x06
    12b6:	6c 60       	ori	r22, 0x0C	; 12
    12b8:	0c 94 17 09 	jmp	0x122e	; 0x122e <_ZN17LiquidCrystal_I2C7commandEh>

000012bc <_ZN17LiquidCrystal_I2C5writeEh>:
inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	08 95       	ret

000012c8 <_ZN17LiquidCrystal_I2C5beginEv>:
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
}

void LiquidCrystal_I2C::begin() {
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	ec 01       	movw	r28, r24
	Wire.begin();
    12ce:	8a e4       	ldi	r24, 0x4A	; 74
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	0e 94 ac 13 	call	0x2758	; 0x2758 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    12d6:	1d 82       	std	Y+5, r1	; 0x05

	if (_rows > 1) {
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	10 f0       	brcs	.+4      	; 0x12e2 <_ZN17LiquidCrystal_I2C5beginEv+0x1a>
		_displayfunction |= LCD_2LINE;
    12de:	98 e0       	ldi	r25, 0x08	; 8
    12e0:	9d 83       	std	Y+5, r25	; 0x05
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
    12e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e4:	99 23       	and	r25, r25
    12e6:	29 f0       	breq	.+10     	; 0x12f2 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
		_displayfunction |= LCD_5x10DOTS;
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	84 60       	ori	r24, 0x04	; 4
    12f0:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50);
    12f2:	62 e3       	ldi	r22, 0x32	; 50
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 7f 18 	call	0x30fe	; 0x30fe <delay>

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    12fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1300:	ce 01       	movw	r24, r28
    1302:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1306:	68 ee       	ldi	r22, 0xE8	; 232
    1308:	73 e0       	ldi	r23, 0x03	; 3
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
    1312:	60 e3       	ldi	r22, 0x30	; 48
    1314:	ce 01       	movw	r24, r28
    1316:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    131a:	84 e9       	ldi	r24, 0x94	; 148
    131c:	91 e1       	ldi	r25, 0x11	; 17
    131e:	0e 94 bb 18 	call	0x3176	; 0x3176 <delayMicroseconds>

	// second try
	write4bits(0x03 << 4);
    1322:	60 e3       	ldi	r22, 0x30	; 48
    1324:	ce 01       	movw	r24, r28
    1326:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    132a:	84 e9       	ldi	r24, 0x94	; 148
    132c:	91 e1       	ldi	r25, 0x11	; 17
    132e:	0e 94 bb 18 	call	0x3176	; 0x3176 <delayMicroseconds>

	// third go!
	write4bits(0x03 << 4);
    1332:	60 e3       	ldi	r22, 0x30	; 48
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(150);
    133a:	86 e9       	ldi	r24, 0x96	; 150
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 bb 18 	call	0x3176	; 0x3176 <delayMicroseconds>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
    1342:	60 e2       	ldi	r22, 0x20	; 32
    1344:	ce 01       	movw	r24, r28
    1346:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN17LiquidCrystal_I2C10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
    134a:	6d 81       	ldd	r22, Y+5	; 0x05
    134c:	60 62       	ori	r22, 0x20	; 32
    134e:	ce 01       	movw	r24, r28
    1350:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN17LiquidCrystal_I2C7commandEh>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1354:	84 e0       	ldi	r24, 0x04	; 4
    1356:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN17LiquidCrystal_I2C7displayEv>

	// clear it off
	clear();
    135e:	ce 01       	movw	r24, r28
    1360:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN17LiquidCrystal_I2C5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	8f 83       	std	Y+7, r24	; 0x07

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1368:	66 e0       	ldi	r22, 0x06	; 6
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN17LiquidCrystal_I2C7commandEh>

	home();
    1370:	ce 01       	movw	r24, r28
}
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
    1376:	0c 94 21 09 	jmp	0x1242	; 0x1242 <_ZN17LiquidCrystal_I2C4homeEv>

0000137a <_ZN7MAX6675C1Eaaa>:
#endif
#include <util/delay.h>
#include <stdlib.h>
#include "max6675.h"

MAX6675::MAX6675(int8_t SCLK, int8_t CS, int8_t MISO) {
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
    1380:	84 2f       	mov	r24, r20
  sclk = SCLK;
    1382:	68 83       	st	Y, r22
  cs = CS;
    1384:	4a 83       	std	Y+2, r20	; 0x02
  miso = MISO;
    1386:	29 83       	std	Y+1, r18	; 0x01

  //define pin modes
  pinMode(cs, OUTPUT);
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	0e 94 2a 19 	call	0x3254	; 0x3254 <pinMode>
  pinMode(sclk, OUTPUT); 
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	88 81       	ld	r24, Y
    1392:	0e 94 2a 19 	call	0x3254	; 0x3254 <pinMode>
  pinMode(miso, INPUT);
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	0e 94 2a 19 	call	0x3254	; 0x3254 <pinMode>

  digitalWrite(cs, HIGH);
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
  //define pin modes
  pinMode(cs, OUTPUT);
  pinMode(sclk, OUTPUT); 
  pinMode(miso, INPUT);

  digitalWrite(cs, HIGH);
    13a6:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <digitalWrite>

000013aa <_ZN7MAX66757spireadEv>:

double MAX6675::readFahrenheit(void) {
  return readCelsius() * 9.0/5.0 + 32;
}

byte MAX6675::spiread(void) { 
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	7c 01       	movw	r14, r24
  int i;
  byte d = 0;
    13ba:	10 e0       	ldi	r17, 0x00	; 0

  for (i=7; i>=0; i--)
    13bc:	c7 e0       	ldi	r28, 0x07	; 7
    13be:	d0 e0       	ldi	r29, 0x00	; 0
  {
    digitalWrite(sclk, LOW);
    _delay_ms(1);
    if (digitalRead(miso)) {
      //set the bit to 0 no matter what
      d |= (1 << i);
    13c0:	cc 24       	eor	r12, r12
    13c2:	c3 94       	inc	r12
    13c4:	d1 2c       	mov	r13, r1
  int i;
  byte d = 0;

  for (i=7; i>=0; i--)
  {
    digitalWrite(sclk, LOW);
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	f7 01       	movw	r30, r14
    13ca:	80 81       	ld	r24, Z
    13cc:	0e 94 66 19 	call	0x32cc	; 0x32cc <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13d0:	8f e9       	ldi	r24, 0x9F	; 159
    13d2:	9f e0       	ldi	r25, 0x0F	; 15
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <_ZN7MAX66757spireadEv+0x2a>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <_ZN7MAX66757spireadEv+0x30>
    13da:	00 00       	nop
    _delay_ms(1);
    if (digitalRead(miso)) {
    13dc:	f7 01       	movw	r30, r14
    13de:	81 81       	ldd	r24, Z+1	; 0x01
    13e0:	0e 94 95 19 	call	0x332a	; 0x332a <digitalRead>
    13e4:	89 2b       	or	r24, r25
    13e6:	39 f0       	breq	.+14     	; 0x13f6 <_ZN7MAX66757spireadEv+0x4c>
      //set the bit to 0 no matter what
      d |= (1 << i);
    13e8:	c6 01       	movw	r24, r12
    13ea:	0c 2e       	mov	r0, r28
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <_ZN7MAX66757spireadEv+0x46>
    13ee:	88 0f       	add	r24, r24
    13f0:	0a 94       	dec	r0
    13f2:	ea f7       	brpl	.-6      	; 0x13ee <_ZN7MAX66757spireadEv+0x44>
    13f4:	18 2b       	or	r17, r24
    }

    digitalWrite(sclk, HIGH);
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	f7 01       	movw	r30, r14
    13fa:	80 81       	ld	r24, Z
    13fc:	0e 94 66 19 	call	0x32cc	; 0x32cc <digitalWrite>
    1400:	8f e9       	ldi	r24, 0x9F	; 159
    1402:	9f e0       	ldi	r25, 0x0F	; 15
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <_ZN7MAX66757spireadEv+0x5a>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <_ZN7MAX66757spireadEv+0x60>
    140a:	00 00       	nop

byte MAX6675::spiread(void) { 
  int i;
  byte d = 0;

  for (i=7; i>=0; i--)
    140c:	21 97       	sbiw	r28, 0x01	; 1
    140e:	d8 f6       	brcc	.-74     	; 0x13c6 <_ZN7MAX66757spireadEv+0x1c>
    digitalWrite(sclk, HIGH);
    _delay_ms(1);
  }

  return d;
}
    1410:	81 2f       	mov	r24, r17
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	08 95       	ret

00001422 <_ZN7MAX667511readCelsiusEv>:
  pinMode(sclk, OUTPUT); 
  pinMode(miso, INPUT);

  digitalWrite(cs, HIGH);
}
double MAX6675::readCelsius(void) {
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	8c 01       	movw	r16, r24

  uint16_t v;

  digitalWrite(cs, LOW);
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	0e 94 66 19 	call	0x32cc	; 0x32cc <digitalWrite>
    1436:	8f e9       	ldi	r24, 0x9F	; 159
    1438:	9f e0       	ldi	r25, 0x0F	; 15
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <_ZN7MAX667511readCelsiusEv+0x18>
    143e:	00 c0       	rjmp	.+0      	; 0x1440 <_ZN7MAX667511readCelsiusEv+0x1e>
    1440:	00 00       	nop
  _delay_ms(1);

  v = spiread();
    1442:	c8 01       	movw	r24, r16
    1444:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN7MAX66757spireadEv>
    1448:	c8 2f       	mov	r28, r24
    144a:	d0 e0       	ldi	r29, 0x00	; 0
  v <<= 8;
    144c:	dc 2f       	mov	r29, r28
    144e:	cc 27       	eor	r28, r28
  v |= spiread();
    1450:	c8 01       	movw	r24, r16
    1452:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN7MAX66757spireadEv>
    1456:	c8 2b       	or	r28, r24

  digitalWrite(cs, HIGH);
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	f8 01       	movw	r30, r16
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	0e 94 66 19 	call	0x32cc	; 0x32cc <digitalWrite>

  if (v & 0x4) {
    1462:	c2 fd       	sbrc	r28, 2
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <_ZN7MAX667511readCelsiusEv+0x66>
    //return -100;
  }

  v >>= 3;

  return v*0.25;
    1466:	be 01       	movw	r22, r28
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	76 95       	lsr	r23
    146c:	67 95       	ror	r22
    146e:	8a 95       	dec	r24
    1470:	e1 f7       	brne	.-8      	; 0x146a <_ZN7MAX667511readCelsiusEv+0x48>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__floatunsisf>
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	5e e3       	ldi	r21, 0x3E	; 62
    1482:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__mulsf3>
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <_ZN7MAX667511readCelsiusEv+0x6e>

  digitalWrite(cs, HIGH);

  if (v & 0x4) {
    // uh oh, no thermocouple attached!
    return NAN; 
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	80 ec       	ldi	r24, 0xC0	; 192
    148e:	9f e7       	ldi	r25, 0x7F	; 127
  }

  v >>= 3;

  return v*0.25;
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <_ZN4MItmC1E6Stringii>:
	//goMain();
}

void Menu::goMain(){
	cur_item = -1;
	goNext();
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
    14ac:	6b 01       	movw	r12, r22
    14ae:	7a 01       	movw	r14, r20
    14b0:	89 01       	movw	r16, r18
    14b2:	67 e8       	ldi	r22, 0x87	; 135
    14b4:	71 e0       	ldi	r23, 0x01	; 1
    14b6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
    14ba:	67 e8       	ldi	r22, 0x87	; 135
    14bc:	71 e0       	ldi	r23, 0x01	; 1
    14be:	ce 01       	movw	r24, r28
    14c0:	0e 96       	adiw	r24, 0x0e	; 14
    14c2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	9b 87       	std	Y+11, r25	; 0x0b
    14cc:	8a 87       	std	Y+10, r24	; 0x0a
    14ce:	9d 87       	std	Y+13, r25	; 0x0d
    14d0:	8c 87       	std	Y+12, r24	; 0x0c
    14d2:	b6 01       	movw	r22, r12
    14d4:	ce 01       	movw	r24, r28
    14d6:	0e 94 41 1a 	call	0x3482	; 0x3482 <_ZN6StringaSERKS_>
    14da:	ff 82       	std	Y+7, r15	; 0x07
    14dc:	ee 82       	std	Y+6, r14	; 0x06
    14de:	19 87       	std	Y+9, r17	; 0x09
    14e0:	08 87       	std	Y+8, r16	; 0x08
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	cf 90       	pop	r12
    14f2:	08 95       	ret

000014f4 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String>:
    14f4:	2f 92       	push	r2
    14f6:	3f 92       	push	r3
    14f8:	4f 92       	push	r4
    14fa:	5f 92       	push	r5
    14fc:	6f 92       	push	r6
    14fe:	7f 92       	push	r7
    1500:	8f 92       	push	r8
    1502:	9f 92       	push	r9
    1504:	af 92       	push	r10
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	2e 97       	sbiw	r28, 0x0e	; 14
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	5c 01       	movw	r10, r24
    152a:	4b 01       	movw	r8, r22
    152c:	5e 87       	std	Y+14, r21	; 0x0e
    152e:	4d 87       	std	Y+13, r20	; 0x0d
    1530:	19 01       	movw	r2, r18
    1532:	38 01       	movw	r6, r16
    1534:	26 01       	movw	r4, r12
    1536:	6c 01       	movw	r12, r24
    1538:	84 e1       	ldi	r24, 0x14	; 20
    153a:	c8 0e       	add	r12, r24
    153c:	d1 1c       	adc	r13, r1
    153e:	67 e8       	ldi	r22, 0x87	; 135
    1540:	71 e0       	ldi	r23, 0x01	; 1
    1542:	c6 01       	movw	r24, r12
    1544:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
    1548:	67 e8       	ldi	r22, 0x87	; 135
    154a:	71 e0       	ldi	r23, 0x01	; 1
    154c:	c5 01       	movw	r24, r10
    154e:	4a 96       	adiw	r24, 0x1a	; 26
    1550:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
    1554:	85 01       	movw	r16, r10
    1556:	00 5e       	subi	r16, 0xE0	; 224
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	67 e8       	ldi	r22, 0x87	; 135
    155c:	71 e0       	ldi	r23, 0x01	; 1
    155e:	c8 01       	movw	r24, r16
    1560:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
    1564:	d5 01       	movw	r26, r10
    1566:	13 96       	adiw	r26, 0x03	; 3
    1568:	9c 92       	st	X, r9
    156a:	8e 92       	st	-X, r8
    156c:	12 97       	sbiw	r26, 0x02	; 2
    156e:	17 96       	adiw	r26, 0x07	; 7
    1570:	fc 92       	st	X, r15
    1572:	ee 92       	st	-X, r14
    1574:	16 97       	sbiw	r26, 0x06	; 6
    1576:	15 96       	adiw	r26, 0x05	; 5
    1578:	3c 92       	st	X, r3
    157a:	2e 92       	st	-X, r2
    157c:	14 97       	sbiw	r26, 0x04	; 4
    157e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1580:	fe 85       	ldd	r31, Y+14	; 0x0e
    1582:	51 96       	adiw	r26, 0x11	; 17
    1584:	fc 93       	st	X, r31
    1586:	ee 93       	st	-X, r30
    1588:	50 97       	sbiw	r26, 0x10	; 16
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	7c 92       	st	X, r7
    158e:	6e 92       	st	-X, r6
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	19 96       	adiw	r26, 0x09	; 9
    1596:	9c 93       	st	X, r25
    1598:	8e 93       	st	-X, r24
    159a:	18 97       	sbiw	r26, 0x08	; 8
    159c:	1d 96       	adiw	r26, 0x0d	; 13
    159e:	1c 92       	st	X, r1
    15a0:	1e 92       	st	-X, r1
    15a2:	1c 97       	sbiw	r26, 0x0c	; 12
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	9f ef       	ldi	r25, 0xFF	; 255
    15a8:	1b 96       	adiw	r26, 0x0b	; 11
    15aa:	9c 93       	st	X, r25
    15ac:	8e 93       	st	-X, r24
    15ae:	1a 97       	sbiw	r26, 0x0a	; 10
    15b0:	53 96       	adiw	r26, 0x13	; 19
    15b2:	1c 92       	st	X, r1
    15b4:	1e 92       	st	-X, r1
    15b6:	52 97       	sbiw	r26, 0x12	; 18
    15b8:	b2 01       	movw	r22, r4
    15ba:	c6 01       	movw	r24, r12
    15bc:	0e 94 41 1a 	call	0x3482	; 0x3482 <_ZN6StringaSERKS_>
    15c0:	d5 01       	movw	r26, r10
    15c2:	12 96       	adiw	r26, 0x02	; 2
    15c4:	6d 91       	ld	r22, X+
    15c6:	7c 91       	ld	r23, X
    15c8:	13 97       	sbiw	r26, 0x03	; 3
    15ca:	c8 01       	movw	r24, r16
    15cc:	0e 94 41 1a 	call	0x3482	; 0x3482 <_ZN6StringaSERKS_>
    15d0:	67 e8       	ldi	r22, 0x87	; 135
    15d2:	71 e0       	ldi	r23, 0x01	; 1
    15d4:	ce 01       	movw	r24, r28
    15d6:	07 96       	adiw	r24, 0x07	; 7
    15d8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
    15dc:	00 e0       	ldi	r16, 0x00	; 0
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	e1 2c       	mov	r14, r1
    15e2:	f1 2c       	mov	r15, r1
    15e4:	77 24       	eor	r7, r7
    15e6:	7a 94       	dec	r7
    15e8:	66 24       	eor	r6, r6
    15ea:	6a 94       	dec	r6
    15ec:	cc 24       	eor	r12, r12
    15ee:	ca 94       	dec	r12
    15f0:	dc 2c       	mov	r13, r12
    15f2:	f5 01       	movw	r30, r10
    15f4:	80 89       	ldd	r24, Z+16	; 0x10
    15f6:	91 89       	ldd	r25, Z+17	; 0x11
    15f8:	e8 16       	cp	r14, r24
    15fa:	f9 06       	cpc	r15, r25
    15fc:	cc f5       	brge	.+114    	; 0x1670 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String+0x17c>
    15fe:	62 81       	ldd	r22, Z+2	; 0x02
    1600:	73 81       	ldd	r23, Z+3	; 0x03
    1602:	60 0f       	add	r22, r16
    1604:	71 1f       	adc	r23, r17
    1606:	db 01       	movw	r26, r22
    1608:	18 96       	adiw	r26, 0x08	; 8
    160a:	8d 90       	ld	r8, X+
    160c:	9c 90       	ld	r9, X
    160e:	19 97       	sbiw	r26, 0x09	; 9
    1610:	97 fc       	sbrc	r9, 7
    1612:	0b c0       	rjmp	.+22     	; 0x162a <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String+0x136>
    1614:	16 96       	adiw	r26, 0x06	; 6
    1616:	cd 90       	ld	r12, X+
    1618:	dc 90       	ld	r13, X
    161a:	17 97       	sbiw	r26, 0x07	; 7
    161c:	ce 01       	movw	r24, r28
    161e:	07 96       	adiw	r24, 0x07	; 7
    1620:	0e 94 41 1a 	call	0x3482	; 0x3482 <_ZN6StringaSERKS_>
    1624:	78 2c       	mov	r7, r8
    1626:	69 2c       	mov	r6, r9
    1628:	1d c0       	rjmp	.+58     	; 0x1664 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String+0x170>
    162a:	be 01       	movw	r22, r28
    162c:	69 5f       	subi	r22, 0xF9	; 249
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	ce 01       	movw	r24, r28
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <_ZN6StringC1ERKS_>
    1638:	d5 01       	movw	r26, r10
    163a:	12 96       	adiw	r26, 0x02	; 2
    163c:	ed 91       	ld	r30, X+
    163e:	fc 91       	ld	r31, X
    1640:	13 97       	sbiw	r26, 0x03	; 3
    1642:	e0 0f       	add	r30, r16
    1644:	f1 1f       	adc	r31, r17
    1646:	d3 86       	std	Z+11, r13	; 0x0b
    1648:	c2 86       	std	Z+10, r12	; 0x0a
    164a:	74 86       	std	Z+12, r7	; 0x0c
    164c:	65 86       	std	Z+13, r6	; 0x0d
    164e:	be 01       	movw	r22, r28
    1650:	6f 5f       	subi	r22, 0xFF	; 255
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	cf 01       	movw	r24, r30
    1656:	0e 96       	adiw	r24, 0x0e	; 14
    1658:	0e 94 41 1a 	call	0x3482	; 0x3482 <_ZN6StringaSERKS_>
    165c:	ce 01       	movw	r24, r28
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
    1664:	bf ef       	ldi	r27, 0xFF	; 255
    1666:	eb 1a       	sub	r14, r27
    1668:	fb 0a       	sbc	r15, r27
    166a:	0c 5e       	subi	r16, 0xEC	; 236
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	c1 cf       	rjmp	.-126    	; 0x15f2 <_ZN4MenuC1EP4MItmiP17LiquidCrystal_I2CPFviEi6String+0xfe>
    1670:	ce 01       	movw	r24, r28
    1672:	07 96       	adiw	r24, 0x07	; 7
    1674:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
    1678:	2e 96       	adiw	r28, 0x0e	; 14
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	5f 90       	pop	r5
    16a2:	4f 90       	pop	r4
    16a4:	3f 90       	pop	r3
    16a6:	2f 90       	pop	r2
    16a8:	08 95       	ret

000016aa <_ZN4MItmC1ERKS_>:
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	8c 01       	movw	r16, r24
    16b4:	eb 01       	movw	r28, r22
    16b6:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <_ZN6StringC1ERKS_>
    16ba:	8e 81       	ldd	r24, Y+6	; 0x06
    16bc:	9f 81       	ldd	r25, Y+7	; 0x07
    16be:	f8 01       	movw	r30, r16
    16c0:	97 83       	std	Z+7, r25	; 0x07
    16c2:	86 83       	std	Z+6, r24	; 0x06
    16c4:	88 85       	ldd	r24, Y+8	; 0x08
    16c6:	99 85       	ldd	r25, Y+9	; 0x09
    16c8:	91 87       	std	Z+9, r25	; 0x09
    16ca:	80 87       	std	Z+8, r24	; 0x08
    16cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d0:	93 87       	std	Z+11, r25	; 0x0b
    16d2:	82 87       	std	Z+10, r24	; 0x0a
    16d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    16d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d8:	95 87       	std	Z+13, r25	; 0x0d
    16da:	84 87       	std	Z+12, r24	; 0x0c
    16dc:	be 01       	movw	r22, r28
    16de:	62 5f       	subi	r22, 0xF2	; 242
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	c8 01       	movw	r24, r16
    16e4:	0e 96       	adiw	r24, 0x0e	; 14
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <_ZN6StringC1ERKS_>

000016f2 <_ZN4MItmD1Ev>:
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	ec 01       	movw	r28, r24
    16f8:	0e 96       	adiw	r24, 0x0e	; 14
    16fa:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
    16fe:	ce 01       	movw	r24, r28
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	0c 94 be 19 	jmp	0x337c	; 0x337c <_ZN6StringD1Ev>

00001708 <_ZN4Menu7drawSubEv>:
    1708:	2f 92       	push	r2
    170a:	3f 92       	push	r3
    170c:	4f 92       	push	r4
    170e:	5f 92       	push	r5
    1710:	6f 92       	push	r6
    1712:	7f 92       	push	r7
    1714:	8f 92       	push	r8
    1716:	9f 92       	push	r9
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	a6 97       	sbiw	r28, 0x26	; 38
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	8c 01       	movw	r16, r24
    173e:	dc 01       	movw	r26, r24
    1740:	16 96       	adiw	r26, 0x06	; 6
    1742:	6d 91       	ld	r22, X+
    1744:	7c 91       	ld	r23, X
    1746:	17 97       	sbiw	r26, 0x07	; 7
    1748:	61 50       	subi	r22, 0x01	; 1
    174a:	71 09       	sbc	r23, r1
    174c:	1c 96       	adiw	r26, 0x0c	; 12
    174e:	8d 91       	ld	r24, X+
    1750:	9c 91       	ld	r25, X
    1752:	1d 97       	sbiw	r26, 0x0d	; 13
    1754:	0e 94 18 1b 	call	0x3630	; 0x3630 <__divmodhi4>
    1758:	07 2e       	mov	r0, r23
    175a:	00 0c       	add	r0, r0
    175c:	88 0b       	sbc	r24, r24
    175e:	99 0b       	sbc	r25, r25
    1760:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__floatsisf>
    1764:	0e 94 56 15 	call	0x2aac	; 0x2aac <floor>
    1768:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__fixsfsi>
    176c:	1b 01       	movw	r2, r22
    176e:	f8 01       	movw	r30, r16
    1770:	84 81       	ldd	r24, Z+4	; 0x04
    1772:	95 81       	ldd	r25, Z+5	; 0x05
    1774:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN17LiquidCrystal_I2C5clearEv>
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	d8 01       	movw	r26, r16
    177e:	14 96       	adiw	r26, 0x04	; 4
    1780:	8d 91       	ld	r24, X+
    1782:	9c 91       	ld	r25, X
    1784:	15 97       	sbiw	r26, 0x05	; 5
    1786:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    178a:	b8 01       	movw	r22, r16
    178c:	66 5e       	subi	r22, 0xE6	; 230
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	ce 01       	movw	r24, r28
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <_ZN6StringC1ERKS_>
    1798:	68 e1       	ldi	r22, 0x18	; 24
    179a:	71 e0       	ldi	r23, 0x01	; 1
    179c:	ce 01       	movw	r24, r28
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_ZplRK15StringSumHelperPKc>
    17a4:	bc 01       	movw	r22, r24
    17a6:	f8 01       	movw	r30, r16
    17a8:	84 81       	ldd	r24, Z+4	; 0x04
    17aa:	95 81       	ldd	r25, Z+5	; 0x05
    17ac:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZN5Print5printERK6String>
    17b0:	ce 01       	movw	r24, r28
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
    17b8:	61 2c       	mov	r6, r1
    17ba:	71 2c       	mov	r7, r1
    17bc:	e1 2c       	mov	r14, r1
    17be:	f1 2c       	mov	r15, r1
    17c0:	cc 24       	eor	r12, r12
    17c2:	c3 94       	inc	r12
    17c4:	d1 2c       	mov	r13, r1
    17c6:	aa 24       	eor	r10, r10
    17c8:	aa 94       	dec	r10
    17ca:	ba 2c       	mov	r11, r10
    17cc:	28 01       	movw	r4, r16
    17ce:	f4 e1       	ldi	r31, 0x14	; 20
    17d0:	4f 0e       	add	r4, r31
    17d2:	51 1c       	adc	r5, r1
    17d4:	d8 01       	movw	r26, r16
    17d6:	50 96       	adiw	r26, 0x10	; 16
    17d8:	8d 91       	ld	r24, X+
    17da:	9c 91       	ld	r25, X
    17dc:	51 97       	sbiw	r26, 0x11	; 17
    17de:	e8 16       	cp	r14, r24
    17e0:	f9 06       	cpc	r15, r25
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <_ZN4Menu7drawSubEv+0xde>
    17e4:	bb c0       	rjmp	.+374    	; 0x195c <_ZN4Menu7drawSubEv+0x254>
    17e6:	12 96       	adiw	r26, 0x02	; 2
    17e8:	6d 91       	ld	r22, X+
    17ea:	7c 91       	ld	r23, X
    17ec:	13 97       	sbiw	r26, 0x03	; 3
    17ee:	66 0d       	add	r22, r6
    17f0:	77 1d       	adc	r23, r7
    17f2:	ce 01       	movw	r24, r28
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN4MItmC1ERKS_>
    17fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    17fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    17fe:	f8 01       	movw	r30, r16
    1800:	80 85       	ldd	r24, Z+8	; 0x08
    1802:	91 85       	ldd	r25, Z+9	; 0x09
    1804:	28 17       	cp	r18, r24
    1806:	39 07       	cpc	r19, r25
    1808:	09 f0       	breq	.+2      	; 0x180c <_ZN4Menu7drawSubEv+0x104>
    180a:	9d c0       	rjmp	.+314    	; 0x1946 <_ZN4Menu7drawSubEv+0x23e>
    180c:	ff ef       	ldi	r31, 0xFF	; 255
    180e:	af 16       	cp	r10, r31
    1810:	bf 06       	cpc	r11, r31
    1812:	09 f4       	brne	.+2      	; 0x1816 <_ZN4Menu7drawSubEv+0x10e>
    1814:	57 01       	movw	r10, r14
    1816:	d8 01       	movw	r26, r16
    1818:	16 96       	adiw	r26, 0x06	; 6
    181a:	8d 91       	ld	r24, X+
    181c:	9c 91       	ld	r25, X
    181e:	17 97       	sbiw	r26, 0x07	; 7
    1820:	b7 01       	movw	r22, r14
    1822:	68 0f       	add	r22, r24
    1824:	79 1f       	adc	r23, r25
    1826:	50 96       	adiw	r26, 0x10	; 16
    1828:	4d 91       	ld	r20, X+
    182a:	5c 91       	ld	r21, X
    182c:	51 97       	sbiw	r26, 0x11	; 17
    182e:	46 17       	cp	r20, r22
    1830:	57 07       	cpc	r21, r23
    1832:	24 f1       	brlt	.+72     	; 0x187c <_ZN4Menu7drawSubEv+0x174>
    1834:	b4 e1       	ldi	r27, 0x14	; 20
    1836:	b6 9f       	mul	r27, r22
    1838:	a0 01       	movw	r20, r0
    183a:	b7 9f       	mul	r27, r23
    183c:	50 0d       	add	r21, r0
    183e:	11 24       	eor	r1, r1
    1840:	d8 01       	movw	r26, r16
    1842:	12 96       	adiw	r26, 0x02	; 2
    1844:	ed 91       	ld	r30, X+
    1846:	fc 91       	ld	r31, X
    1848:	13 97       	sbiw	r26, 0x03	; 3
    184a:	e4 0f       	add	r30, r20
    184c:	f5 1f       	adc	r31, r21
    184e:	74 97       	sbiw	r30, 0x14	; 20
    1850:	42 85       	ldd	r20, Z+10	; 0x0a
    1852:	53 85       	ldd	r21, Z+11	; 0x0b
    1854:	24 17       	cp	r18, r20
    1856:	35 07       	cpc	r19, r21
    1858:	89 f4       	brne	.+34     	; 0x187c <_ZN4Menu7drawSubEv+0x174>
    185a:	9c 01       	movw	r18, r24
    185c:	21 50       	subi	r18, 0x01	; 1
    185e:	31 09       	sbc	r19, r1
    1860:	22 9d       	mul	r18, r2
    1862:	a0 01       	movw	r20, r0
    1864:	23 9d       	mul	r18, r3
    1866:	50 0d       	add	r21, r0
    1868:	32 9d       	mul	r19, r2
    186a:	50 0d       	add	r21, r0
    186c:	11 24       	eor	r1, r1
    186e:	97 01       	movw	r18, r14
    1870:	2a 19       	sub	r18, r10
    1872:	3b 09       	sbc	r19, r11
    1874:	24 17       	cp	r18, r20
    1876:	35 07       	cpc	r19, r21
    1878:	0c f4       	brge	.+2      	; 0x187c <_ZN4Menu7drawSubEv+0x174>
    187a:	65 c0       	rjmp	.+202    	; 0x1946 <_ZN4Menu7drawSubEv+0x23e>
    187c:	c8 16       	cp	r12, r24
    187e:	d9 06       	cpc	r13, r25
    1880:	0c f0       	brlt	.+2      	; 0x1884 <_ZN4Menu7drawSubEv+0x17c>
    1882:	61 c0       	rjmp	.+194    	; 0x1946 <_ZN4Menu7drawSubEv+0x23e>
    1884:	4c 2d       	mov	r20, r12
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	f8 01       	movw	r30, r16
    188a:	84 81       	ldd	r24, Z+4	; 0x04
    188c:	95 81       	ldd	r25, Z+5	; 0x05
    188e:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    1892:	d8 01       	movw	r26, r16
    1894:	1a 96       	adiw	r26, 0x0a	; 10
    1896:	8d 91       	ld	r24, X+
    1898:	9c 91       	ld	r25, X
    189a:	1b 97       	sbiw	r26, 0x0b	; 11
    189c:	e8 16       	cp	r14, r24
    189e:	f9 06       	cpc	r15, r25
    18a0:	b9 f4       	brne	.+46     	; 0x18d0 <_ZN4Menu7drawSubEv+0x1c8>
    18a2:	b2 01       	movw	r22, r4
    18a4:	ce 01       	movw	r24, r28
    18a6:	45 96       	adiw	r24, 0x15	; 21
    18a8:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <_ZN6StringC1ERKS_>
    18ac:	be 01       	movw	r22, r28
    18ae:	6f 5f       	subi	r22, 0xFF	; 255
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	ce 01       	movw	r24, r28
    18b4:	45 96       	adiw	r24, 0x15	; 21
    18b6:	0e 94 a6 1a 	call	0x354c	; 0x354c <_ZplRK15StringSumHelperRK6String>
    18ba:	bc 01       	movw	r22, r24
    18bc:	f8 01       	movw	r30, r16
    18be:	84 81       	ldd	r24, Z+4	; 0x04
    18c0:	95 81       	ldd	r25, Z+5	; 0x05
    18c2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZN5Print5printERK6String>
    18c6:	ce 01       	movw	r24, r28
    18c8:	45 96       	adiw	r24, 0x15	; 21
    18ca:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
    18ce:	38 c0       	rjmp	.+112    	; 0x1940 <_ZN4Menu7drawSubEv+0x238>
    18d0:	d8 01       	movw	r26, r16
    18d2:	58 96       	adiw	r26, 0x18	; 24
    18d4:	8d 90       	ld	r8, X+
    18d6:	9c 90       	ld	r9, X
    18d8:	59 97       	sbiw	r26, 0x19	; 25
    18da:	bf ef       	ldi	r27, 0xFF	; 255
    18dc:	8b 1a       	sub	r8, r27
    18de:	9b 0a       	sbc	r9, r27
    18e0:	63 e7       	ldi	r22, 0x73	; 115
    18e2:	71 e0       	ldi	r23, 0x01	; 1
    18e4:	ce 01       	movw	r24, r28
    18e6:	81 96       	adiw	r24, 0x21	; 33
    18e8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
    18ec:	94 01       	movw	r18, r8
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	be 01       	movw	r22, r28
    18f4:	6f 5d       	subi	r22, 0xDF	; 223
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	ce 01       	movw	r24, r28
    18fa:	4b 96       	adiw	r24, 0x1b	; 27
    18fc:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <_ZNK6String9substringEjj>
    1900:	be 01       	movw	r22, r28
    1902:	65 5e       	subi	r22, 0xE5	; 229
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	ce 01       	movw	r24, r28
    1908:	45 96       	adiw	r24, 0x15	; 21
    190a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <_ZN6StringC1ERKS_>
    190e:	be 01       	movw	r22, r28
    1910:	6f 5f       	subi	r22, 0xFF	; 255
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	ce 01       	movw	r24, r28
    1916:	45 96       	adiw	r24, 0x15	; 21
    1918:	0e 94 a6 1a 	call	0x354c	; 0x354c <_ZplRK15StringSumHelperRK6String>
    191c:	bc 01       	movw	r22, r24
    191e:	f8 01       	movw	r30, r16
    1920:	84 81       	ldd	r24, Z+4	; 0x04
    1922:	95 81       	ldd	r25, Z+5	; 0x05
    1924:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZN5Print5printERK6String>
    1928:	ce 01       	movw	r24, r28
    192a:	45 96       	adiw	r24, 0x15	; 21
    192c:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
    1930:	ce 01       	movw	r24, r28
    1932:	4b 96       	adiw	r24, 0x1b	; 27
    1934:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
    1938:	ce 01       	movw	r24, r28
    193a:	81 96       	adiw	r24, 0x21	; 33
    193c:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
    1940:	ff ef       	ldi	r31, 0xFF	; 255
    1942:	cf 1a       	sub	r12, r31
    1944:	df 0a       	sbc	r13, r31
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN4MItmD1Ev>
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	e8 1a       	sub	r14, r24
    1952:	f8 0a       	sbc	r15, r24
    1954:	a4 e1       	ldi	r26, 0x14	; 20
    1956:	6a 0e       	add	r6, r26
    1958:	71 1c       	adc	r7, r1
    195a:	3c cf       	rjmp	.-392    	; 0x17d4 <_ZN4Menu7drawSubEv+0xcc>
    195c:	a6 96       	adiw	r28, 0x26	; 38
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	9f 90       	pop	r9
    197e:	8f 90       	pop	r8
    1980:	7f 90       	pop	r7
    1982:	6f 90       	pop	r6
    1984:	5f 90       	pop	r5
    1986:	4f 90       	pop	r4
    1988:	3f 90       	pop	r3
    198a:	2f 90       	pop	r2
    198c:	08 95       	ret

0000198e <_ZN4Menu6goDownEv>:
    198e:	fc 01       	movw	r30, r24
    1990:	82 85       	ldd	r24, Z+10	; 0x0a
    1992:	93 85       	ldd	r25, Z+11	; 0x0b
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	93 87       	std	Z+11, r25	; 0x0b
    1998:	82 87       	std	Z+10, r24	; 0x0a
    199a:	24 85       	ldd	r18, Z+12	; 0x0c
    199c:	35 85       	ldd	r19, Z+13	; 0x0d
    199e:	2f 5f       	subi	r18, 0xFF	; 255
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	35 87       	std	Z+13, r19	; 0x0d
    19a4:	24 87       	std	Z+12, r18	; 0x0c
    19a6:	40 89       	ldd	r20, Z+16	; 0x10
    19a8:	51 89       	ldd	r21, Z+17	; 0x11
    19aa:	84 17       	cp	r24, r20
    19ac:	95 07       	cpc	r25, r21
    19ae:	9c f4       	brge	.+38     	; 0x19d6 <_ZN4Menu6goDownEv+0x48>
    19b0:	64 e1       	ldi	r22, 0x14	; 20
    19b2:	68 9f       	mul	r22, r24
    19b4:	a0 01       	movw	r20, r0
    19b6:	69 9f       	mul	r22, r25
    19b8:	50 0d       	add	r21, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	a2 81       	ldd	r26, Z+2	; 0x02
    19be:	b3 81       	ldd	r27, Z+3	; 0x03
    19c0:	a4 0f       	add	r26, r20
    19c2:	b5 1f       	adc	r27, r21
    19c4:	1a 96       	adiw	r26, 0x0a	; 10
    19c6:	6d 91       	ld	r22, X+
    19c8:	7c 91       	ld	r23, X
    19ca:	1b 97       	sbiw	r26, 0x0b	; 11
    19cc:	40 85       	ldd	r20, Z+8	; 0x08
    19ce:	51 85       	ldd	r21, Z+9	; 0x09
    19d0:	64 17       	cp	r22, r20
    19d2:	75 07       	cpc	r23, r21
    19d4:	31 f0       	breq	.+12     	; 0x19e2 <_ZN4Menu6goDownEv+0x54>
    19d6:	82 1b       	sub	r24, r18
    19d8:	93 0b       	sbc	r25, r19
    19da:	93 87       	std	Z+11, r25	; 0x0b
    19dc:	82 87       	std	Z+10, r24	; 0x0a
    19de:	15 86       	std	Z+13, r1	; 0x0d
    19e0:	14 86       	std	Z+12, r1	; 0x0c
    19e2:	cf 01       	movw	r24, r30
    19e4:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <_ZN4Menu7drawSubEv>

000019e8 <_ZN4Menu4goUpEv>:
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	fc 01       	movw	r30, r24
    19f2:	22 85       	ldd	r18, Z+10	; 0x0a
    19f4:	33 85       	ldd	r19, Z+11	; 0x0b
    19f6:	c9 01       	movw	r24, r18
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	93 87       	std	Z+11, r25	; 0x0b
    19fc:	82 87       	std	Z+10, r24	; 0x0a
    19fe:	44 85       	ldd	r20, Z+12	; 0x0c
    1a00:	55 85       	ldd	r21, Z+13	; 0x0d
    1a02:	41 50       	subi	r20, 0x01	; 1
    1a04:	51 09       	sbc	r21, r1
    1a06:	55 87       	std	Z+13, r21	; 0x0d
    1a08:	44 87       	std	Z+12, r20	; 0x0c
    1a0a:	97 fd       	sbrc	r25, 7
    1a0c:	13 c0       	rjmp	.+38     	; 0x1a34 <_ZN4Menu4goUpEv+0x4c>
    1a0e:	64 e1       	ldi	r22, 0x14	; 20
    1a10:	68 9f       	mul	r22, r24
    1a12:	a0 01       	movw	r20, r0
    1a14:	69 9f       	mul	r22, r25
    1a16:	50 0d       	add	r21, r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a1c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a1e:	a4 0f       	add	r26, r20
    1a20:	b5 1f       	adc	r27, r21
    1a22:	1a 96       	adiw	r26, 0x0a	; 10
    1a24:	6d 91       	ld	r22, X+
    1a26:	7c 91       	ld	r23, X
    1a28:	1b 97       	sbiw	r26, 0x0b	; 11
    1a2a:	40 85       	ldd	r20, Z+8	; 0x08
    1a2c:	51 85       	ldd	r21, Z+9	; 0x09
    1a2e:	64 17       	cp	r22, r20
    1a30:	75 07       	cpc	r23, r21
    1a32:	99 f1       	breq	.+102    	; 0x1a9a <_ZN4Menu4goUpEv+0xb2>
    1a34:	15 86       	std	Z+13, r1	; 0x0d
    1a36:	14 86       	std	Z+12, r1	; 0x0c
    1a38:	c0 89       	ldd	r28, Z+16	; 0x10
    1a3a:	d1 89       	ldd	r29, Z+17	; 0x11
    1a3c:	44 e1       	ldi	r20, 0x14	; 20
    1a3e:	42 9f       	mul	r20, r18
    1a40:	80 01       	movw	r16, r0
    1a42:	43 9f       	mul	r20, r19
    1a44:	10 0d       	add	r17, r0
    1a46:	11 24       	eor	r1, r1
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	2c 17       	cp	r18, r28
    1a4e:	3d 07       	cpc	r19, r29
    1a50:	d4 f4       	brge	.+52     	; 0x1a86 <_ZN4Menu4goUpEv+0x9e>
    1a52:	a2 81       	ldd	r26, Z+2	; 0x02
    1a54:	b3 81       	ldd	r27, Z+3	; 0x03
    1a56:	a4 0f       	add	r26, r20
    1a58:	b5 1f       	adc	r27, r21
    1a5a:	a0 0f       	add	r26, r16
    1a5c:	b1 1f       	adc	r27, r17
    1a5e:	1a 96       	adiw	r26, 0x0a	; 10
    1a60:	0d 90       	ld	r0, X+
    1a62:	bc 91       	ld	r27, X
    1a64:	a0 2d       	mov	r26, r0
    1a66:	60 85       	ldd	r22, Z+8	; 0x08
    1a68:	71 85       	ldd	r23, Z+9	; 0x09
    1a6a:	a6 17       	cp	r26, r22
    1a6c:	b7 07       	cpc	r27, r23
    1a6e:	31 f4       	brne	.+12     	; 0x1a7c <_ZN4Menu4goUpEv+0x94>
    1a70:	64 85       	ldd	r22, Z+12	; 0x0c
    1a72:	75 85       	ldd	r23, Z+13	; 0x0d
    1a74:	6f 5f       	subi	r22, 0xFF	; 255
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	75 87       	std	Z+13, r23	; 0x0d
    1a7a:	64 87       	std	Z+12, r22	; 0x0c
    1a7c:	2f 5f       	subi	r18, 0xFF	; 255
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	4c 5e       	subi	r20, 0xEC	; 236
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	e3 cf       	rjmp	.-58     	; 0x1a4c <_ZN4Menu4goUpEv+0x64>
    1a86:	24 85       	ldd	r18, Z+12	; 0x0c
    1a88:	35 85       	ldd	r19, Z+13	; 0x0d
    1a8a:	82 0f       	add	r24, r18
    1a8c:	93 1f       	adc	r25, r19
    1a8e:	93 87       	std	Z+11, r25	; 0x0b
    1a90:	82 87       	std	Z+10, r24	; 0x0a
    1a92:	21 50       	subi	r18, 0x01	; 1
    1a94:	31 09       	sbc	r19, r1
    1a96:	35 87       	std	Z+13, r19	; 0x0d
    1a98:	24 87       	std	Z+12, r18	; 0x0c
    1a9a:	cf 01       	movw	r24, r30
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <_ZN4Menu7drawSubEv>

00001aa8 <_ZN4Menu5goSubEi>:
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	ec 01       	movw	r28, r24
    1aae:	48 89       	ldd	r20, Y+16	; 0x10
    1ab0:	59 89       	ldd	r21, Y+17	; 0x11
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	24 17       	cp	r18, r20
    1abc:	35 07       	cpc	r19, r21
    1abe:	0c f5       	brge	.+66     	; 0x1b02 <_ZN4Menu5goSubEi+0x5a>
    1ac0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac4:	e8 0f       	add	r30, r24
    1ac6:	f9 1f       	adc	r31, r25
    1ac8:	a0 85       	ldd	r26, Z+8	; 0x08
    1aca:	b1 85       	ldd	r27, Z+9	; 0x09
    1acc:	2f 5f       	subi	r18, 0xFF	; 255
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	b7 fd       	sbrc	r27, 7
    1ad2:	15 c0       	rjmp	.+42     	; 0x1afe <_ZN4Menu5goSubEi+0x56>
    1ad4:	a6 81       	ldd	r26, Z+6	; 0x06
    1ad6:	b7 81       	ldd	r27, Z+7	; 0x07
    1ad8:	a6 17       	cp	r26, r22
    1ada:	b7 07       	cpc	r27, r23
    1adc:	81 f4       	brne	.+32     	; 0x1afe <_ZN4Menu5goSubEi+0x56>
    1ade:	79 87       	std	Y+9, r23	; 0x09
    1ae0:	68 87       	std	Y+8, r22	; 0x08
    1ae2:	3b 87       	std	Y+11, r19	; 0x0b
    1ae4:	2a 87       	std	Y+10, r18	; 0x0a
    1ae6:	1d 86       	std	Y+13, r1	; 0x0d
    1ae8:	1c 86       	std	Y+12, r1	; 0x0c
    1aea:	bf 01       	movw	r22, r30
    1aec:	ce 01       	movw	r24, r28
    1aee:	4a 96       	adiw	r24, 0x1a	; 26
    1af0:	0e 94 41 1a 	call	0x3482	; 0x3482 <_ZN6StringaSERKS_>
    1af4:	ce 01       	movw	r24, r28
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <_ZN4Menu7drawSubEv>
    1afe:	44 96       	adiw	r24, 0x14	; 20
    1b00:	dc cf       	rjmp	.-72     	; 0x1aba <_ZN4Menu5goSubEi+0x12>
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <_ZN4Menu6goBackEv>:
    1b08:	dc 01       	movw	r26, r24
    1b0a:	1a 96       	adiw	r26, 0x0a	; 10
    1b0c:	4d 91       	ld	r20, X+
    1b0e:	5c 91       	ld	r21, X
    1b10:	1b 97       	sbiw	r26, 0x0b	; 11
    1b12:	64 e1       	ldi	r22, 0x14	; 20
    1b14:	64 9f       	mul	r22, r20
    1b16:	90 01       	movw	r18, r0
    1b18:	65 9f       	mul	r22, r21
    1b1a:	30 0d       	add	r19, r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	12 96       	adiw	r26, 0x02	; 2
    1b20:	ed 91       	ld	r30, X+
    1b22:	fc 91       	ld	r31, X
    1b24:	13 97       	sbiw	r26, 0x03	; 3
    1b26:	e2 0f       	add	r30, r18
    1b28:	f3 1f       	adc	r31, r19
    1b2a:	64 85       	ldd	r22, Z+12	; 0x0c
    1b2c:	75 85       	ldd	r23, Z+13	; 0x0d
    1b2e:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <_ZN4Menu5goSubEi>

00001b32 <_ZN4Menu9findFirstE4MItm>:
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	64 97       	sbiw	r28, 0x14	; 20
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	6c 01       	movw	r12, r24
    1b58:	5b 01       	movw	r10, r22
    1b5a:	e1 2c       	mov	r14, r1
    1b5c:	f1 2c       	mov	r15, r1
    1b5e:	00 e0       	ldi	r16, 0x00	; 0
    1b60:	10 e0       	ldi	r17, 0x00	; 0
    1b62:	f6 01       	movw	r30, r12
    1b64:	80 89       	ldd	r24, Z+16	; 0x10
    1b66:	91 89       	ldd	r25, Z+17	; 0x11
    1b68:	08 17       	cp	r16, r24
    1b6a:	19 07       	cpc	r17, r25
    1b6c:	04 f5       	brge	.+64     	; 0x1bae <_ZN4Menu9findFirstE4MItm+0x7c>
    1b6e:	62 81       	ldd	r22, Z+2	; 0x02
    1b70:	73 81       	ldd	r23, Z+3	; 0x03
    1b72:	6e 0d       	add	r22, r14
    1b74:	7f 1d       	adc	r23, r15
    1b76:	ce 01       	movw	r24, r28
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN4MItmC1ERKS_>
    1b7e:	f4 e1       	ldi	r31, 0x14	; 20
    1b80:	ef 0e       	add	r14, r31
    1b82:	f1 1c       	adc	r15, r1
    1b84:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b86:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b88:	f5 01       	movw	r30, r10
    1b8a:	86 81       	ldd	r24, Z+6	; 0x06
    1b8c:	97 81       	ldd	r25, Z+7	; 0x07
    1b8e:	28 17       	cp	r18, r24
    1b90:	39 07       	cpc	r19, r25
    1b92:	31 f4       	brne	.+12     	; 0x1ba0 <_ZN4Menu9findFirstE4MItm+0x6e>
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN4MItmD1Ev>
    1b9c:	c8 01       	movw	r24, r16
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <_ZN4Menu9findFirstE4MItm+0x80>
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN4MItmD1Ev>
    1ba8:	0f 5f       	subi	r16, 0xFF	; 255
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	da cf       	rjmp	.-76     	; 0x1b62 <_ZN4Menu9findFirstE4MItm+0x30>
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	9f ef       	ldi	r25, 0xFF	; 255
    1bb2:	64 96       	adiw	r28, 0x14	; 20
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	df 90       	pop	r13
    1bcc:	cf 90       	pop	r12
    1bce:	bf 90       	pop	r11
    1bd0:	af 90       	pop	r10
    1bd2:	08 95       	ret

00001bd4 <_ZN4Menu6goNextEv>:
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	64 97       	sbiw	r28, 0x14	; 20
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	8c 01       	movw	r16, r24
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	22 85       	ldd	r18, Z+10	; 0x0a
    1bf8:	33 85       	ldd	r19, Z+11	; 0x0b
    1bfa:	2f 3f       	cpi	r18, 0xFF	; 255
    1bfc:	ff ef       	ldi	r31, 0xFF	; 255
    1bfe:	3f 07       	cpc	r19, r31
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <_ZN4Menu6goNextEv+0x30>
    1c02:	5a c0       	rjmp	.+180    	; 0x1cb8 <_ZN4Menu6goNextEv+0xe4>
    1c04:	84 e1       	ldi	r24, 0x14	; 20
    1c06:	d8 2e       	mov	r13, r24
    1c08:	d2 9e       	mul	r13, r18
    1c0a:	c0 01       	movw	r24, r0
    1c0c:	d3 9e       	mul	r13, r19
    1c0e:	90 0d       	add	r25, r0
    1c10:	11 24       	eor	r1, r1
    1c12:	f8 01       	movw	r30, r16
    1c14:	62 81       	ldd	r22, Z+2	; 0x02
    1c16:	73 81       	ldd	r23, Z+3	; 0x03
    1c18:	68 0f       	add	r22, r24
    1c1a:	79 1f       	adc	r23, r25
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN4MItmC1ERKS_>
    1c24:	be 01       	movw	r22, r28
    1c26:	6f 5f       	subi	r22, 0xFF	; 255
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_ZN4Menu9findFirstE4MItm>
    1c30:	7c 01       	movw	r14, r24
    1c32:	ce 01       	movw	r24, r28
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN4MItmD1Ev>
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	62 81       	ldd	r22, Z+2	; 0x02
    1c3e:	73 81       	ldd	r23, Z+3	; 0x03
    1c40:	ff ef       	ldi	r31, 0xFF	; 255
    1c42:	ef 16       	cp	r14, r31
    1c44:	ff 06       	cpc	r15, r31
    1c46:	a1 f4       	brne	.+40     	; 0x1c70 <_ZN4Menu6goNextEv+0x9c>
    1c48:	f8 01       	movw	r30, r16
    1c4a:	22 85       	ldd	r18, Z+10	; 0x0a
    1c4c:	33 85       	ldd	r19, Z+11	; 0x0b
    1c4e:	d2 9e       	mul	r13, r18
    1c50:	c0 01       	movw	r24, r0
    1c52:	d3 9e       	mul	r13, r19
    1c54:	90 0d       	add	r25, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	db 01       	movw	r26, r22
    1c5a:	a8 0f       	add	r26, r24
    1c5c:	b9 1f       	adc	r27, r25
    1c5e:	20 81       	ld	r18, Z
    1c60:	31 81       	ldd	r19, Z+1	; 0x01
    1c62:	16 96       	adiw	r26, 0x06	; 6
    1c64:	8d 91       	ld	r24, X+
    1c66:	9c 91       	ld	r25, X
    1c68:	17 97       	sbiw	r26, 0x07	; 7
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	09 95       	icall
    1c6e:	36 c0       	rjmp	.+108    	; 0x1cdc <_ZN4Menu6goNextEv+0x108>
    1c70:	f8 01       	movw	r30, r16
    1c72:	f3 86       	std	Z+11, r15	; 0x0b
    1c74:	e2 86       	std	Z+10, r14	; 0x0a
    1c76:	de 9c       	mul	r13, r14
    1c78:	c0 01       	movw	r24, r0
    1c7a:	df 9c       	mul	r13, r15
    1c7c:	90 0d       	add	r25, r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	68 0f       	add	r22, r24
    1c82:	79 1f       	adc	r23, r25
    1c84:	ce 01       	movw	r24, r28
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN4MItmC1ERKS_>
    1c8c:	be 01       	movw	r22, r28
    1c8e:	61 5f       	subi	r22, 0xF1	; 241
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	c8 01       	movw	r24, r16
    1c94:	4a 96       	adiw	r24, 0x1a	; 26
    1c96:	0e 94 41 1a 	call	0x3482	; 0x3482 <_ZN6StringaSERKS_>
    1c9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	91 87       	std	Z+9, r25	; 0x09
    1ca2:	80 87       	std	Z+8, r24	; 0x08
    1ca4:	15 86       	std	Z+13, r1	; 0x0d
    1ca6:	14 86       	std	Z+12, r1	; 0x0c
    1ca8:	c8 01       	movw	r24, r16
    1caa:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN4Menu7drawSubEv>
    1cae:	ce 01       	movw	r24, r28
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN4MItmD1Ev>
    1cb6:	12 c0       	rjmp	.+36     	; 0x1cdc <_ZN4Menu6goNextEv+0x108>
    1cb8:	bc 01       	movw	r22, r24
    1cba:	60 5e       	subi	r22, 0xE0	; 224
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbe:	4a 96       	adiw	r24, 0x1a	; 26
    1cc0:	0e 94 41 1a 	call	0x3482	; 0x3482 <_ZN6StringaSERKS_>
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	11 86       	std	Z+9, r1	; 0x09
    1cc8:	10 86       	std	Z+8, r1	; 0x08
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	93 87       	std	Z+11, r25	; 0x0b
    1cd0:	82 87       	std	Z+10, r24	; 0x0a
    1cd2:	15 86       	std	Z+13, r1	; 0x0d
    1cd4:	14 86       	std	Z+12, r1	; 0x0c
    1cd6:	c8 01       	movw	r24, r16
    1cd8:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN4Menu7drawSubEv>
    1cdc:	64 96       	adiw	r28, 0x14	; 20
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	df 90       	pop	r13
    1cf6:	08 95       	ret

00001cf8 <_GLOBAL__sub_I_name>:
  #include <Arduino.h>
#else
  #include <WProgram.h>
#endif

String name;
    1cf8:	67 e8       	ldi	r22, 0x87	; 135
    1cfa:	71 e0       	ldi	r23, 0x01	; 1
    1cfc:	86 ed       	ldi	r24, 0xD6	; 214
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
int first;
int second;
int sub_id;
int back_id;
String sub_title;
    1d04:	67 e8       	ldi	r22, 0x87	; 135
    1d06:	71 e0       	ldi	r23, 0x01	; 1
    1d08:	80 ed       	ldi	r24, 0xD0	; 208
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <_ZN6StringC1EPKc>

00001d10 <_GLOBAL__sub_D_name>:
    1d10:	80 ed       	ldi	r24, 0xD0	; 208
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	0e 94 be 19 	call	0x337c	; 0x337c <_ZN6StringD1Ev>
  #include <Arduino.h>
#else
  #include <WProgram.h>
#endif

String name;
    1d18:	86 ed       	ldi	r24, 0xD6	; 214
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	0c 94 be 19 	jmp	0x337c	; 0x337c <_ZN6StringD1Ev>

00001d20 <_ZN13RotaryEncoderC1Eiiiii>:
#include "RotaryEncoder.h"

RotaryEncoder::RotaryEncoder(int ENC_A, int ENC_B, int multiplier, int stepSize, int pauseLength) {
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	ec 01       	movw	r28, r24
  _ENC_A = ENC_A;
    1d2e:	79 83       	std	Y+1, r23	; 0x01
    1d30:	68 83       	st	Y, r22
  _ENC_B = ENC_B;
    1d32:	5b 83       	std	Y+3, r21	; 0x03
    1d34:	4a 83       	std	Y+2, r20	; 0x02
  _multiplier = multiplier;
    1d36:	3f 87       	std	Y+15, r19	; 0x0f
    1d38:	2e 87       	std	Y+14, r18	; 0x0e
  _stepSize = stepSize;
    1d3a:	19 8b       	std	Y+17, r17	; 0x11
    1d3c:	08 8b       	std	Y+16, r16	; 0x10
  _pauseLength = pauseLength;
    1d3e:	fd 86       	std	Y+13, r15	; 0x0d
    1d40:	ec 86       	std	Y+12, r14	; 0x0c
  _oldENC_A = 0;
    1d42:	1d 82       	std	Y+5, r1	; 0x05
    1d44:	1c 82       	std	Y+4, r1	; 0x04
  _oldENC_B = 0;
    1d46:	1f 82       	std	Y+7, r1	; 0x07
    1d48:	1e 82       	std	Y+6, r1	; 0x06
  _lastENCread = 0;
    1d4a:	19 86       	std	Y+9, r1	; 0x09
    1d4c:	18 86       	std	Y+8, r1	; 0x08
  _ENCcounter = 0;
    1d4e:	1b 86       	std	Y+11, r1	; 0x0b
    1d50:	1a 86       	std	Y+10, r1	; 0x0a
  _lastENCreadTime = micros();  
    1d52:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <micros>
    1d56:	6a 8b       	std	Y+18, r22	; 0x12
    1d58:	7b 8b       	std	Y+19, r23	; 0x13
    1d5a:	8c 8b       	std	Y+20, r24	; 0x14
    1d5c:	9d 8b       	std	Y+21, r25	; 0x15
  //define pin modes
  pinMode(_ENC_A, INPUT);
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	88 81       	ld	r24, Y
    1d62:	0e 94 2a 19 	call	0x3254	; 0x3254 <pinMode>
  pinMode(_ENC_B, INPUT);
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	0e 94 2a 19 	call	0x3254	; 0x3254 <pinMode>
  digitalWrite(_ENC_A,HIGH); //these pins do not have pull up resistors on an attiny...
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	88 81       	ld	r24, Y
    1d72:	0e 94 66 19 	call	0x32cc	; 0x32cc <digitalWrite>
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
    1d76:	61 e0       	ldi	r22, 0x01	; 1
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
  _lastENCreadTime = micros();  
  //define pin modes
  pinMode(_ENC_A, INPUT);
  pinMode(_ENC_B, INPUT);
  digitalWrite(_ENC_A,HIGH); //these pins do not have pull up resistors on an attiny...
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
    1d86:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <digitalWrite>

00001d8a <_ZN13RotaryEncoder11readEncoderEv>:
}
int RotaryEncoder::readEncoder() {
    1d8a:	cf 92       	push	r12
    1d8c:	df 92       	push	r13
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	ec 01       	movw	r28, r24
  int a0Pin = digitalRead(_ENC_A);
    1d9c:	88 81       	ld	r24, Y
    1d9e:	0e 94 95 19 	call	0x332a	; 0x332a <digitalRead>
    1da2:	7c 01       	movw	r14, r24
  int a1Pin = digitalRead(_ENC_B);
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	0e 94 95 19 	call	0x332a	; 0x332a <digitalRead>
  int changevalue = 1;
  int returnVal = 0;
  if(a0Pin != _oldENC_A || a1Pin != _oldENC_B) {
    1daa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dac:	3d 81       	ldd	r19, Y+5	; 0x05
    1dae:	4e 81       	ldd	r20, Y+6	; 0x06
    1db0:	5f 81       	ldd	r21, Y+7	; 0x07
    1db2:	e2 16       	cp	r14, r18
    1db4:	f3 06       	cpc	r15, r19
    1db6:	21 f4       	brne	.+8      	; 0x1dc0 <_ZN13RotaryEncoder11readEncoderEv+0x36>
    1db8:	84 17       	cp	r24, r20
    1dba:	95 07       	cpc	r25, r21
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <_ZN13RotaryEncoder11readEncoderEv+0x36>
    1dbe:	6f c0       	rjmp	.+222    	; 0x1e9e <_ZN13RotaryEncoder11readEncoderEv+0x114>
    if(_oldENC_A == a1Pin && _oldENC_B != a0Pin) {
    1dc0:	82 17       	cp	r24, r18
    1dc2:	93 07       	cpc	r25, r19
    1dc4:	19 f4       	brne	.+6      	; 0x1dcc <_ZN13RotaryEncoder11readEncoderEv+0x42>
    1dc6:	e4 16       	cp	r14, r20
    1dc8:	f5 06       	cpc	r15, r21
    1dca:	61 f4       	brne	.+24     	; 0x1de4 <_ZN13RotaryEncoder11readEncoderEv+0x5a>
      returnVal = -1;
    } else if (_oldENC_B == a0Pin && _oldENC_A != a1Pin) {
    1dcc:	e4 16       	cp	r14, r20
    1dce:	f5 06       	cpc	r15, r21
    1dd0:	61 f4       	brne	.+24     	; 0x1dea <_ZN13RotaryEncoder11readEncoderEv+0x60>
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
  int returnVal = 0;
  if(a0Pin != _oldENC_A || a1Pin != _oldENC_B) {
    if(_oldENC_A == a1Pin && _oldENC_B != a0Pin) {
      returnVal = -1;
    1dd2:	51 e0       	ldi	r21, 0x01	; 1
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	82 17       	cp	r24, r18
    1dd8:	93 07       	cpc	r25, r19
    1dda:	09 f4       	brne	.+2      	; 0x1dde <_ZN13RotaryEncoder11readEncoderEv+0x54>
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	05 2f       	mov	r16, r21
    1de0:	14 2f       	mov	r17, r20
    1de2:	05 c0       	rjmp	.+10     	; 0x1dee <_ZN13RotaryEncoder11readEncoderEv+0x64>
    1de4:	0f ef       	ldi	r16, 0xFF	; 255
    1de6:	1f ef       	ldi	r17, 0xFF	; 255
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <_ZN13RotaryEncoder11readEncoderEv+0x64>
}
int RotaryEncoder::readEncoder() {
  int a0Pin = digitalRead(_ENC_A);
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
  int returnVal = 0;
    1dea:	00 e0       	ldi	r16, 0x00	; 0
    1dec:	10 e0       	ldi	r17, 0x00	; 0
    if(_oldENC_A == a1Pin && _oldENC_B != a0Pin) {
      returnVal = -1;
    } else if (_oldENC_B == a0Pin && _oldENC_A != a1Pin) {
      returnVal = 1;
    }
    _oldENC_A = a0Pin;
    1dee:	fd 82       	std	Y+5, r15	; 0x05
    1df0:	ec 82       	std	Y+4, r14	; 0x04
    _oldENC_B = a1Pin;
    1df2:	9f 83       	std	Y+7, r25	; 0x07
    1df4:	8e 83       	std	Y+6, r24	; 0x06
    
    if(returnVal != 0) {
    1df6:	01 15       	cp	r16, r1
    1df8:	11 05       	cpc	r17, r1
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <_ZN13RotaryEncoder11readEncoderEv+0x74>
    1dfc:	45 c0       	rjmp	.+138    	; 0x1e88 <_ZN13RotaryEncoder11readEncoderEv+0xfe>
      if(returnVal == _lastENCread) {
    1dfe:	88 85       	ldd	r24, Y+8	; 0x08
    1e00:	99 85       	ldd	r25, Y+9	; 0x09
    1e02:	08 17       	cp	r16, r24
    1e04:	19 07       	cpc	r17, r25
    1e06:	c1 f5       	brne	.+112    	; 0x1e78 <_ZN13RotaryEncoder11readEncoderEv+0xee>
          _ENCcounter++;
    1e08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	9b 87       	std	Y+11, r25	; 0x0b
    1e10:	8a 87       	std	Y+10, r24	; 0x0a
          if((micros() - _lastENCreadTime) < _pauseLength) {
    1e12:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <micros>
    1e16:	ca 88       	ldd	r12, Y+18	; 0x12
    1e18:	db 88       	ldd	r13, Y+19	; 0x13
    1e1a:	ec 88       	ldd	r14, Y+20	; 0x14
    1e1c:	fd 88       	ldd	r15, Y+21	; 0x15
    1e1e:	ab 01       	movw	r20, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	4c 19       	sub	r20, r12
    1e24:	5d 09       	sbc	r21, r13
    1e26:	6e 09       	sbc	r22, r14
    1e28:	7f 09       	sbc	r23, r15
    1e2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e2e:	09 2e       	mov	r0, r25
    1e30:	00 0c       	add	r0, r0
    1e32:	aa 0b       	sbc	r26, r26
    1e34:	bb 0b       	sbc	r27, r27
    1e36:	48 17       	cp	r20, r24
    1e38:	59 07       	cpc	r21, r25
    1e3a:	6a 07       	cpc	r22, r26
    1e3c:	7b 07       	cpc	r23, r27
    1e3e:	90 f4       	brcc	.+36     	; 0x1e64 <_ZN13RotaryEncoder11readEncoderEv+0xda>
            changevalue = max((_ENCcounter/_stepSize)*_multiplier,1);
    1e40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e44:	68 89       	ldd	r22, Y+16	; 0x10
    1e46:	79 89       	ldd	r23, Y+17	; 0x11
    1e48:	0e 94 18 1b 	call	0x3630	; 0x3630 <__divmodhi4>
    1e4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e50:	68 9f       	mul	r22, r24
    1e52:	70 01       	movw	r14, r0
    1e54:	69 9f       	mul	r22, r25
    1e56:	f0 0c       	add	r15, r0
    1e58:	78 9f       	mul	r23, r24
    1e5a:	f0 0c       	add	r15, r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	1e 14       	cp	r1, r14
    1e60:	1f 04       	cpc	r1, r15
    1e62:	1c f0       	brlt	.+6      	; 0x1e6a <_ZN13RotaryEncoder11readEncoderEv+0xe0>
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
}
int RotaryEncoder::readEncoder() {
  int a0Pin = digitalRead(_ENC_A);
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
    1e64:	ee 24       	eor	r14, r14
    1e66:	e3 94       	inc	r14
    1e68:	f1 2c       	mov	r15, r1
      if(returnVal == _lastENCread) {
          _ENCcounter++;
          if((micros() - _lastENCreadTime) < _pauseLength) {
            changevalue = max((_ENCcounter/_stepSize)*_multiplier,1);
          }
          _lastENCreadTime = micros();
    1e6a:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <micros>
    1e6e:	6a 8b       	std	Y+18, r22	; 0x12
    1e70:	7b 8b       	std	Y+19, r23	; 0x13
    1e72:	8c 8b       	std	Y+20, r24	; 0x14
    1e74:	9d 8b       	std	Y+21, r25	; 0x15
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <_ZN13RotaryEncoder11readEncoderEv+0xf8>
        } else {
          _ENCcounter=0;
    1e78:	1b 86       	std	Y+11, r1	; 0x0b
    1e7a:	1a 86       	std	Y+10, r1	; 0x0a
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
}
int RotaryEncoder::readEncoder() {
  int a0Pin = digitalRead(_ENC_A);
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
    1e7c:	ee 24       	eor	r14, r14
    1e7e:	e3 94       	inc	r14
    1e80:	f1 2c       	mov	r15, r1
          }
          _lastENCreadTime = micros();
        } else {
          _ENCcounter=0;
      }
      _lastENCread = returnVal;
    1e82:	19 87       	std	Y+9, r17	; 0x09
    1e84:	08 87       	std	Y+8, r16	; 0x08
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <_ZN13RotaryEncoder11readEncoderEv+0x104>
  digitalWrite(_ENC_B,HIGH); //you must pull them up on the board.
}
int RotaryEncoder::readEncoder() {
  int a0Pin = digitalRead(_ENC_A);
  int a1Pin = digitalRead(_ENC_B);
  int changevalue = 1;
    1e88:	ee 24       	eor	r14, r14
    1e8a:	e3 94       	inc	r14
    1e8c:	f1 2c       	mov	r15, r1
          _ENCcounter=0;
      }
      _lastENCread = returnVal;
    }
    
    return returnVal*changevalue;
    1e8e:	e0 9e       	mul	r14, r16
    1e90:	c0 01       	movw	r24, r0
    1e92:	e1 9e       	mul	r14, r17
    1e94:	90 0d       	add	r25, r0
    1e96:	f0 9e       	mul	r15, r16
    1e98:	90 0d       	add	r25, r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <_ZN13RotaryEncoder11readEncoderEv+0x118>
  } else {
    return 0;
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	df 90       	pop	r13
    1eb0:	cf 90       	pop	r12
    1eb2:	08 95       	ret

00001eb4 <_ZN11SimpleTimerC1Ev>:
    if (numTimer >= MAX_TIMERS) {
        return false;
    }

    return enabled[numTimer];
}
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	ec 01       	movw	r28, r24
    1ec2:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    1ec6:	7e 01       	movw	r14, r28
    1ec8:	2c e8       	ldi	r18, 0x8C	; 140
    1eca:	e2 0e       	add	r14, r18
    1ecc:	f1 1c       	adc	r15, r1
    1ece:	fe 01       	movw	r30, r28
    1ed0:	b8 96       	adiw	r30, 0x28	; 40
    1ed2:	6e 01       	movw	r12, r28
    1ed4:	9e 01       	movw	r18, r28
    1ed6:	24 5c       	subi	r18, 0xC4	; 196
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	d7 01       	movw	r26, r14
    1edc:	1d 92       	st	X+, r1
    1ede:	7d 01       	movw	r14, r26
    1ee0:	11 92       	st	Z+, r1
    1ee2:	11 92       	st	Z+, r1
    1ee4:	d6 01       	movw	r26, r12
    1ee6:	6d 93       	st	X+, r22
    1ee8:	7d 93       	st	X+, r23
    1eea:	8d 93       	st	X+, r24
    1eec:	9d 93       	st	X+, r25
    1eee:	6d 01       	movw	r12, r26
    1ef0:	af 01       	movw	r20, r30
    1ef2:	42 5b       	subi	r20, 0xB2	; 178
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	da 01       	movw	r26, r20
    1ef8:	1d 92       	st	X+, r1
    1efa:	1c 92       	st	X, r1
    1efc:	e2 17       	cp	r30, r18
    1efe:	f3 07       	cpc	r31, r19
    1f00:	61 f7       	brne	.-40     	; 0x1eda <_ZN11SimpleTimerC1Ev+0x26>
    1f02:	c6 55       	subi	r28, 0x56	; 86
    1f04:	df 4f       	sbci	r29, 0xFF	; 255
    1f06:	19 82       	std	Y+1, r1	; 0x01
    1f08:	18 82       	st	Y, r1
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	df 90       	pop	r13
    1f14:	cf 90       	pop	r12
    1f16:	08 95       	ret

00001f18 <_ZN11SimpleTimer17findFirstFreeSlotEv>:
    1f18:	fc 01       	movw	r30, r24
    1f1a:	e6 55       	subi	r30, 0x56	; 86
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	20 81       	ld	r18, Z
    1f20:	31 81       	ldd	r19, Z+1	; 0x01
    1f22:	2a 30       	cpi	r18, 0x0A	; 10
    1f24:	31 05       	cpc	r19, r1
    1f26:	6c f4       	brge	.+26     	; 0x1f42 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x2a>
    1f28:	e2 58       	subi	r30, 0x82	; 130
    1f2a:	f1 09       	sbc	r31, r1
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 91       	ld	r24, Z+
    1f32:	91 91       	ld	r25, Z+
    1f34:	89 2b       	or	r24, r25
    1f36:	41 f0       	breq	.+16     	; 0x1f48 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x30>
    1f38:	2f 5f       	subi	r18, 0xFF	; 255
    1f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3c:	2a 30       	cpi	r18, 0x0A	; 10
    1f3e:	31 05       	cpc	r19, r1
    1f40:	b9 f7       	brne	.-18     	; 0x1f30 <_ZN11SimpleTimer17findFirstFreeSlotEv+0x18>
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	9f ef       	ldi	r25, 0xFF	; 255
    1f46:	08 95       	ret
    1f48:	c9 01       	movw	r24, r18
    1f4a:	08 95       	ret

00001f4c <_ZN11SimpleTimer8setTimerElPFvvEi>:
    1f4c:	4f 92       	push	r4
    1f4e:	5f 92       	push	r5
    1f50:	6f 92       	push	r6
    1f52:	7f 92       	push	r7
    1f54:	af 92       	push	r10
    1f56:	bf 92       	push	r11
    1f58:	cf 92       	push	r12
    1f5a:	df 92       	push	r13
    1f5c:	ef 92       	push	r14
    1f5e:	ff 92       	push	r15
    1f60:	0f 93       	push	r16
    1f62:	1f 93       	push	r17
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	ec 01       	movw	r28, r24
    1f6a:	2a 01       	movw	r4, r20
    1f6c:	3b 01       	movw	r6, r22
    1f6e:	69 01       	movw	r12, r18
    1f70:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN11SimpleTimer17findFirstFreeSlotEv>
    1f74:	7c 01       	movw	r14, r24
    1f76:	97 fd       	sbrc	r25, 7
    1f78:	31 c0       	rjmp	.+98     	; 0x1fdc <_ZN11SimpleTimer8setTimerElPFvvEi+0x90>
    1f7a:	c1 14       	cp	r12, r1
    1f7c:	d1 04       	cpc	r13, r1
    1f7e:	71 f1       	breq	.+92     	; 0x1fdc <_ZN11SimpleTimer8setTimerElPFvvEi+0x90>
    1f80:	5c 01       	movw	r10, r24
    1f82:	aa 0c       	add	r10, r10
    1f84:	bb 1c       	adc	r11, r11
    1f86:	aa 0c       	add	r10, r10
    1f88:	bb 1c       	adc	r11, r11
    1f8a:	ac 0e       	add	r10, r28
    1f8c:	bd 1e       	adc	r11, r29
    1f8e:	f5 01       	movw	r30, r10
    1f90:	44 ae       	std	Z+60, r4	; 0x3c
    1f92:	55 ae       	std	Z+61, r5	; 0x3d
    1f94:	66 ae       	std	Z+62, r6	; 0x3e
    1f96:	77 ae       	std	Z+63, r7	; 0x3f
    1f98:	f7 01       	movw	r30, r14
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	ec 0f       	add	r30, r28
    1fa0:	fd 1f       	adc	r31, r29
    1fa2:	d1 a6       	std	Z+41, r13	; 0x29
    1fa4:	c0 a6       	std	Z+40, r12	; 0x28
    1fa6:	ec 59       	subi	r30, 0x9C	; 156
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	11 83       	std	Z+1, r17	; 0x01
    1fac:	00 83       	st	Z, r16
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ee 0d       	add	r30, r14
    1fb2:	ff 1d       	adc	r31, r15
    1fb4:	e4 57       	subi	r30, 0x74	; 116
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	80 83       	st	Z, r24
    1fbc:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    1fc0:	f5 01       	movw	r30, r10
    1fc2:	60 83       	st	Z, r22
    1fc4:	71 83       	std	Z+1, r23	; 0x01
    1fc6:	82 83       	std	Z+2, r24	; 0x02
    1fc8:	93 83       	std	Z+3, r25	; 0x03
    1fca:	c6 55       	subi	r28, 0x56	; 86
    1fcc:	df 4f       	sbci	r29, 0xFF	; 255
    1fce:	88 81       	ld	r24, Y
    1fd0:	99 81       	ldd	r25, Y+1	; 0x01
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	99 83       	std	Y+1, r25	; 0x01
    1fd6:	88 83       	st	Y, r24
    1fd8:	c7 01       	movw	r24, r14
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <_ZN11SimpleTimer8setTimerElPFvvEi+0x94>
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	9f ef       	ldi	r25, 0xFF	; 255
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	bf 90       	pop	r11
    1ff2:	af 90       	pop	r10
    1ff4:	7f 90       	pop	r7
    1ff6:	6f 90       	pop	r6
    1ff8:	5f 90       	pop	r5
    1ffa:	4f 90       	pop	r4
    1ffc:	08 95       	ret

00001ffe <_ZN11SimpleTimer11setIntervalElPFvvE>:
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	00 e0       	ldi	r16, 0x00	; 0
    2004:	10 e0       	ldi	r17, 0x00	; 0
    2006:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN11SimpleTimer8setTimerElPFvvEi>
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	08 95       	ret

00002010 <_ZN11SimpleTimer11deleteTimerEi>:
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	6a 30       	cpi	r22, 0x0A	; 10
    2016:	71 05       	cpc	r23, r1
    2018:	bc f5       	brge	.+110    	; 0x2088 <_ZN11SimpleTimer11deleteTimerEi+0x78>
    201a:	ec 01       	movw	r28, r24
    201c:	c6 55       	subi	r28, 0x56	; 86
    201e:	df 4f       	sbci	r29, 0xFF	; 255
    2020:	28 81       	ld	r18, Y
    2022:	39 81       	ldd	r19, Y+1	; 0x01
    2024:	21 15       	cp	r18, r1
    2026:	31 05       	cpc	r19, r1
    2028:	79 f1       	breq	.+94     	; 0x2088 <_ZN11SimpleTimer11deleteTimerEi+0x78>
    202a:	db 01       	movw	r26, r22
    202c:	aa 0f       	add	r26, r26
    202e:	bb 1f       	adc	r27, r27
    2030:	a8 0f       	add	r26, r24
    2032:	b9 1f       	adc	r27, r25
    2034:	98 96       	adiw	r26, 0x28	; 40
    2036:	4d 91       	ld	r20, X+
    2038:	5c 91       	ld	r21, X
    203a:	99 97       	sbiw	r26, 0x29	; 41
    203c:	45 2b       	or	r20, r21
    203e:	21 f1       	breq	.+72     	; 0x2088 <_ZN11SimpleTimer11deleteTimerEi+0x78>
    2040:	99 96       	adiw	r26, 0x29	; 41
    2042:	1c 92       	st	X, r1
    2044:	1e 92       	st	-X, r1
    2046:	98 97       	sbiw	r26, 0x28	; 40
    2048:	fc 01       	movw	r30, r24
    204a:	e6 0f       	add	r30, r22
    204c:	f7 1f       	adc	r31, r23
    204e:	e4 57       	subi	r30, 0x74	; 116
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	10 82       	st	Z, r1
    2054:	fd 01       	movw	r30, r26
    2056:	ea 56       	subi	r30, 0x6A	; 106
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	11 82       	std	Z+1, r1	; 0x01
    205c:	10 82       	st	Z, r1
    205e:	61 5f       	subi	r22, 0xF1	; 241
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	66 0f       	add	r22, r22
    2064:	77 1f       	adc	r23, r23
    2066:	66 0f       	add	r22, r22
    2068:	77 1f       	adc	r23, r23
    206a:	fc 01       	movw	r30, r24
    206c:	e6 0f       	add	r30, r22
    206e:	f7 1f       	adc	r31, r23
    2070:	10 82       	st	Z, r1
    2072:	11 82       	std	Z+1, r1	; 0x01
    2074:	12 82       	std	Z+2, r1	; 0x02
    2076:	13 82       	std	Z+3, r1	; 0x03
    2078:	a8 58       	subi	r26, 0x88	; 136
    207a:	bf 4f       	sbci	r27, 0xFF	; 255
    207c:	1d 92       	st	X+, r1
    207e:	1c 92       	st	X, r1
    2080:	21 50       	subi	r18, 0x01	; 1
    2082:	31 09       	sbc	r19, r1
    2084:	39 83       	std	Y+1, r19	; 0x01
    2086:	28 83       	st	Y, r18
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	08 95       	ret

0000208e <_ZN11SimpleTimer3runEv>:
    208e:	2f 92       	push	r2
    2090:	3f 92       	push	r3
    2092:	4f 92       	push	r4
    2094:	5f 92       	push	r5
    2096:	6f 92       	push	r6
    2098:	7f 92       	push	r7
    209a:	8f 92       	push	r8
    209c:	9f 92       	push	r9
    209e:	af 92       	push	r10
    20a0:	bf 92       	push	r11
    20a2:	cf 92       	push	r12
    20a4:	df 92       	push	r13
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <_ZN11SimpleTimer3runEv+0x26>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <_ZN11SimpleTimer3runEv+0x28>
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <_ZN11SimpleTimer3runEv+0x2a>
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
    20c0:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    20c4:	6b 01       	movw	r12, r22
    20c6:	7c 01       	movw	r14, r24
    20c8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ca:	fc 81       	ldd	r31, Y+4	; 0x04
    20cc:	ec 59       	subi	r30, 0x9C	; 156
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	0b 81       	ldd	r16, Y+3	; 0x03
    20d2:	1c 81       	ldd	r17, Y+4	; 0x04
    20d4:	98 01       	movw	r18, r16
    20d6:	24 57       	subi	r18, 0x74	; 116
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	c8 01       	movw	r24, r16
    20dc:	88 58       	subi	r24, 0x88	; 136
    20de:	9f 4f       	sbci	r25, 0xFF	; 255
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	1e 83       	std	Y+6, r17	; 0x06
    20e6:	0d 83       	std	Y+5, r16	; 0x05
    20e8:	22 24       	eor	r2, r2
    20ea:	23 94       	inc	r2
    20ec:	31 2c       	mov	r3, r1
    20ee:	13 aa       	std	Z+51, r1	; 0x33
    20f0:	12 aa       	std	Z+50, r1	; 0x32
    20f2:	cf 01       	movw	r24, r30
    20f4:	cc 97       	sbiw	r24, 0x3c	; 60
    20f6:	dc 01       	movw	r26, r24
    20f8:	8d 91       	ld	r24, X+
    20fa:	9c 91       	ld	r25, X
    20fc:	89 2b       	or	r24, r25
    20fe:	f1 f1       	breq	.+124    	; 0x217c <_ZN11SimpleTimer3runEv+0xee>
    2100:	ad 81       	ldd	r26, Y+5	; 0x05
    2102:	be 81       	ldd	r27, Y+6	; 0x06
    2104:	8d 90       	ld	r8, X+
    2106:	9d 90       	ld	r9, X+
    2108:	ad 90       	ld	r10, X+
    210a:	bc 90       	ld	r11, X
    210c:	13 97       	sbiw	r26, 0x03	; 3
    210e:	dc 96       	adiw	r26, 0x3c	; 60
    2110:	4d 91       	ld	r20, X+
    2112:	5d 91       	ld	r21, X+
    2114:	6d 91       	ld	r22, X+
    2116:	7c 91       	ld	r23, X
    2118:	df 97       	sbiw	r26, 0x3f	; 63
    211a:	26 01       	movw	r4, r12
    211c:	37 01       	movw	r6, r14
    211e:	48 18       	sub	r4, r8
    2120:	59 08       	sbc	r5, r9
    2122:	6a 08       	sbc	r6, r10
    2124:	7b 08       	sbc	r7, r11
    2126:	44 16       	cp	r4, r20
    2128:	55 06       	cpc	r5, r21
    212a:	66 06       	cpc	r6, r22
    212c:	77 06       	cpc	r7, r23
    212e:	30 f1       	brcs	.+76     	; 0x217c <_ZN11SimpleTimer3runEv+0xee>
    2130:	48 0d       	add	r20, r8
    2132:	59 1d       	adc	r21, r9
    2134:	6a 1d       	adc	r22, r10
    2136:	7b 1d       	adc	r23, r11
    2138:	4d 93       	st	X+, r20
    213a:	5d 93       	st	X+, r21
    213c:	6d 93       	st	X+, r22
    213e:	7c 93       	st	X, r23
    2140:	13 97       	sbiw	r26, 0x03	; 3
    2142:	d9 01       	movw	r26, r18
    2144:	8c 91       	ld	r24, X
    2146:	88 23       	and	r24, r24
    2148:	c9 f0       	breq	.+50     	; 0x217c <_ZN11SimpleTimer3runEv+0xee>
    214a:	40 81       	ld	r20, Z
    214c:	51 81       	ldd	r21, Z+1	; 0x01
    214e:	41 15       	cp	r20, r1
    2150:	51 05       	cpc	r21, r1
    2152:	19 f4       	brne	.+6      	; 0x215a <_ZN11SimpleTimer3runEv+0xcc>
    2154:	33 aa       	std	Z+51, r3	; 0x33
    2156:	22 aa       	std	Z+50, r2	; 0x32
    2158:	11 c0       	rjmp	.+34     	; 0x217c <_ZN11SimpleTimer3runEv+0xee>
    215a:	84 89       	ldd	r24, Z+20	; 0x14
    215c:	95 89       	ldd	r25, Z+21	; 0x15
    215e:	84 17       	cp	r24, r20
    2160:	95 07       	cpc	r25, r21
    2162:	64 f4       	brge	.+24     	; 0x217c <_ZN11SimpleTimer3runEv+0xee>
    2164:	33 aa       	std	Z+51, r3	; 0x33
    2166:	22 aa       	std	Z+50, r2	; 0x32
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	95 8b       	std	Z+21, r25	; 0x15
    216c:	84 8b       	std	Z+20, r24	; 0x14
    216e:	84 17       	cp	r24, r20
    2170:	95 07       	cpc	r25, r21
    2172:	24 f0       	brlt	.+8      	; 0x217c <_ZN11SimpleTimer3runEv+0xee>
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	93 ab       	std	Z+51, r25	; 0x33
    217a:	82 ab       	std	Z+50, r24	; 0x32
    217c:	32 96       	adiw	r30, 0x02	; 2
    217e:	ad 81       	ldd	r26, Y+5	; 0x05
    2180:	be 81       	ldd	r27, Y+6	; 0x06
    2182:	14 96       	adiw	r26, 0x04	; 4
    2184:	be 83       	std	Y+6, r27	; 0x06
    2186:	ad 83       	std	Y+5, r26	; 0x05
    2188:	2f 5f       	subi	r18, 0xFF	; 255
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	e8 17       	cp	r30, r24
    2192:	f9 07       	cpc	r31, r25
    2194:	09 f0       	breq	.+2      	; 0x2198 <_ZN11SimpleTimer3runEv+0x10a>
    2196:	ab cf       	rjmp	.-170    	; 0x20ee <_ZN11SimpleTimer3runEv+0x60>
    2198:	e1 2c       	mov	r14, r1
    219a:	f1 2c       	mov	r15, r1
    219c:	f8 01       	movw	r30, r16
    219e:	ea 56       	subi	r30, 0x6A	; 106
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	91 81       	ldd	r25, Z+1	; 0x01
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	91 05       	cpc	r25, r1
    21aa:	71 f0       	breq	.+28     	; 0x21c8 <_ZN11SimpleTimer3runEv+0x13a>
    21ac:	02 97       	sbiw	r24, 0x02	; 2
    21ae:	91 f4       	brne	.+36     	; 0x21d4 <_ZN11SimpleTimer3runEv+0x146>
    21b0:	d8 01       	movw	r26, r16
    21b2:	98 96       	adiw	r26, 0x28	; 40
    21b4:	ed 91       	ld	r30, X+
    21b6:	fc 91       	ld	r31, X
    21b8:	99 97       	sbiw	r26, 0x29	; 41
    21ba:	09 95       	icall
    21bc:	b7 01       	movw	r22, r14
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN11SimpleTimer11deleteTimerEi>
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <_ZN11SimpleTimer3runEv+0x146>
    21c8:	d8 01       	movw	r26, r16
    21ca:	98 96       	adiw	r26, 0x28	; 40
    21cc:	ed 91       	ld	r30, X+
    21ce:	fc 91       	ld	r31, X
    21d0:	99 97       	sbiw	r26, 0x29	; 41
    21d2:	09 95       	icall
    21d4:	bf ef       	ldi	r27, 0xFF	; 255
    21d6:	eb 1a       	sub	r14, r27
    21d8:	fb 0a       	sbc	r15, r27
    21da:	0e 5f       	subi	r16, 0xFE	; 254
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	8a e0       	ldi	r24, 0x0A	; 10
    21e0:	e8 16       	cp	r14, r24
    21e2:	f1 04       	cpc	r15, r1
    21e4:	d9 f6       	brne	.-74     	; 0x219c <_ZN11SimpleTimer3runEv+0x10e>
    21e6:	26 96       	adiw	r28, 0x06	; 6
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	ff 90       	pop	r15
    21fc:	ef 90       	pop	r14
    21fe:	df 90       	pop	r13
    2200:	cf 90       	pop	r12
    2202:	bf 90       	pop	r11
    2204:	af 90       	pop	r10
    2206:	9f 90       	pop	r9
    2208:	8f 90       	pop	r8
    220a:	7f 90       	pop	r7
    220c:	6f 90       	pop	r6
    220e:	5f 90       	pop	r5
    2210:	4f 90       	pop	r4
    2212:	3f 90       	pop	r3
    2214:	2f 90       	pop	r2
    2216:	08 95       	ret

00002218 <_ZN11SimpleTimer12restartTimerEi>:
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	6a 30       	cpi	r22, 0x0A	; 10
    2222:	71 05       	cpc	r23, r1
    2224:	74 f4       	brge	.+28     	; 0x2242 <_ZN11SimpleTimer12restartTimerEi+0x2a>
    2226:	eb 01       	movw	r28, r22
    2228:	8c 01       	movw	r16, r24
    222a:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    222e:	cc 0f       	add	r28, r28
    2230:	dd 1f       	adc	r29, r29
    2232:	cc 0f       	add	r28, r28
    2234:	dd 1f       	adc	r29, r29
    2236:	c0 0f       	add	r28, r16
    2238:	d1 1f       	adc	r29, r17
    223a:	68 83       	st	Y, r22
    223c:	79 83       	std	Y+1, r23	; 0x01
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	9b 83       	std	Y+3, r25	; 0x03
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <_ZN11SimpleTimer6enableEi>:


void SimpleTimer::enable(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
    224c:	6a 30       	cpi	r22, 0x0A	; 10
    224e:	71 05       	cpc	r23, r1
    2250:	3c f4       	brge	.+14     	; 0x2260 <_ZN11SimpleTimer6enableEi+0x14>
        return;
    }

    enabled[numTimer] = true;
    2252:	68 0f       	add	r22, r24
    2254:	79 1f       	adc	r23, r25
    2256:	fb 01       	movw	r30, r22
    2258:	e4 57       	subi	r30, 0x74	; 116
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	80 83       	st	Z, r24
    2260:	08 95       	ret

00002262 <_ZN11SimpleTimer7disableEi>:
}


void SimpleTimer::disable(int numTimer) {
    if (numTimer >= MAX_TIMERS) {
    2262:	6a 30       	cpi	r22, 0x0A	; 10
    2264:	71 05       	cpc	r23, r1
    2266:	34 f4       	brge	.+12     	; 0x2274 <_ZN11SimpleTimer7disableEi+0x12>
        return;
    }

    enabled[numTimer] = false;
    2268:	68 0f       	add	r22, r24
    226a:	79 1f       	adc	r23, r25
    226c:	fb 01       	movw	r30, r22
    226e:	e4 57       	subi	r30, 0x74	; 116
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	10 82       	st	Z, r1
    2274:	08 95       	ret

00002276 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2276:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <twi_state>
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <twi_sendStop>
    2280:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <twi_inRepStart>
    2284:	61 e0       	ldi	r22, 0x01	; 1
    2286:	82 e1       	ldi	r24, 0x12	; 18
    2288:	0e 94 66 19 	call	0x32cc	; 0x32cc <digitalWrite>
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	83 e1       	ldi	r24, 0x13	; 19
    2290:	0e 94 66 19 	call	0x32cc	; 0x32cc <digitalWrite>
    2294:	e9 eb       	ldi	r30, 0xB9	; 185
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	8e 7f       	andi	r24, 0xFE	; 254
    229c:	80 83       	st	Z, r24
    229e:	80 81       	ld	r24, Z
    22a0:	8d 7f       	andi	r24, 0xFD	; 253
    22a2:	80 83       	st	Z, r24
    22a4:	88 e4       	ldi	r24, 0x48	; 72
    22a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    22aa:	85 e4       	ldi	r24, 0x45	; 69
    22ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22b0:	08 95       	ret

000022b2 <twi_writeTo>:
    22b2:	0f 93       	push	r16
    22b4:	41 32       	cpi	r20, 0x21	; 33
    22b6:	08 f0       	brcs	.+2      	; 0x22ba <twi_writeTo+0x8>
    22b8:	4a c0       	rjmp	.+148    	; 0x234e <twi_writeTo+0x9c>
    22ba:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <twi_state>
    22be:	91 11       	cpse	r25, r1
    22c0:	fc cf       	rjmp	.-8      	; 0x22ba <twi_writeTo+0x8>
    22c2:	32 e0       	ldi	r19, 0x02	; 2
    22c4:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <twi_state>
    22c8:	00 93 47 02 	sts	0x0247, r16	; 0x800247 <twi_sendStop>
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	30 93 dc 01 	sts	0x01DC, r19	; 0x8001dc <twi_error>
    22d2:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <twi_masterBufferIndex>
    22d6:	40 93 20 02 	sts	0x0220, r20	; 0x800220 <twi_masterBufferLength>
    22da:	56 2f       	mov	r21, r22
    22dc:	a2 e2       	ldi	r26, 0x22	; 34
    22de:	b2 e0       	ldi	r27, 0x02	; 2
    22e0:	fb 01       	movw	r30, r22
    22e2:	3e 2f       	mov	r19, r30
    22e4:	35 1b       	sub	r19, r21
    22e6:	34 17       	cp	r19, r20
    22e8:	18 f4       	brcc	.+6      	; 0x22f0 <twi_writeTo+0x3e>
    22ea:	31 91       	ld	r19, Z+
    22ec:	3d 93       	st	X+, r19
    22ee:	f9 cf       	rjmp	.-14     	; 0x22e2 <twi_writeTo+0x30>
    22f0:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <twi_slarw>
    22f4:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <twi_slarw>
    22f8:	88 0f       	add	r24, r24
    22fa:	83 2b       	or	r24, r19
    22fc:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <twi_slarw>
    2300:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <twi_inRepStart>
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	61 f4       	brne	.+24     	; 0x2320 <twi_writeTo+0x6e>
    2308:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <twi_inRepStart>
    230c:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <twi_slarw>
    2310:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2314:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2318:	83 fd       	sbrc	r24, 3
    231a:	f8 cf       	rjmp	.-16     	; 0x230c <twi_writeTo+0x5a>
    231c:	85 ec       	ldi	r24, 0xC5	; 197
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <twi_writeTo+0x70>
    2320:	85 ee       	ldi	r24, 0xE5	; 229
    2322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2326:	22 23       	and	r18, r18
    2328:	21 f0       	breq	.+8      	; 0x2332 <twi_writeTo+0x80>
    232a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <twi_state>
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	d1 f3       	breq	.-12     	; 0x2326 <twi_writeTo+0x74>
    2332:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi_error>
    2336:	8f 3f       	cpi	r24, 0xFF	; 255
    2338:	79 f0       	breq	.+30     	; 0x2358 <twi_writeTo+0xa6>
    233a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi_error>
    233e:	80 32       	cpi	r24, 0x20	; 32
    2340:	41 f0       	breq	.+16     	; 0x2352 <twi_writeTo+0xa0>
    2342:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi_error>
    2346:	80 33       	cpi	r24, 0x30	; 48
    2348:	31 f0       	breq	.+12     	; 0x2356 <twi_writeTo+0xa4>
    234a:	94 e0       	ldi	r25, 0x04	; 4
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <twi_writeTo+0xa6>
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	03 c0       	rjmp	.+6      	; 0x2358 <twi_writeTo+0xa6>
    2352:	92 e0       	ldi	r25, 0x02	; 2
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <twi_writeTo+0xa6>
    2356:	93 e0       	ldi	r25, 0x03	; 3
    2358:	89 2f       	mov	r24, r25
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <twi_transmit>:
    235e:	40 91 fe 01 	lds	r20, 0x01FE	; 0x8001fe <twi_txBufferLength>
    2362:	26 2f       	mov	r18, r22
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	24 0f       	add	r18, r20
    2368:	31 1d       	adc	r19, r1
    236a:	21 32       	cpi	r18, 0x21	; 33
    236c:	31 05       	cpc	r19, r1
    236e:	dc f4       	brge	.+54     	; 0x23a6 <twi_transmit+0x48>
    2370:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <twi_state>
    2374:	24 30       	cpi	r18, 0x04	; 4
    2376:	c9 f4       	brne	.+50     	; 0x23aa <twi_transmit+0x4c>
    2378:	fc 01       	movw	r30, r24
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	86 17       	cp	r24, r22
    2380:	58 f4       	brcc	.+22     	; 0x2398 <twi_transmit+0x3a>
    2382:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <twi_txBufferLength>
    2386:	21 91       	ld	r18, Z+
    2388:	dc 01       	movw	r26, r24
    238a:	a0 50       	subi	r26, 0x00	; 0
    238c:	be 4f       	sbci	r27, 0xFE	; 254
    238e:	a3 0f       	add	r26, r19
    2390:	b1 1d       	adc	r27, r1
    2392:	2c 93       	st	X, r18
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	f3 cf       	rjmp	.-26     	; 0x237e <twi_transmit+0x20>
    2398:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <twi_txBufferLength>
    239c:	68 0f       	add	r22, r24
    239e:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <twi_txBufferLength>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	08 95       	ret
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	08 95       	ret
    23aa:	82 e0       	ldi	r24, 0x02	; 2
    23ac:	08 95       	ret

000023ae <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    23ae:	85 ed       	ldi	r24, 0xD5	; 213
    23b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    23b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23b8:	84 fd       	sbrc	r24, 4
    23ba:	fc cf       	rjmp	.-8      	; 0x23b4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    23bc:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <twi_state>
    23c0:	08 95       	ret

000023c2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    23c2:	85 ec       	ldi	r24, 0xC5	; 197
    23c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    23c8:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <twi_state>
    23cc:	08 95       	ret

000023ce <__vector_24>:
}

ISR(TWI_vect)
{
    23ce:	1f 92       	push	r1
    23d0:	0f 92       	push	r0
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	0f 92       	push	r0
    23d6:	11 24       	eor	r1, r1
    23d8:	2f 93       	push	r18
    23da:	3f 93       	push	r19
    23dc:	4f 93       	push	r20
    23de:	5f 93       	push	r21
    23e0:	6f 93       	push	r22
    23e2:	7f 93       	push	r23
    23e4:	8f 93       	push	r24
    23e6:	9f 93       	push	r25
    23e8:	af 93       	push	r26
    23ea:	bf 93       	push	r27
    23ec:	ef 93       	push	r30
    23ee:	ff 93       	push	r31
  switch(TW_STATUS){
    23f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    23f4:	88 7f       	andi	r24, 0xF8	; 248
    23f6:	80 36       	cpi	r24, 0x60	; 96
    23f8:	09 f4       	brne	.+2      	; 0x23fc <__vector_24+0x2e>
    23fa:	9e c0       	rjmp	.+316    	; 0x2538 <__vector_24+0x16a>
    23fc:	78 f5       	brcc	.+94     	; 0x245c <__vector_24+0x8e>
    23fe:	88 32       	cpi	r24, 0x28	; 40
    2400:	09 f4       	brne	.+2      	; 0x2404 <__vector_24+0x36>
    2402:	5d c0       	rjmp	.+186    	; 0x24be <__vector_24+0xf0>
    2404:	90 f4       	brcc	.+36     	; 0x242a <__vector_24+0x5c>
    2406:	80 31       	cpi	r24, 0x10	; 16
    2408:	09 f4       	brne	.+2      	; 0x240c <__vector_24+0x3e>
    240a:	56 c0       	rjmp	.+172    	; 0x24b8 <__vector_24+0xea>
    240c:	38 f4       	brcc	.+14     	; 0x241c <__vector_24+0x4e>
    240e:	88 23       	and	r24, r24
    2410:	09 f4       	brne	.+2      	; 0x2414 <__vector_24+0x46>
    2412:	f5 c0       	rjmp	.+490    	; 0x25fe <__vector_24+0x230>
    2414:	88 30       	cpi	r24, 0x08	; 8
    2416:	09 f4       	brne	.+2      	; 0x241a <__vector_24+0x4c>
    2418:	4f c0       	rjmp	.+158    	; 0x24b8 <__vector_24+0xea>
    241a:	f5 c0       	rjmp	.+490    	; 0x2606 <__vector_24+0x238>
    241c:	88 31       	cpi	r24, 0x18	; 24
    241e:	09 f4       	brne	.+2      	; 0x2422 <__vector_24+0x54>
    2420:	4e c0       	rjmp	.+156    	; 0x24be <__vector_24+0xf0>
    2422:	80 32       	cpi	r24, 0x20	; 32
    2424:	09 f4       	brne	.+2      	; 0x2428 <__vector_24+0x5a>
    2426:	5f c0       	rjmp	.+190    	; 0x24e6 <__vector_24+0x118>
    2428:	ee c0       	rjmp	.+476    	; 0x2606 <__vector_24+0x238>
    242a:	80 34       	cpi	r24, 0x40	; 64
    242c:	09 f4       	brne	.+2      	; 0x2430 <__vector_24+0x62>
    242e:	6a c0       	rjmp	.+212    	; 0x2504 <__vector_24+0x136>
    2430:	58 f4       	brcc	.+22     	; 0x2448 <__vector_24+0x7a>
    2432:	80 33       	cpi	r24, 0x30	; 48
    2434:	09 f4       	brne	.+2      	; 0x2438 <__vector_24+0x6a>
    2436:	57 c0       	rjmp	.+174    	; 0x24e6 <__vector_24+0x118>
    2438:	88 33       	cpi	r24, 0x38	; 56
    243a:	09 f0       	breq	.+2      	; 0x243e <__vector_24+0x70>
    243c:	e4 c0       	rjmp	.+456    	; 0x2606 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    243e:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <twi_error>
      twi_releaseBus();
    2442:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <twi_releaseBus>
      break;
    2446:	df c0       	rjmp	.+446    	; 0x2606 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2448:	80 35       	cpi	r24, 0x50	; 80
    244a:	09 f4       	brne	.+2      	; 0x244e <__vector_24+0x80>
    244c:	4f c0       	rjmp	.+158    	; 0x24ec <__vector_24+0x11e>
    244e:	88 35       	cpi	r24, 0x58	; 88
    2450:	09 f4       	brne	.+2      	; 0x2454 <__vector_24+0x86>
    2452:	5d c0       	rjmp	.+186    	; 0x250e <__vector_24+0x140>
    2454:	88 34       	cpi	r24, 0x48	; 72
    2456:	09 f0       	breq	.+2      	; 0x245a <__vector_24+0x8c>
    2458:	d6 c0       	rjmp	.+428    	; 0x2606 <__vector_24+0x238>
    245a:	d3 c0       	rjmp	.+422    	; 0x2602 <__vector_24+0x234>
    245c:	88 39       	cpi	r24, 0x98	; 152
    245e:	09 f4       	brne	.+2      	; 0x2462 <__vector_24+0x94>
    2460:	c4 c0       	rjmp	.+392    	; 0x25ea <__vector_24+0x21c>
    2462:	a8 f4       	brcc	.+42     	; 0x248e <__vector_24+0xc0>
    2464:	88 37       	cpi	r24, 0x78	; 120
    2466:	09 f4       	brne	.+2      	; 0x246a <__vector_24+0x9c>
    2468:	67 c0       	rjmp	.+206    	; 0x2538 <__vector_24+0x16a>
    246a:	38 f4       	brcc	.+14     	; 0x247a <__vector_24+0xac>
    246c:	88 36       	cpi	r24, 0x68	; 104
    246e:	09 f4       	brne	.+2      	; 0x2472 <__vector_24+0xa4>
    2470:	63 c0       	rjmp	.+198    	; 0x2538 <__vector_24+0x16a>
    2472:	80 37       	cpi	r24, 0x70	; 112
    2474:	09 f4       	brne	.+2      	; 0x2478 <__vector_24+0xaa>
    2476:	60 c0       	rjmp	.+192    	; 0x2538 <__vector_24+0x16a>
    2478:	c6 c0       	rjmp	.+396    	; 0x2606 <__vector_24+0x238>
    247a:	88 38       	cpi	r24, 0x88	; 136
    247c:	09 f4       	brne	.+2      	; 0x2480 <__vector_24+0xb2>
    247e:	b5 c0       	rjmp	.+362    	; 0x25ea <__vector_24+0x21c>
    2480:	80 39       	cpi	r24, 0x90	; 144
    2482:	09 f4       	brne	.+2      	; 0x2486 <__vector_24+0xb8>
    2484:	5f c0       	rjmp	.+190    	; 0x2544 <__vector_24+0x176>
    2486:	80 38       	cpi	r24, 0x80	; 128
    2488:	09 f0       	breq	.+2      	; 0x248c <__vector_24+0xbe>
    248a:	bd c0       	rjmp	.+378    	; 0x2606 <__vector_24+0x238>
    248c:	5b c0       	rjmp	.+182    	; 0x2544 <__vector_24+0x176>
    248e:	80 3b       	cpi	r24, 0xB0	; 176
    2490:	09 f4       	brne	.+2      	; 0x2494 <__vector_24+0xc6>
    2492:	83 c0       	rjmp	.+262    	; 0x259a <__vector_24+0x1cc>
    2494:	38 f4       	brcc	.+14     	; 0x24a4 <__vector_24+0xd6>
    2496:	80 3a       	cpi	r24, 0xA0	; 160
    2498:	09 f4       	brne	.+2      	; 0x249c <__vector_24+0xce>
    249a:	66 c0       	rjmp	.+204    	; 0x2568 <__vector_24+0x19a>
    249c:	88 3a       	cpi	r24, 0xA8	; 168
    249e:	09 f4       	brne	.+2      	; 0x24a2 <__vector_24+0xd4>
    24a0:	7c c0       	rjmp	.+248    	; 0x259a <__vector_24+0x1cc>
    24a2:	b1 c0       	rjmp	.+354    	; 0x2606 <__vector_24+0x238>
    24a4:	80 3c       	cpi	r24, 0xC0	; 192
    24a6:	09 f4       	brne	.+2      	; 0x24aa <__vector_24+0xdc>
    24a8:	a4 c0       	rjmp	.+328    	; 0x25f2 <__vector_24+0x224>
    24aa:	88 3c       	cpi	r24, 0xC8	; 200
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <__vector_24+0xe2>
    24ae:	a1 c0       	rjmp	.+322    	; 0x25f2 <__vector_24+0x224>
    24b0:	88 3b       	cpi	r24, 0xB8	; 184
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <__vector_24+0xe8>
    24b4:	87 c0       	rjmp	.+270    	; 0x25c4 <__vector_24+0x1f6>
    24b6:	a7 c0       	rjmp	.+334    	; 0x2606 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    24b8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <twi_slarw>
    24bc:	10 c0       	rjmp	.+32     	; 0x24de <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    24be:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <twi_masterBufferIndex>
    24c2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <twi_masterBufferLength>
    24c6:	98 17       	cp	r25, r24
    24c8:	70 f5       	brcc	.+92     	; 0x2526 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    24ca:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <twi_masterBufferIndex>
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	8e 0f       	add	r24, r30
    24d2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <twi_masterBufferIndex>
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	ee 5d       	subi	r30, 0xDE	; 222
    24da:	fd 4f       	sbci	r31, 0xFD	; 253
    24dc:	80 81       	ld	r24, Z
    24de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    24e2:	85 ec       	ldi	r24, 0xC5	; 197
    24e4:	83 c0       	rjmp	.+262    	; 0x25ec <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    24e6:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <twi_error>
    24ea:	8b c0       	rjmp	.+278    	; 0x2602 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24ec:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <twi_masterBufferIndex>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	8e 0f       	add	r24, r30
    24f4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <twi_masterBufferIndex>
    24f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	ee 5d       	subi	r30, 0xDE	; 222
    2500:	fd 4f       	sbci	r31, 0xFD	; 253
    2502:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2504:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <twi_masterBufferIndex>
    2508:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <twi_masterBufferLength>
    250c:	6b c0       	rjmp	.+214    	; 0x25e4 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    250e:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <twi_masterBufferIndex>
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	8e 0f       	add	r24, r30
    2516:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <twi_masterBufferIndex>
    251a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	ee 5d       	subi	r30, 0xDE	; 222
    2522:	fd 4f       	sbci	r31, 0xFD	; 253
    2524:	80 83       	st	Z, r24
	if (twi_sendStop)
    2526:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <twi_sendStop>
    252a:	81 11       	cpse	r24, r1
    252c:	6a c0       	rjmp	.+212    	; 0x2602 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2534:	84 ea       	ldi	r24, 0xA4	; 164
    2536:	5e c0       	rjmp	.+188    	; 0x25f4 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2538:	83 e0       	ldi	r24, 0x03	; 3
    253a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    253e:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <twi_rxBufferIndex>
    2542:	cf cf       	rjmp	.-98     	; 0x24e2 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2544:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <twi_rxBufferIndex>
    2548:	80 32       	cpi	r24, 0x20	; 32
    254a:	08 f0       	brcs	.+2      	; 0x254e <__vector_24+0x180>
    254c:	4e c0       	rjmp	.+156    	; 0x25ea <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    254e:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <twi_rxBufferIndex>
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	8e 0f       	add	r24, r30
    2556:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <twi_rxBufferIndex>
    255a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	e2 52       	subi	r30, 0x22	; 34
    2562:	fe 4f       	sbci	r31, 0xFE	; 254
    2564:	80 83       	st	Z, r24
    2566:	bd cf       	rjmp	.-134    	; 0x24e2 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2568:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    256c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <twi_rxBufferIndex>
    2570:	80 32       	cpi	r24, 0x20	; 32
    2572:	30 f4       	brcc	.+12     	; 0x2580 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2574:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <twi_rxBufferIndex>
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	e2 52       	subi	r30, 0x22	; 34
    257c:	fe 4f       	sbci	r31, 0xFE	; 254
    257e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2580:	60 91 dd 01 	lds	r22, 0x01DD	; 0x8001dd <twi_rxBufferIndex>
    2584:	70 e0       	ldi	r23, 0x00	; 0
    2586:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <twi_onSlaveReceive>
    258a:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <twi_onSlaveReceive+0x1>
    258e:	8e ed       	ldi	r24, 0xDE	; 222
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2594:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <twi_rxBufferIndex>
      break;
    2598:	36 c0       	rjmp	.+108    	; 0x2606 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    259a:	84 e0       	ldi	r24, 0x04	; 4
    259c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    25a0:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    25a4:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    25a8:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <twi_onSlaveTransmit>
    25ac:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <twi_onSlaveTransmit+0x1>
    25b0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    25b2:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <twi_txBufferLength>
    25b6:	81 11       	cpse	r24, r1
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    25c0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    25c4:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <twi_txBufferIndex>
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	8e 0f       	add	r24, r30
    25cc:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <twi_txBufferIndex>
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	e0 50       	subi	r30, 0x00	; 0
    25d4:	fe 4f       	sbci	r31, 0xFE	; 254
    25d6:	80 81       	ld	r24, Z
    25d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    25dc:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <twi_txBufferIndex>
    25e0:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <twi_txBufferLength>
    25e4:	98 17       	cp	r25, r24
    25e6:	08 f4       	brcc	.+2      	; 0x25ea <__vector_24+0x21c>
    25e8:	7c cf       	rjmp	.-264    	; 0x24e2 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    25ea:	85 e8       	ldi	r24, 0x85	; 133
    25ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    25f0:	0a c0       	rjmp	.+20     	; 0x2606 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25f2:	85 ec       	ldi	r24, 0xC5	; 197
    25f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    25f8:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <twi_state>
      break;
    25fc:	04 c0       	rjmp	.+8      	; 0x2606 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    25fe:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <twi_error>
      twi_stop();
    2602:	0e 94 d7 11 	call	0x23ae	; 0x23ae <twi_stop>
      break;
  }
}
    2606:	ff 91       	pop	r31
    2608:	ef 91       	pop	r30
    260a:	bf 91       	pop	r27
    260c:	af 91       	pop	r26
    260e:	9f 91       	pop	r25
    2610:	8f 91       	pop	r24
    2612:	7f 91       	pop	r23
    2614:	6f 91       	pop	r22
    2616:	5f 91       	pop	r21
    2618:	4f 91       	pop	r20
    261a:	3f 91       	pop	r19
    261c:	2f 91       	pop	r18
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0
    2624:	1f 90       	pop	r1
    2626:	18 95       	reti

00002628 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2628:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZN7TwoWire14rxBufferLengthE>
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <_ZN7TwoWire13rxBufferIndexE>
    2632:	82 1b       	sub	r24, r18
    2634:	91 09       	sbc	r25, r1
    2636:	08 95       	ret

00002638 <_ZN7TwoWire4readEv>:
    2638:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <_ZN7TwoWire13rxBufferIndexE>
    263c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZN7TwoWire14rxBufferLengthE>
    2640:	98 17       	cp	r25, r24
    2642:	50 f4       	brcc	.+20     	; 0x2658 <_ZN7TwoWire4readEv+0x20>
    2644:	e9 2f       	mov	r30, r25
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	e4 58       	subi	r30, 0x84	; 132
    264a:	fd 4f       	sbci	r31, 0xFD	; 253
    264c:	20 81       	ld	r18, Z
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	9f 5f       	subi	r25, 0xFF	; 255
    2652:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <_ZN7TwoWire13rxBufferIndexE>
    2656:	02 c0       	rjmp	.+4      	; 0x265c <_ZN7TwoWire4readEv+0x24>
    2658:	2f ef       	ldi	r18, 0xFF	; 255
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	c9 01       	movw	r24, r18
    265e:	08 95       	ret

00002660 <_ZN7TwoWire4peekEv>:
    2660:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <_ZN7TwoWire13rxBufferIndexE>
    2664:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <_ZN7TwoWire14rxBufferLengthE>
    2668:	e8 17       	cp	r30, r24
    266a:	30 f4       	brcc	.+12     	; 0x2678 <_ZN7TwoWire4peekEv+0x18>
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	e4 58       	subi	r30, 0x84	; 132
    2670:	fd 4f       	sbci	r31, 0xFD	; 253
    2672:	80 81       	ld	r24, Z
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	08 95       	ret
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	9f ef       	ldi	r25, 0xFF	; 255
    267c:	08 95       	ret

0000267e <_ZN7TwoWire5flushEv>:
    267e:	08 95       	ret

00002680 <_ZN7TwoWire5writeEPKhj>:
    2680:	cf 92       	push	r12
    2682:	df 92       	push	r13
    2684:	ef 92       	push	r14
    2686:	ff 92       	push	r15
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	7c 01       	movw	r14, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8a 01       	movw	r16, r20
    2696:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <_ZN7TwoWire12transmittingE>
    269a:	22 23       	and	r18, r18
    269c:	89 f0       	breq	.+34     	; 0x26c0 <_ZN7TwoWire5writeEPKhj+0x40>
    269e:	eb 01       	movw	r28, r22
    26a0:	6b 01       	movw	r12, r22
    26a2:	c4 0e       	add	r12, r20
    26a4:	d5 1e       	adc	r13, r21
    26a6:	cc 15       	cp	r28, r12
    26a8:	dd 05       	cpc	r29, r13
    26aa:	69 f0       	breq	.+26     	; 0x26c6 <_ZN7TwoWire5writeEPKhj+0x46>
    26ac:	69 91       	ld	r22, Y+
    26ae:	d7 01       	movw	r26, r14
    26b0:	ed 91       	ld	r30, X+
    26b2:	fc 91       	ld	r31, X
    26b4:	01 90       	ld	r0, Z+
    26b6:	f0 81       	ld	r31, Z
    26b8:	e0 2d       	mov	r30, r0
    26ba:	c7 01       	movw	r24, r14
    26bc:	09 95       	icall
    26be:	f3 cf       	rjmp	.-26     	; 0x26a6 <_ZN7TwoWire5writeEPKhj+0x26>
    26c0:	64 2f       	mov	r22, r20
    26c2:	0e 94 af 11 	call	0x235e	; 0x235e <twi_transmit>
    26c6:	c8 01       	movw	r24, r16
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	df 90       	pop	r13
    26d6:	cf 90       	pop	r12
    26d8:	08 95       	ret

000026da <_ZN7TwoWire5writeEh>:
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	1f 92       	push	r1
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	69 83       	std	Y+1, r22	; 0x01
    26e6:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <_ZN7TwoWire12transmittingE>
    26ea:	22 23       	and	r18, r18
    26ec:	d1 f0       	breq	.+52     	; 0x2722 <_ZN7TwoWire5writeEh+0x48>
    26ee:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <_ZN7TwoWire14txBufferLengthE>
    26f2:	20 32       	cpi	r18, 0x20	; 32
    26f4:	40 f0       	brcs	.+16     	; 0x2706 <_ZN7TwoWire5writeEh+0x2c>
    26f6:	21 e0       	ldi	r18, 0x01	; 1
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	fc 01       	movw	r30, r24
    26fc:	33 83       	std	Z+3, r19	; 0x03
    26fe:	22 83       	std	Z+2, r18	; 0x02
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	15 c0       	rjmp	.+42     	; 0x2730 <_ZN7TwoWire5writeEh+0x56>
    2706:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN7TwoWire13txBufferIndexE>
    270a:	e8 2f       	mov	r30, r24
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	e7 5a       	subi	r30, 0xA7	; 167
    2710:	fd 4f       	sbci	r31, 0xFD	; 253
    2712:	99 81       	ldd	r25, Y+1	; 0x01
    2714:	90 83       	st	Z, r25
    2716:	8f 5f       	subi	r24, 0xFF	; 255
    2718:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_ZN7TwoWire13txBufferIndexE>
    271c:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <_ZN7TwoWire14txBufferLengthE>
    2720:	05 c0       	rjmp	.+10     	; 0x272c <_ZN7TwoWire5writeEh+0x52>
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	ce 01       	movw	r24, r28
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	0e 94 af 11 	call	0x235e	; 0x235e <twi_transmit>
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0f 90       	pop	r0
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <_ZN7TwoWireC1Ev>:
    2738:	fc 01       	movw	r30, r24
    273a:	13 82       	std	Z+3, r1	; 0x03
    273c:	12 82       	std	Z+2, r1	; 0x02
    273e:	88 ee       	ldi	r24, 0xE8	; 232
    2740:	93 e0       	ldi	r25, 0x03	; 3
    2742:	a0 e0       	ldi	r26, 0x00	; 0
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	84 83       	std	Z+4, r24	; 0x04
    2748:	95 83       	std	Z+5, r25	; 0x05
    274a:	a6 83       	std	Z+6, r26	; 0x06
    274c:	b7 83       	std	Z+7, r27	; 0x07
    274e:	8c e8       	ldi	r24, 0x8C	; 140
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	80 83       	st	Z, r24
    2756:	08 95       	ret

00002758 <_ZN7TwoWire5beginEv>:
    2758:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZN7TwoWire13rxBufferIndexE>
    275c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZN7TwoWire14rxBufferLengthE>
    2760:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN7TwoWire13txBufferIndexE>
    2764:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN7TwoWire14txBufferLengthE>
    2768:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <twi_init>

0000276c <_ZN7TwoWire17beginTransmissionEh>:
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <_ZN7TwoWire12transmittingE>
    2772:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <_ZN7TwoWire9txAddressE>
    2776:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN7TwoWire13txBufferIndexE>
    277a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN7TwoWire14txBufferLengthE>
    277e:	08 95       	ret

00002780 <_ZN7TwoWire15endTransmissionEh>:
    2780:	0f 93       	push	r16
    2782:	06 2f       	mov	r16, r22
    2784:	21 e0       	ldi	r18, 0x01	; 1
    2786:	40 91 57 02 	lds	r20, 0x0257	; 0x800257 <_ZN7TwoWire14txBufferLengthE>
    278a:	69 e5       	ldi	r22, 0x59	; 89
    278c:	72 e0       	ldi	r23, 0x02	; 2
    278e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <_ZN7TwoWire9txAddressE>
    2792:	0e 94 59 11 	call	0x22b2	; 0x22b2 <twi_writeTo>
    2796:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN7TwoWire13txBufferIndexE>
    279a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN7TwoWire14txBufferLengthE>
    279e:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <_ZN7TwoWire12transmittingE>
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <_ZN7TwoWire15endTransmissionEv>:
    27a6:	61 e0       	ldi	r22, 0x01	; 1
    27a8:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <_ZN7TwoWire15endTransmissionEh>

000027ac <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    27ac:	8a e4       	ldi	r24, 0x4A	; 74
    27ae:	92 e0       	ldi	r25, 0x02	; 2
    27b0:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <_ZN7TwoWireC1Ev>

000027b4 <_ZN11ThermometerC1Eiii>:
*/

#include "Thermometer.h"

// default constructor
Thermometer::Thermometer(int pinDO, int pinCS,int pinCLK)
    27b4:	df 92       	push	r13
    27b6:	ef 92       	push	r14
    27b8:	ff 92       	push	r15
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	8c 01       	movw	r16, r24
    27c4:	f6 2e       	mov	r15, r22
    27c6:	e4 2e       	mov	r14, r20
    27c8:	d2 2e       	mov	r13, r18
{
	_thermocouple = new MAX6675(pinDO, pinCS,pinCLK);
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Znwj>
    27d2:	ec 01       	movw	r28, r24
    27d4:	2d 2d       	mov	r18, r13
    27d6:	4e 2d       	mov	r20, r14
    27d8:	6f 2d       	mov	r22, r15
    27da:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN7MAX6675C1Eaaa>
    27de:	f8 01       	movw	r30, r16
    27e0:	d1 83       	std	Z+1, r29	; 0x01
    27e2:	c0 83       	st	Z, r28
} //Thermometer
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	df 90       	pop	r13
    27f2:	08 95       	ret

000027f4 <_ZN11Thermometer4ReadEv>:

double Thermometer:: Read() {
	// basic readout test, just print the current temp
	return _thermocouple->readCelsius();
    27f4:	fc 01       	movw	r30, r24
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <_ZN7MAX667511readCelsiusEv>

000027fe <__subsf3>:
    27fe:	50 58       	subi	r21, 0x80	; 128

00002800 <__addsf3>:
    2800:	bb 27       	eor	r27, r27
    2802:	aa 27       	eor	r26, r26
    2804:	0e 94 17 14 	call	0x282e	; 0x282e <__addsf3x>
    2808:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__fp_round>
    280c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__fp_pscA>
    2810:	38 f0       	brcs	.+14     	; 0x2820 <__addsf3+0x20>
    2812:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__fp_pscB>
    2816:	20 f0       	brcs	.+8      	; 0x2820 <__addsf3+0x20>
    2818:	39 f4       	brne	.+14     	; 0x2828 <__addsf3+0x28>
    281a:	9f 3f       	cpi	r25, 0xFF	; 255
    281c:	19 f4       	brne	.+6      	; 0x2824 <__addsf3+0x24>
    281e:	26 f4       	brtc	.+8      	; 0x2828 <__addsf3+0x28>
    2820:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__fp_nan>
    2824:	0e f4       	brtc	.+2      	; 0x2828 <__addsf3+0x28>
    2826:	e0 95       	com	r30
    2828:	e7 fb       	bst	r30, 7
    282a:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>

0000282e <__addsf3x>:
    282e:	e9 2f       	mov	r30, r25
    2830:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__fp_split3>
    2834:	58 f3       	brcs	.-42     	; 0x280c <__addsf3+0xc>
    2836:	ba 17       	cp	r27, r26
    2838:	62 07       	cpc	r22, r18
    283a:	73 07       	cpc	r23, r19
    283c:	84 07       	cpc	r24, r20
    283e:	95 07       	cpc	r25, r21
    2840:	20 f0       	brcs	.+8      	; 0x284a <__addsf3x+0x1c>
    2842:	79 f4       	brne	.+30     	; 0x2862 <__addsf3x+0x34>
    2844:	a6 f5       	brtc	.+104    	; 0x28ae <__addsf3x+0x80>
    2846:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__fp_zero>
    284a:	0e f4       	brtc	.+2      	; 0x284e <__addsf3x+0x20>
    284c:	e0 95       	com	r30
    284e:	0b 2e       	mov	r0, r27
    2850:	ba 2f       	mov	r27, r26
    2852:	a0 2d       	mov	r26, r0
    2854:	0b 01       	movw	r0, r22
    2856:	b9 01       	movw	r22, r18
    2858:	90 01       	movw	r18, r0
    285a:	0c 01       	movw	r0, r24
    285c:	ca 01       	movw	r24, r20
    285e:	a0 01       	movw	r20, r0
    2860:	11 24       	eor	r1, r1
    2862:	ff 27       	eor	r31, r31
    2864:	59 1b       	sub	r21, r25
    2866:	99 f0       	breq	.+38     	; 0x288e <__addsf3x+0x60>
    2868:	59 3f       	cpi	r21, 0xF9	; 249
    286a:	50 f4       	brcc	.+20     	; 0x2880 <__addsf3x+0x52>
    286c:	50 3e       	cpi	r21, 0xE0	; 224
    286e:	68 f1       	brcs	.+90     	; 0x28ca <__addsf3x+0x9c>
    2870:	1a 16       	cp	r1, r26
    2872:	f0 40       	sbci	r31, 0x00	; 0
    2874:	a2 2f       	mov	r26, r18
    2876:	23 2f       	mov	r18, r19
    2878:	34 2f       	mov	r19, r20
    287a:	44 27       	eor	r20, r20
    287c:	58 5f       	subi	r21, 0xF8	; 248
    287e:	f3 cf       	rjmp	.-26     	; 0x2866 <__addsf3x+0x38>
    2880:	46 95       	lsr	r20
    2882:	37 95       	ror	r19
    2884:	27 95       	ror	r18
    2886:	a7 95       	ror	r26
    2888:	f0 40       	sbci	r31, 0x00	; 0
    288a:	53 95       	inc	r21
    288c:	c9 f7       	brne	.-14     	; 0x2880 <__addsf3x+0x52>
    288e:	7e f4       	brtc	.+30     	; 0x28ae <__addsf3x+0x80>
    2890:	1f 16       	cp	r1, r31
    2892:	ba 0b       	sbc	r27, r26
    2894:	62 0b       	sbc	r22, r18
    2896:	73 0b       	sbc	r23, r19
    2898:	84 0b       	sbc	r24, r20
    289a:	ba f0       	brmi	.+46     	; 0x28ca <__addsf3x+0x9c>
    289c:	91 50       	subi	r25, 0x01	; 1
    289e:	a1 f0       	breq	.+40     	; 0x28c8 <__addsf3x+0x9a>
    28a0:	ff 0f       	add	r31, r31
    28a2:	bb 1f       	adc	r27, r27
    28a4:	66 1f       	adc	r22, r22
    28a6:	77 1f       	adc	r23, r23
    28a8:	88 1f       	adc	r24, r24
    28aa:	c2 f7       	brpl	.-16     	; 0x289c <__addsf3x+0x6e>
    28ac:	0e c0       	rjmp	.+28     	; 0x28ca <__addsf3x+0x9c>
    28ae:	ba 0f       	add	r27, r26
    28b0:	62 1f       	adc	r22, r18
    28b2:	73 1f       	adc	r23, r19
    28b4:	84 1f       	adc	r24, r20
    28b6:	48 f4       	brcc	.+18     	; 0x28ca <__addsf3x+0x9c>
    28b8:	87 95       	ror	r24
    28ba:	77 95       	ror	r23
    28bc:	67 95       	ror	r22
    28be:	b7 95       	ror	r27
    28c0:	f7 95       	ror	r31
    28c2:	9e 3f       	cpi	r25, 0xFE	; 254
    28c4:	08 f0       	brcs	.+2      	; 0x28c8 <__addsf3x+0x9a>
    28c6:	b0 cf       	rjmp	.-160    	; 0x2828 <__addsf3+0x28>
    28c8:	93 95       	inc	r25
    28ca:	88 0f       	add	r24, r24
    28cc:	08 f0       	brcs	.+2      	; 0x28d0 <__addsf3x+0xa2>
    28ce:	99 27       	eor	r25, r25
    28d0:	ee 0f       	add	r30, r30
    28d2:	97 95       	ror	r25
    28d4:	87 95       	ror	r24
    28d6:	08 95       	ret

000028d8 <__cmpsf2>:
    28d8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__fp_cmp>
    28dc:	08 f4       	brcc	.+2      	; 0x28e0 <__cmpsf2+0x8>
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	08 95       	ret

000028e2 <__divsf3>:
    28e2:	0e 94 85 14 	call	0x290a	; 0x290a <__divsf3x>
    28e6:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__fp_round>
    28ea:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__fp_pscB>
    28ee:	58 f0       	brcs	.+22     	; 0x2906 <__divsf3+0x24>
    28f0:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__fp_pscA>
    28f4:	40 f0       	brcs	.+16     	; 0x2906 <__divsf3+0x24>
    28f6:	29 f4       	brne	.+10     	; 0x2902 <__divsf3+0x20>
    28f8:	5f 3f       	cpi	r21, 0xFF	; 255
    28fa:	29 f0       	breq	.+10     	; 0x2906 <__divsf3+0x24>
    28fc:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>
    2900:	51 11       	cpse	r21, r1
    2902:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__fp_szero>
    2906:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__fp_nan>

0000290a <__divsf3x>:
    290a:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__fp_split3>
    290e:	68 f3       	brcs	.-38     	; 0x28ea <__divsf3+0x8>

00002910 <__divsf3_pse>:
    2910:	99 23       	and	r25, r25
    2912:	b1 f3       	breq	.-20     	; 0x2900 <__divsf3+0x1e>
    2914:	55 23       	and	r21, r21
    2916:	91 f3       	breq	.-28     	; 0x28fc <__divsf3+0x1a>
    2918:	95 1b       	sub	r25, r21
    291a:	55 0b       	sbc	r21, r21
    291c:	bb 27       	eor	r27, r27
    291e:	aa 27       	eor	r26, r26
    2920:	62 17       	cp	r22, r18
    2922:	73 07       	cpc	r23, r19
    2924:	84 07       	cpc	r24, r20
    2926:	38 f0       	brcs	.+14     	; 0x2936 <__divsf3_pse+0x26>
    2928:	9f 5f       	subi	r25, 0xFF	; 255
    292a:	5f 4f       	sbci	r21, 0xFF	; 255
    292c:	22 0f       	add	r18, r18
    292e:	33 1f       	adc	r19, r19
    2930:	44 1f       	adc	r20, r20
    2932:	aa 1f       	adc	r26, r26
    2934:	a9 f3       	breq	.-22     	; 0x2920 <__divsf3_pse+0x10>
    2936:	35 d0       	rcall	.+106    	; 0x29a2 <__divsf3_pse+0x92>
    2938:	0e 2e       	mov	r0, r30
    293a:	3a f0       	brmi	.+14     	; 0x294a <__divsf3_pse+0x3a>
    293c:	e0 e8       	ldi	r30, 0x80	; 128
    293e:	32 d0       	rcall	.+100    	; 0x29a4 <__divsf3_pse+0x94>
    2940:	91 50       	subi	r25, 0x01	; 1
    2942:	50 40       	sbci	r21, 0x00	; 0
    2944:	e6 95       	lsr	r30
    2946:	00 1c       	adc	r0, r0
    2948:	ca f7       	brpl	.-14     	; 0x293c <__divsf3_pse+0x2c>
    294a:	2b d0       	rcall	.+86     	; 0x29a2 <__divsf3_pse+0x92>
    294c:	fe 2f       	mov	r31, r30
    294e:	29 d0       	rcall	.+82     	; 0x29a2 <__divsf3_pse+0x92>
    2950:	66 0f       	add	r22, r22
    2952:	77 1f       	adc	r23, r23
    2954:	88 1f       	adc	r24, r24
    2956:	bb 1f       	adc	r27, r27
    2958:	26 17       	cp	r18, r22
    295a:	37 07       	cpc	r19, r23
    295c:	48 07       	cpc	r20, r24
    295e:	ab 07       	cpc	r26, r27
    2960:	b0 e8       	ldi	r27, 0x80	; 128
    2962:	09 f0       	breq	.+2      	; 0x2966 <__divsf3_pse+0x56>
    2964:	bb 0b       	sbc	r27, r27
    2966:	80 2d       	mov	r24, r0
    2968:	bf 01       	movw	r22, r30
    296a:	ff 27       	eor	r31, r31
    296c:	93 58       	subi	r25, 0x83	; 131
    296e:	5f 4f       	sbci	r21, 0xFF	; 255
    2970:	3a f0       	brmi	.+14     	; 0x2980 <__divsf3_pse+0x70>
    2972:	9e 3f       	cpi	r25, 0xFE	; 254
    2974:	51 05       	cpc	r21, r1
    2976:	78 f0       	brcs	.+30     	; 0x2996 <__divsf3_pse+0x86>
    2978:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>
    297c:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__fp_szero>
    2980:	5f 3f       	cpi	r21, 0xFF	; 255
    2982:	e4 f3       	brlt	.-8      	; 0x297c <__divsf3_pse+0x6c>
    2984:	98 3e       	cpi	r25, 0xE8	; 232
    2986:	d4 f3       	brlt	.-12     	; 0x297c <__divsf3_pse+0x6c>
    2988:	86 95       	lsr	r24
    298a:	77 95       	ror	r23
    298c:	67 95       	ror	r22
    298e:	b7 95       	ror	r27
    2990:	f7 95       	ror	r31
    2992:	9f 5f       	subi	r25, 0xFF	; 255
    2994:	c9 f7       	brne	.-14     	; 0x2988 <__divsf3_pse+0x78>
    2996:	88 0f       	add	r24, r24
    2998:	91 1d       	adc	r25, r1
    299a:	96 95       	lsr	r25
    299c:	87 95       	ror	r24
    299e:	97 f9       	bld	r25, 7
    29a0:	08 95       	ret
    29a2:	e1 e0       	ldi	r30, 0x01	; 1
    29a4:	66 0f       	add	r22, r22
    29a6:	77 1f       	adc	r23, r23
    29a8:	88 1f       	adc	r24, r24
    29aa:	bb 1f       	adc	r27, r27
    29ac:	62 17       	cp	r22, r18
    29ae:	73 07       	cpc	r23, r19
    29b0:	84 07       	cpc	r24, r20
    29b2:	ba 07       	cpc	r27, r26
    29b4:	20 f0       	brcs	.+8      	; 0x29be <__divsf3_pse+0xae>
    29b6:	62 1b       	sub	r22, r18
    29b8:	73 0b       	sbc	r23, r19
    29ba:	84 0b       	sbc	r24, r20
    29bc:	ba 0b       	sbc	r27, r26
    29be:	ee 1f       	adc	r30, r30
    29c0:	88 f7       	brcc	.-30     	; 0x29a4 <__divsf3_pse+0x94>
    29c2:	e0 95       	com	r30
    29c4:	08 95       	ret

000029c6 <__fixsfsi>:
    29c6:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__fixunssfsi>
    29ca:	68 94       	set
    29cc:	b1 11       	cpse	r27, r1
    29ce:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__fp_szero>
    29d2:	08 95       	ret

000029d4 <__fixunssfsi>:
    29d4:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__fp_splitA>
    29d8:	88 f0       	brcs	.+34     	; 0x29fc <__fixunssfsi+0x28>
    29da:	9f 57       	subi	r25, 0x7F	; 127
    29dc:	98 f0       	brcs	.+38     	; 0x2a04 <__fixunssfsi+0x30>
    29de:	b9 2f       	mov	r27, r25
    29e0:	99 27       	eor	r25, r25
    29e2:	b7 51       	subi	r27, 0x17	; 23
    29e4:	b0 f0       	brcs	.+44     	; 0x2a12 <__fixunssfsi+0x3e>
    29e6:	e1 f0       	breq	.+56     	; 0x2a20 <__fixunssfsi+0x4c>
    29e8:	66 0f       	add	r22, r22
    29ea:	77 1f       	adc	r23, r23
    29ec:	88 1f       	adc	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	1a f0       	brmi	.+6      	; 0x29f8 <__fixunssfsi+0x24>
    29f2:	ba 95       	dec	r27
    29f4:	c9 f7       	brne	.-14     	; 0x29e8 <__fixunssfsi+0x14>
    29f6:	14 c0       	rjmp	.+40     	; 0x2a20 <__fixunssfsi+0x4c>
    29f8:	b1 30       	cpi	r27, 0x01	; 1
    29fa:	91 f0       	breq	.+36     	; 0x2a20 <__fixunssfsi+0x4c>
    29fc:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <__fp_zero>
    2a00:	b1 e0       	ldi	r27, 0x01	; 1
    2a02:	08 95       	ret
    2a04:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__fp_zero>
    2a08:	67 2f       	mov	r22, r23
    2a0a:	78 2f       	mov	r23, r24
    2a0c:	88 27       	eor	r24, r24
    2a0e:	b8 5f       	subi	r27, 0xF8	; 248
    2a10:	39 f0       	breq	.+14     	; 0x2a20 <__fixunssfsi+0x4c>
    2a12:	b9 3f       	cpi	r27, 0xF9	; 249
    2a14:	cc f3       	brlt	.-14     	; 0x2a08 <__fixunssfsi+0x34>
    2a16:	86 95       	lsr	r24
    2a18:	77 95       	ror	r23
    2a1a:	67 95       	ror	r22
    2a1c:	b3 95       	inc	r27
    2a1e:	d9 f7       	brne	.-10     	; 0x2a16 <__fixunssfsi+0x42>
    2a20:	3e f4       	brtc	.+14     	; 0x2a30 <__fixunssfsi+0x5c>
    2a22:	90 95       	com	r25
    2a24:	80 95       	com	r24
    2a26:	70 95       	com	r23
    2a28:	61 95       	neg	r22
    2a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a30:	08 95       	ret

00002a32 <__floatunsisf>:
    2a32:	e8 94       	clt
    2a34:	09 c0       	rjmp	.+18     	; 0x2a48 <__floatsisf+0x12>

00002a36 <__floatsisf>:
    2a36:	97 fb       	bst	r25, 7
    2a38:	3e f4       	brtc	.+14     	; 0x2a48 <__floatsisf+0x12>
    2a3a:	90 95       	com	r25
    2a3c:	80 95       	com	r24
    2a3e:	70 95       	com	r23
    2a40:	61 95       	neg	r22
    2a42:	7f 4f       	sbci	r23, 0xFF	; 255
    2a44:	8f 4f       	sbci	r24, 0xFF	; 255
    2a46:	9f 4f       	sbci	r25, 0xFF	; 255
    2a48:	99 23       	and	r25, r25
    2a4a:	a9 f0       	breq	.+42     	; 0x2a76 <__floatsisf+0x40>
    2a4c:	f9 2f       	mov	r31, r25
    2a4e:	96 e9       	ldi	r25, 0x96	; 150
    2a50:	bb 27       	eor	r27, r27
    2a52:	93 95       	inc	r25
    2a54:	f6 95       	lsr	r31
    2a56:	87 95       	ror	r24
    2a58:	77 95       	ror	r23
    2a5a:	67 95       	ror	r22
    2a5c:	b7 95       	ror	r27
    2a5e:	f1 11       	cpse	r31, r1
    2a60:	f8 cf       	rjmp	.-16     	; 0x2a52 <__floatsisf+0x1c>
    2a62:	fa f4       	brpl	.+62     	; 0x2aa2 <__floatsisf+0x6c>
    2a64:	bb 0f       	add	r27, r27
    2a66:	11 f4       	brne	.+4      	; 0x2a6c <__floatsisf+0x36>
    2a68:	60 ff       	sbrs	r22, 0
    2a6a:	1b c0       	rjmp	.+54     	; 0x2aa2 <__floatsisf+0x6c>
    2a6c:	6f 5f       	subi	r22, 0xFF	; 255
    2a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a70:	8f 4f       	sbci	r24, 0xFF	; 255
    2a72:	9f 4f       	sbci	r25, 0xFF	; 255
    2a74:	16 c0       	rjmp	.+44     	; 0x2aa2 <__floatsisf+0x6c>
    2a76:	88 23       	and	r24, r24
    2a78:	11 f0       	breq	.+4      	; 0x2a7e <__floatsisf+0x48>
    2a7a:	96 e9       	ldi	r25, 0x96	; 150
    2a7c:	11 c0       	rjmp	.+34     	; 0x2aa0 <__floatsisf+0x6a>
    2a7e:	77 23       	and	r23, r23
    2a80:	21 f0       	breq	.+8      	; 0x2a8a <__floatsisf+0x54>
    2a82:	9e e8       	ldi	r25, 0x8E	; 142
    2a84:	87 2f       	mov	r24, r23
    2a86:	76 2f       	mov	r23, r22
    2a88:	05 c0       	rjmp	.+10     	; 0x2a94 <__floatsisf+0x5e>
    2a8a:	66 23       	and	r22, r22
    2a8c:	71 f0       	breq	.+28     	; 0x2aaa <__floatsisf+0x74>
    2a8e:	96 e8       	ldi	r25, 0x86	; 134
    2a90:	86 2f       	mov	r24, r22
    2a92:	70 e0       	ldi	r23, 0x00	; 0
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	2a f0       	brmi	.+10     	; 0x2aa2 <__floatsisf+0x6c>
    2a98:	9a 95       	dec	r25
    2a9a:	66 0f       	add	r22, r22
    2a9c:	77 1f       	adc	r23, r23
    2a9e:	88 1f       	adc	r24, r24
    2aa0:	da f7       	brpl	.-10     	; 0x2a98 <__floatsisf+0x62>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	96 95       	lsr	r25
    2aa6:	87 95       	ror	r24
    2aa8:	97 f9       	bld	r25, 7
    2aaa:	08 95       	ret

00002aac <floor>:
    2aac:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__fp_trunc>
    2ab0:	90 f0       	brcs	.+36     	; 0x2ad6 <floor+0x2a>
    2ab2:	9f 37       	cpi	r25, 0x7F	; 127
    2ab4:	48 f4       	brcc	.+18     	; 0x2ac8 <floor+0x1c>
    2ab6:	91 11       	cpse	r25, r1
    2ab8:	16 f0       	brts	.+4      	; 0x2abe <floor+0x12>
    2aba:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__fp_szero>
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	80 e8       	ldi	r24, 0x80	; 128
    2ac4:	9f eb       	ldi	r25, 0xBF	; 191
    2ac6:	08 95       	ret
    2ac8:	26 f4       	brtc	.+8      	; 0x2ad2 <floor+0x26>
    2aca:	1b 16       	cp	r1, r27
    2acc:	61 1d       	adc	r22, r1
    2ace:	71 1d       	adc	r23, r1
    2ad0:	81 1d       	adc	r24, r1
    2ad2:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__fp_mintl>
    2ad6:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__fp_mpack>

00002ada <__fp_cmp>:
    2ada:	99 0f       	add	r25, r25
    2adc:	00 08       	sbc	r0, r0
    2ade:	55 0f       	add	r21, r21
    2ae0:	aa 0b       	sbc	r26, r26
    2ae2:	e0 e8       	ldi	r30, 0x80	; 128
    2ae4:	fe ef       	ldi	r31, 0xFE	; 254
    2ae6:	16 16       	cp	r1, r22
    2ae8:	17 06       	cpc	r1, r23
    2aea:	e8 07       	cpc	r30, r24
    2aec:	f9 07       	cpc	r31, r25
    2aee:	c0 f0       	brcs	.+48     	; 0x2b20 <__fp_cmp+0x46>
    2af0:	12 16       	cp	r1, r18
    2af2:	13 06       	cpc	r1, r19
    2af4:	e4 07       	cpc	r30, r20
    2af6:	f5 07       	cpc	r31, r21
    2af8:	98 f0       	brcs	.+38     	; 0x2b20 <__fp_cmp+0x46>
    2afa:	62 1b       	sub	r22, r18
    2afc:	73 0b       	sbc	r23, r19
    2afe:	84 0b       	sbc	r24, r20
    2b00:	95 0b       	sbc	r25, r21
    2b02:	39 f4       	brne	.+14     	; 0x2b12 <__fp_cmp+0x38>
    2b04:	0a 26       	eor	r0, r26
    2b06:	61 f0       	breq	.+24     	; 0x2b20 <__fp_cmp+0x46>
    2b08:	23 2b       	or	r18, r19
    2b0a:	24 2b       	or	r18, r20
    2b0c:	25 2b       	or	r18, r21
    2b0e:	21 f4       	brne	.+8      	; 0x2b18 <__fp_cmp+0x3e>
    2b10:	08 95       	ret
    2b12:	0a 26       	eor	r0, r26
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <__fp_cmp+0x3e>
    2b16:	a1 40       	sbci	r26, 0x01	; 1
    2b18:	a6 95       	lsr	r26
    2b1a:	8f ef       	ldi	r24, 0xFF	; 255
    2b1c:	81 1d       	adc	r24, r1
    2b1e:	81 1d       	adc	r24, r1
    2b20:	08 95       	ret

00002b22 <__fp_inf>:
    2b22:	97 f9       	bld	r25, 7
    2b24:	9f 67       	ori	r25, 0x7F	; 127
    2b26:	80 e8       	ldi	r24, 0x80	; 128
    2b28:	70 e0       	ldi	r23, 0x00	; 0
    2b2a:	60 e0       	ldi	r22, 0x00	; 0
    2b2c:	08 95       	ret

00002b2e <__fp_mintl>:
    2b2e:	88 23       	and	r24, r24
    2b30:	71 f4       	brne	.+28     	; 0x2b4e <__fp_mintl+0x20>
    2b32:	77 23       	and	r23, r23
    2b34:	21 f0       	breq	.+8      	; 0x2b3e <__fp_mintl+0x10>
    2b36:	98 50       	subi	r25, 0x08	; 8
    2b38:	87 2b       	or	r24, r23
    2b3a:	76 2f       	mov	r23, r22
    2b3c:	07 c0       	rjmp	.+14     	; 0x2b4c <__fp_mintl+0x1e>
    2b3e:	66 23       	and	r22, r22
    2b40:	11 f4       	brne	.+4      	; 0x2b46 <__fp_mintl+0x18>
    2b42:	99 27       	eor	r25, r25
    2b44:	0d c0       	rjmp	.+26     	; 0x2b60 <__fp_mintl+0x32>
    2b46:	90 51       	subi	r25, 0x10	; 16
    2b48:	86 2b       	or	r24, r22
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	2a f0       	brmi	.+10     	; 0x2b5a <__fp_mintl+0x2c>
    2b50:	9a 95       	dec	r25
    2b52:	66 0f       	add	r22, r22
    2b54:	77 1f       	adc	r23, r23
    2b56:	88 1f       	adc	r24, r24
    2b58:	da f7       	brpl	.-10     	; 0x2b50 <__fp_mintl+0x22>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	96 95       	lsr	r25
    2b5e:	87 95       	ror	r24
    2b60:	97 f9       	bld	r25, 7
    2b62:	08 95       	ret

00002b64 <__fp_mpack>:
    2b64:	9f 3f       	cpi	r25, 0xFF	; 255
    2b66:	31 f0       	breq	.+12     	; 0x2b74 <__fp_mpack_finite+0xc>

00002b68 <__fp_mpack_finite>:
    2b68:	91 50       	subi	r25, 0x01	; 1
    2b6a:	20 f4       	brcc	.+8      	; 0x2b74 <__fp_mpack_finite+0xc>
    2b6c:	87 95       	ror	r24
    2b6e:	77 95       	ror	r23
    2b70:	67 95       	ror	r22
    2b72:	b7 95       	ror	r27
    2b74:	88 0f       	add	r24, r24
    2b76:	91 1d       	adc	r25, r1
    2b78:	96 95       	lsr	r25
    2b7a:	87 95       	ror	r24
    2b7c:	97 f9       	bld	r25, 7
    2b7e:	08 95       	ret

00002b80 <__fp_nan>:
    2b80:	9f ef       	ldi	r25, 0xFF	; 255
    2b82:	80 ec       	ldi	r24, 0xC0	; 192
    2b84:	08 95       	ret

00002b86 <__fp_pscA>:
    2b86:	00 24       	eor	r0, r0
    2b88:	0a 94       	dec	r0
    2b8a:	16 16       	cp	r1, r22
    2b8c:	17 06       	cpc	r1, r23
    2b8e:	18 06       	cpc	r1, r24
    2b90:	09 06       	cpc	r0, r25
    2b92:	08 95       	ret

00002b94 <__fp_pscB>:
    2b94:	00 24       	eor	r0, r0
    2b96:	0a 94       	dec	r0
    2b98:	12 16       	cp	r1, r18
    2b9a:	13 06       	cpc	r1, r19
    2b9c:	14 06       	cpc	r1, r20
    2b9e:	05 06       	cpc	r0, r21
    2ba0:	08 95       	ret

00002ba2 <__fp_round>:
    2ba2:	09 2e       	mov	r0, r25
    2ba4:	03 94       	inc	r0
    2ba6:	00 0c       	add	r0, r0
    2ba8:	11 f4       	brne	.+4      	; 0x2bae <__fp_round+0xc>
    2baa:	88 23       	and	r24, r24
    2bac:	52 f0       	brmi	.+20     	; 0x2bc2 <__fp_round+0x20>
    2bae:	bb 0f       	add	r27, r27
    2bb0:	40 f4       	brcc	.+16     	; 0x2bc2 <__fp_round+0x20>
    2bb2:	bf 2b       	or	r27, r31
    2bb4:	11 f4       	brne	.+4      	; 0x2bba <__fp_round+0x18>
    2bb6:	60 ff       	sbrs	r22, 0
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <__fp_round+0x20>
    2bba:	6f 5f       	subi	r22, 0xFF	; 255
    2bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc2:	08 95       	ret

00002bc4 <__fp_split3>:
    2bc4:	57 fd       	sbrc	r21, 7
    2bc6:	90 58       	subi	r25, 0x80	; 128
    2bc8:	44 0f       	add	r20, r20
    2bca:	55 1f       	adc	r21, r21
    2bcc:	59 f0       	breq	.+22     	; 0x2be4 <__fp_splitA+0x10>
    2bce:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd0:	71 f0       	breq	.+28     	; 0x2bee <__fp_splitA+0x1a>
    2bd2:	47 95       	ror	r20

00002bd4 <__fp_splitA>:
    2bd4:	88 0f       	add	r24, r24
    2bd6:	97 fb       	bst	r25, 7
    2bd8:	99 1f       	adc	r25, r25
    2bda:	61 f0       	breq	.+24     	; 0x2bf4 <__fp_splitA+0x20>
    2bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    2bde:	79 f0       	breq	.+30     	; 0x2bfe <__fp_splitA+0x2a>
    2be0:	87 95       	ror	r24
    2be2:	08 95       	ret
    2be4:	12 16       	cp	r1, r18
    2be6:	13 06       	cpc	r1, r19
    2be8:	14 06       	cpc	r1, r20
    2bea:	55 1f       	adc	r21, r21
    2bec:	f2 cf       	rjmp	.-28     	; 0x2bd2 <__fp_split3+0xe>
    2bee:	46 95       	lsr	r20
    2bf0:	f1 df       	rcall	.-30     	; 0x2bd4 <__fp_splitA>
    2bf2:	08 c0       	rjmp	.+16     	; 0x2c04 <__fp_splitA+0x30>
    2bf4:	16 16       	cp	r1, r22
    2bf6:	17 06       	cpc	r1, r23
    2bf8:	18 06       	cpc	r1, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	f1 cf       	rjmp	.-30     	; 0x2be0 <__fp_splitA+0xc>
    2bfe:	86 95       	lsr	r24
    2c00:	71 05       	cpc	r23, r1
    2c02:	61 05       	cpc	r22, r1
    2c04:	08 94       	sec
    2c06:	08 95       	ret

00002c08 <__fp_trunc>:
    2c08:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__fp_splitA>
    2c0c:	a0 f0       	brcs	.+40     	; 0x2c36 <__fp_trunc+0x2e>
    2c0e:	be e7       	ldi	r27, 0x7E	; 126
    2c10:	b9 17       	cp	r27, r25
    2c12:	88 f4       	brcc	.+34     	; 0x2c36 <__fp_trunc+0x2e>
    2c14:	bb 27       	eor	r27, r27
    2c16:	9f 38       	cpi	r25, 0x8F	; 143
    2c18:	60 f4       	brcc	.+24     	; 0x2c32 <__fp_trunc+0x2a>
    2c1a:	16 16       	cp	r1, r22
    2c1c:	b1 1d       	adc	r27, r1
    2c1e:	67 2f       	mov	r22, r23
    2c20:	78 2f       	mov	r23, r24
    2c22:	88 27       	eor	r24, r24
    2c24:	98 5f       	subi	r25, 0xF8	; 248
    2c26:	f7 cf       	rjmp	.-18     	; 0x2c16 <__fp_trunc+0xe>
    2c28:	86 95       	lsr	r24
    2c2a:	77 95       	ror	r23
    2c2c:	67 95       	ror	r22
    2c2e:	b1 1d       	adc	r27, r1
    2c30:	93 95       	inc	r25
    2c32:	96 39       	cpi	r25, 0x96	; 150
    2c34:	c8 f3       	brcs	.-14     	; 0x2c28 <__fp_trunc+0x20>
    2c36:	08 95       	ret

00002c38 <__fp_zero>:
    2c38:	e8 94       	clt

00002c3a <__fp_szero>:
    2c3a:	bb 27       	eor	r27, r27
    2c3c:	66 27       	eor	r22, r22
    2c3e:	77 27       	eor	r23, r23
    2c40:	cb 01       	movw	r24, r22
    2c42:	97 f9       	bld	r25, 7
    2c44:	08 95       	ret

00002c46 <__gesf2>:
    2c46:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__fp_cmp>
    2c4a:	08 f4       	brcc	.+2      	; 0x2c4e <__gesf2+0x8>
    2c4c:	8f ef       	ldi	r24, 0xFF	; 255
    2c4e:	08 95       	ret

00002c50 <__mulsf3>:
    2c50:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__mulsf3x>
    2c54:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__fp_round>
    2c58:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__fp_pscA>
    2c5c:	38 f0       	brcs	.+14     	; 0x2c6c <__mulsf3+0x1c>
    2c5e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__fp_pscB>
    2c62:	20 f0       	brcs	.+8      	; 0x2c6c <__mulsf3+0x1c>
    2c64:	95 23       	and	r25, r21
    2c66:	11 f0       	breq	.+4      	; 0x2c6c <__mulsf3+0x1c>
    2c68:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>
    2c6c:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__fp_nan>
    2c70:	11 24       	eor	r1, r1
    2c72:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__fp_szero>

00002c76 <__mulsf3x>:
    2c76:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__fp_split3>
    2c7a:	70 f3       	brcs	.-36     	; 0x2c58 <__mulsf3+0x8>

00002c7c <__mulsf3_pse>:
    2c7c:	95 9f       	mul	r25, r21
    2c7e:	c1 f3       	breq	.-16     	; 0x2c70 <__mulsf3+0x20>
    2c80:	95 0f       	add	r25, r21
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	55 1f       	adc	r21, r21
    2c86:	62 9f       	mul	r22, r18
    2c88:	f0 01       	movw	r30, r0
    2c8a:	72 9f       	mul	r23, r18
    2c8c:	bb 27       	eor	r27, r27
    2c8e:	f0 0d       	add	r31, r0
    2c90:	b1 1d       	adc	r27, r1
    2c92:	63 9f       	mul	r22, r19
    2c94:	aa 27       	eor	r26, r26
    2c96:	f0 0d       	add	r31, r0
    2c98:	b1 1d       	adc	r27, r1
    2c9a:	aa 1f       	adc	r26, r26
    2c9c:	64 9f       	mul	r22, r20
    2c9e:	66 27       	eor	r22, r22
    2ca0:	b0 0d       	add	r27, r0
    2ca2:	a1 1d       	adc	r26, r1
    2ca4:	66 1f       	adc	r22, r22
    2ca6:	82 9f       	mul	r24, r18
    2ca8:	22 27       	eor	r18, r18
    2caa:	b0 0d       	add	r27, r0
    2cac:	a1 1d       	adc	r26, r1
    2cae:	62 1f       	adc	r22, r18
    2cb0:	73 9f       	mul	r23, r19
    2cb2:	b0 0d       	add	r27, r0
    2cb4:	a1 1d       	adc	r26, r1
    2cb6:	62 1f       	adc	r22, r18
    2cb8:	83 9f       	mul	r24, r19
    2cba:	a0 0d       	add	r26, r0
    2cbc:	61 1d       	adc	r22, r1
    2cbe:	22 1f       	adc	r18, r18
    2cc0:	74 9f       	mul	r23, r20
    2cc2:	33 27       	eor	r19, r19
    2cc4:	a0 0d       	add	r26, r0
    2cc6:	61 1d       	adc	r22, r1
    2cc8:	23 1f       	adc	r18, r19
    2cca:	84 9f       	mul	r24, r20
    2ccc:	60 0d       	add	r22, r0
    2cce:	21 1d       	adc	r18, r1
    2cd0:	82 2f       	mov	r24, r18
    2cd2:	76 2f       	mov	r23, r22
    2cd4:	6a 2f       	mov	r22, r26
    2cd6:	11 24       	eor	r1, r1
    2cd8:	9f 57       	subi	r25, 0x7F	; 127
    2cda:	50 40       	sbci	r21, 0x00	; 0
    2cdc:	9a f0       	brmi	.+38     	; 0x2d04 <__mulsf3_pse+0x88>
    2cde:	f1 f0       	breq	.+60     	; 0x2d1c <__mulsf3_pse+0xa0>
    2ce0:	88 23       	and	r24, r24
    2ce2:	4a f0       	brmi	.+18     	; 0x2cf6 <__mulsf3_pse+0x7a>
    2ce4:	ee 0f       	add	r30, r30
    2ce6:	ff 1f       	adc	r31, r31
    2ce8:	bb 1f       	adc	r27, r27
    2cea:	66 1f       	adc	r22, r22
    2cec:	77 1f       	adc	r23, r23
    2cee:	88 1f       	adc	r24, r24
    2cf0:	91 50       	subi	r25, 0x01	; 1
    2cf2:	50 40       	sbci	r21, 0x00	; 0
    2cf4:	a9 f7       	brne	.-22     	; 0x2ce0 <__mulsf3_pse+0x64>
    2cf6:	9e 3f       	cpi	r25, 0xFE	; 254
    2cf8:	51 05       	cpc	r21, r1
    2cfa:	80 f0       	brcs	.+32     	; 0x2d1c <__mulsf3_pse+0xa0>
    2cfc:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_inf>
    2d00:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__fp_szero>
    2d04:	5f 3f       	cpi	r21, 0xFF	; 255
    2d06:	e4 f3       	brlt	.-8      	; 0x2d00 <__mulsf3_pse+0x84>
    2d08:	98 3e       	cpi	r25, 0xE8	; 232
    2d0a:	d4 f3       	brlt	.-12     	; 0x2d00 <__mulsf3_pse+0x84>
    2d0c:	86 95       	lsr	r24
    2d0e:	77 95       	ror	r23
    2d10:	67 95       	ror	r22
    2d12:	b7 95       	ror	r27
    2d14:	f7 95       	ror	r31
    2d16:	e7 95       	ror	r30
    2d18:	9f 5f       	subi	r25, 0xFF	; 255
    2d1a:	c1 f7       	brne	.-16     	; 0x2d0c <__mulsf3_pse+0x90>
    2d1c:	fe 2b       	or	r31, r30
    2d1e:	88 0f       	add	r24, r24
    2d20:	91 1d       	adc	r25, r1
    2d22:	96 95       	lsr	r25
    2d24:	87 95       	ror	r24
    2d26:	97 f9       	bld	r25, 7
    2d28:	08 95       	ret

00002d2a <initVariant>:
    2d2a:	08 95       	ret

00002d2c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2d2c:	0e 94 c6 18 	call	0x318c	; 0x318c <init>

	initVariant();
    2d30:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2d34:	0e 94 e6 04 	call	0x9cc	; 0x9cc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2d38:	c0 e0       	ldi	r28, 0x00	; 0
    2d3a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2d3c:	0e 94 2f 04 	call	0x85e	; 0x85e <loop>
		if (serialEventRun) serialEventRun();
    2d40:	20 97       	sbiw	r28, 0x00	; 0
    2d42:	e1 f3       	breq	.-8      	; 0x2d3c <main+0x10>
    2d44:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d48:	f9 cf       	rjmp	.-14     	; 0x2d3c <main+0x10>

00002d4a <_Znwj>:
    2d4a:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <malloc>

00002d4e <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2d4e:	cf 92       	push	r12
    2d50:	df 92       	push	r13
    2d52:	ef 92       	push	r14
    2d54:	ff 92       	push	r15
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	6c 01       	movw	r12, r24
    2d60:	7a 01       	movw	r14, r20
    2d62:	8b 01       	movw	r16, r22
    2d64:	c0 e0       	ldi	r28, 0x00	; 0
    2d66:	d0 e0       	ldi	r29, 0x00	; 0
    2d68:	ce 15       	cp	r28, r14
    2d6a:	df 05       	cpc	r29, r15
    2d6c:	81 f0       	breq	.+32     	; 0x2d8e <_ZN5Print5writeEPKhj+0x40>
    2d6e:	d8 01       	movw	r26, r16
    2d70:	6d 91       	ld	r22, X+
    2d72:	8d 01       	movw	r16, r26
    2d74:	d6 01       	movw	r26, r12
    2d76:	ed 91       	ld	r30, X+
    2d78:	fc 91       	ld	r31, X
    2d7a:	01 90       	ld	r0, Z+
    2d7c:	f0 81       	ld	r31, Z
    2d7e:	e0 2d       	mov	r30, r0
    2d80:	c6 01       	movw	r24, r12
    2d82:	09 95       	icall
    2d84:	89 2b       	or	r24, r25
    2d86:	11 f0       	breq	.+4      	; 0x2d8c <_ZN5Print5writeEPKhj+0x3e>
    2d88:	21 96       	adiw	r28, 0x01	; 1
    2d8a:	ee cf       	rjmp	.-36     	; 0x2d68 <_ZN5Print5writeEPKhj+0x1a>
    2d8c:	7e 01       	movw	r14, r28
    2d8e:	c7 01       	movw	r24, r14
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	ff 90       	pop	r15
    2d9a:	ef 90       	pop	r14
    2d9c:	df 90       	pop	r13
    2d9e:	cf 90       	pop	r12
    2da0:	08 95       	ret

00002da2 <_ZN5Print5writeEPKc>:
    2da2:	61 15       	cp	r22, r1
    2da4:	71 05       	cpc	r23, r1
    2da6:	79 f0       	breq	.+30     	; 0x2dc6 <_ZN5Print5writeEPKc+0x24>
    2da8:	fb 01       	movw	r30, r22
    2daa:	01 90       	ld	r0, Z+
    2dac:	00 20       	and	r0, r0
    2dae:	e9 f7       	brne	.-6      	; 0x2daa <_ZN5Print5writeEPKc+0x8>
    2db0:	31 97       	sbiw	r30, 0x01	; 1
    2db2:	af 01       	movw	r20, r30
    2db4:	46 1b       	sub	r20, r22
    2db6:	57 0b       	sbc	r21, r23
    2db8:	dc 01       	movw	r26, r24
    2dba:	ed 91       	ld	r30, X+
    2dbc:	fc 91       	ld	r31, X
    2dbe:	02 80       	ldd	r0, Z+2	; 0x02
    2dc0:	f3 81       	ldd	r31, Z+3	; 0x03
    2dc2:	e0 2d       	mov	r30, r0
    2dc4:	09 94       	ijmp
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	08 95       	ret

00002dcc <_ZN5Print5printERK6String>:
    2dcc:	db 01       	movw	r26, r22
    2dce:	14 96       	adiw	r26, 0x04	; 4
    2dd0:	4d 91       	ld	r20, X+
    2dd2:	5c 91       	ld	r21, X
    2dd4:	15 97       	sbiw	r26, 0x05	; 5
    2dd6:	6d 91       	ld	r22, X+
    2dd8:	7c 91       	ld	r23, X
    2dda:	dc 01       	movw	r26, r24
    2ddc:	ed 91       	ld	r30, X+
    2dde:	fc 91       	ld	r31, X
    2de0:	02 80       	ldd	r0, Z+2	; 0x02
    2de2:	f3 81       	ldd	r31, Z+3	; 0x03
    2de4:	e0 2d       	mov	r30, r0
    2de6:	09 94       	ijmp

00002de8 <_ZN5Print5printEPKc>:
    2de8:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <_ZN5Print5writeEPKc>

00002dec <_ZN5Print5printEc>:
    2dec:	dc 01       	movw	r26, r24
    2dee:	ed 91       	ld	r30, X+
    2df0:	fc 91       	ld	r31, X
    2df2:	01 90       	ld	r0, Z+
    2df4:	f0 81       	ld	r31, Z
    2df6:	e0 2d       	mov	r30, r0
    2df8:	09 94       	ijmp

00002dfa <_ZN5Print11printNumberEmh>:
    2dfa:	8f 92       	push	r8
    2dfc:	9f 92       	push	r9
    2dfe:	af 92       	push	r10
    2e00:	bf 92       	push	r11
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	a1 97       	sbiw	r28, 0x21	; 33
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	7c 01       	movw	r14, r24
    2e20:	fa 01       	movw	r30, r20
    2e22:	cb 01       	movw	r24, r22
    2e24:	19 a2       	std	Y+33, r1	; 0x21
    2e26:	22 30       	cpi	r18, 0x02	; 2
    2e28:	08 f4       	brcc	.+2      	; 0x2e2c <_ZN5Print11printNumberEmh+0x32>
    2e2a:	2a e0       	ldi	r18, 0x0A	; 10
    2e2c:	8e 01       	movw	r16, r28
    2e2e:	0f 5d       	subi	r16, 0xDF	; 223
    2e30:	1f 4f       	sbci	r17, 0xFF	; 255
    2e32:	82 2e       	mov	r8, r18
    2e34:	91 2c       	mov	r9, r1
    2e36:	a1 2c       	mov	r10, r1
    2e38:	b1 2c       	mov	r11, r1
    2e3a:	bf 01       	movw	r22, r30
    2e3c:	a5 01       	movw	r20, r10
    2e3e:	94 01       	movw	r18, r8
    2e40:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__udivmodsi4>
    2e44:	f9 01       	movw	r30, r18
    2e46:	ca 01       	movw	r24, r20
    2e48:	01 50       	subi	r16, 0x01	; 1
    2e4a:	11 09       	sbc	r17, r1
    2e4c:	6a 30       	cpi	r22, 0x0A	; 10
    2e4e:	10 f4       	brcc	.+4      	; 0x2e54 <_ZN5Print11printNumberEmh+0x5a>
    2e50:	60 5d       	subi	r22, 0xD0	; 208
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <_ZN5Print11printNumberEmh+0x5c>
    2e54:	69 5c       	subi	r22, 0xC9	; 201
    2e56:	d8 01       	movw	r26, r16
    2e58:	6c 93       	st	X, r22
    2e5a:	23 2b       	or	r18, r19
    2e5c:	24 2b       	or	r18, r20
    2e5e:	25 2b       	or	r18, r21
    2e60:	61 f7       	brne	.-40     	; 0x2e3a <_ZN5Print11printNumberEmh+0x40>
    2e62:	b8 01       	movw	r22, r16
    2e64:	c7 01       	movw	r24, r14
    2e66:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <_ZN5Print5writeEPKc>
    2e6a:	a1 96       	adiw	r28, 0x21	; 33
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	ff 90       	pop	r15
    2e80:	ef 90       	pop	r14
    2e82:	bf 90       	pop	r11
    2e84:	af 90       	pop	r10
    2e86:	9f 90       	pop	r9
    2e88:	8f 90       	pop	r8
    2e8a:	08 95       	ret

00002e8c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2e8c:	cf 92       	push	r12
    2e8e:	df 92       	push	r13
    2e90:	ef 92       	push	r14
    2e92:	ff 92       	push	r15
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
  if (base == 0) {
    2e9c:	21 15       	cp	r18, r1
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	81 f4       	brne	.+32     	; 0x2ec2 <_ZN5Print5printEli+0x36>
    return write(n);
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	ed 91       	ld	r30, X+
    2ea6:	fc 91       	ld	r31, X
    2ea8:	01 90       	ld	r0, Z+
    2eaa:	f0 81       	ld	r31, Z
    2eac:	e0 2d       	mov	r30, r0
    2eae:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	ff 90       	pop	r15
    2eba:	ef 90       	pop	r14
    2ebc:	df 90       	pop	r13
    2ebe:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2ec0:	09 94       	ijmp
  } else if (base == 10) {
    2ec2:	2a 30       	cpi	r18, 0x0A	; 10
    2ec4:	31 05       	cpc	r19, r1
    2ec6:	01 f5       	brne	.+64     	; 0x2f08 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    2ec8:	77 ff       	sbrs	r23, 7
    2eca:	1d c0       	rjmp	.+58     	; 0x2f06 <_ZN5Print5printEli+0x7a>
    2ecc:	6a 01       	movw	r12, r20
    2ece:	7b 01       	movw	r14, r22
    2ed0:	ec 01       	movw	r28, r24
      int t = print('-');
    2ed2:	6d e2       	ldi	r22, 0x2D	; 45
    2ed4:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print5printEc>
    2ed8:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2eda:	44 27       	eor	r20, r20
    2edc:	55 27       	eor	r21, r21
    2ede:	ba 01       	movw	r22, r20
    2ee0:	4c 19       	sub	r20, r12
    2ee2:	5d 09       	sbc	r21, r13
    2ee4:	6e 09       	sbc	r22, r14
    2ee6:	7f 09       	sbc	r23, r15
    2ee8:	2a e0       	ldi	r18, 0x0A	; 10
    2eea:	ce 01       	movw	r24, r28
    2eec:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN5Print11printNumberEmh>
    2ef0:	80 0f       	add	r24, r16
    2ef2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	df 90       	pop	r13
    2f02:	cf 90       	pop	r12
    2f04:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2f06:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	ff 90       	pop	r15
    2f12:	ef 90       	pop	r14
    2f14:	df 90       	pop	r13
    2f16:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2f18:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <_ZN5Print11printNumberEmh>

00002f1c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2f1c:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2f1e:	ab 01       	movw	r20, r22
    2f20:	77 0f       	add	r23, r23
    2f22:	66 0b       	sbc	r22, r22
    2f24:	77 0b       	sbc	r23, r23
    2f26:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <_ZN5Print5printEli>

00002f2a <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2f2a:	08 95       	ret

00002f2c <attachInterrupt>:
    2f2c:	82 30       	cpi	r24, 0x02	; 2
    2f2e:	e8 f4       	brcc	.+58     	; 0x2f6a <attachInterrupt+0x3e>
    2f30:	e8 2f       	mov	r30, r24
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	ee 0f       	add	r30, r30
    2f36:	ff 1f       	adc	r31, r31
    2f38:	e8 5f       	subi	r30, 0xF8	; 248
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	71 83       	std	Z+1, r23	; 0x01
    2f3e:	60 83       	st	Z, r22
    2f40:	81 30       	cpi	r24, 0x01	; 1
    2f42:	41 f0       	breq	.+16     	; 0x2f54 <attachInterrupt+0x28>
    2f44:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2f48:	8c 7f       	andi	r24, 0xFC	; 252
    2f4a:	48 2b       	or	r20, r24
    2f4c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2f50:	e8 9a       	sbi	0x1d, 0	; 29
    2f52:	08 95       	ret
    2f54:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2f58:	83 7f       	andi	r24, 0xF3	; 243
    2f5a:	44 0f       	add	r20, r20
    2f5c:	55 1f       	adc	r21, r21
    2f5e:	44 0f       	add	r20, r20
    2f60:	55 1f       	adc	r21, r21
    2f62:	48 2b       	or	r20, r24
    2f64:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2f68:	e9 9a       	sbi	0x1d, 1	; 29
    2f6a:	08 95       	ret

00002f6c <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2f6c:	1f 92       	push	r1
    2f6e:	0f 92       	push	r0
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	0f 92       	push	r0
    2f74:	11 24       	eor	r1, r1
    2f76:	2f 93       	push	r18
    2f78:	3f 93       	push	r19
    2f7a:	4f 93       	push	r20
    2f7c:	5f 93       	push	r21
    2f7e:	6f 93       	push	r22
    2f80:	7f 93       	push	r23
    2f82:	8f 93       	push	r24
    2f84:	9f 93       	push	r25
    2f86:	af 93       	push	r26
    2f88:	bf 93       	push	r27
    2f8a:	ef 93       	push	r30
    2f8c:	ff 93       	push	r31
    2f8e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc>
    2f92:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x1>
    2f96:	09 95       	icall
    2f98:	ff 91       	pop	r31
    2f9a:	ef 91       	pop	r30
    2f9c:	bf 91       	pop	r27
    2f9e:	af 91       	pop	r26
    2fa0:	9f 91       	pop	r25
    2fa2:	8f 91       	pop	r24
    2fa4:	7f 91       	pop	r23
    2fa6:	6f 91       	pop	r22
    2fa8:	5f 91       	pop	r21
    2faa:	4f 91       	pop	r20
    2fac:	3f 91       	pop	r19
    2fae:	2f 91       	pop	r18
    2fb0:	0f 90       	pop	r0
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	0f 90       	pop	r0
    2fb6:	1f 90       	pop	r1
    2fb8:	18 95       	reti

00002fba <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2fba:	1f 92       	push	r1
    2fbc:	0f 92       	push	r0
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	0f 92       	push	r0
    2fc2:	11 24       	eor	r1, r1
    2fc4:	2f 93       	push	r18
    2fc6:	3f 93       	push	r19
    2fc8:	4f 93       	push	r20
    2fca:	5f 93       	push	r21
    2fcc:	6f 93       	push	r22
    2fce:	7f 93       	push	r23
    2fd0:	8f 93       	push	r24
    2fd2:	9f 93       	push	r25
    2fd4:	af 93       	push	r26
    2fd6:	bf 93       	push	r27
    2fd8:	ef 93       	push	r30
    2fda:	ff 93       	push	r31
    2fdc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <intFunc+0x2>
    2fe0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <intFunc+0x3>
    2fe4:	09 95       	icall
    2fe6:	ff 91       	pop	r31
    2fe8:	ef 91       	pop	r30
    2fea:	bf 91       	pop	r27
    2fec:	af 91       	pop	r26
    2fee:	9f 91       	pop	r25
    2ff0:	8f 91       	pop	r24
    2ff2:	7f 91       	pop	r23
    2ff4:	6f 91       	pop	r22
    2ff6:	5f 91       	pop	r21
    2ff8:	4f 91       	pop	r20
    2ffa:	3f 91       	pop	r19
    2ffc:	2f 91       	pop	r18
    2ffe:	0f 90       	pop	r0
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	0f 90       	pop	r0
    3004:	1f 90       	pop	r1
    3006:	18 95       	reti

00003008 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3008:	1f 92       	push	r1
    300a:	0f 92       	push	r0
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	0f 92       	push	r0
    3010:	11 24       	eor	r1, r1
    3012:	2f 93       	push	r18
    3014:	3f 93       	push	r19
    3016:	8f 93       	push	r24
    3018:	9f 93       	push	r25
    301a:	af 93       	push	r26
    301c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    301e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <timer0_millis>
    3022:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <timer0_millis+0x1>
    3026:	a0 91 9f 02 	lds	r26, 0x029F	; 0x80029f <timer0_millis+0x2>
    302a:	b0 91 a0 02 	lds	r27, 0x02A0	; 0x8002a0 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    302e:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3032:	23 e0       	ldi	r18, 0x03	; 3
    3034:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3036:	2d 37       	cpi	r18, 0x7D	; 125
    3038:	20 f4       	brcc	.+8      	; 0x3042 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    303a:	01 96       	adiw	r24, 0x01	; 1
    303c:	a1 1d       	adc	r26, r1
    303e:	b1 1d       	adc	r27, r1
    3040:	05 c0       	rjmp	.+10     	; 0x304c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3042:	26 e8       	ldi	r18, 0x86	; 134
    3044:	23 0f       	add	r18, r19
		m += 1;
    3046:	02 96       	adiw	r24, 0x02	; 2
    3048:	a1 1d       	adc	r26, r1
    304a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    304c:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <timer0_fract>
	timer0_millis = m;
    3050:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <timer0_millis>
    3054:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <timer0_millis+0x1>
    3058:	a0 93 9f 02 	sts	0x029F, r26	; 0x80029f <timer0_millis+0x2>
    305c:	b0 93 a0 02 	sts	0x02A0, r27	; 0x8002a0 <timer0_millis+0x3>
	timer0_overflow_count++;
    3060:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <timer0_overflow_count>
    3064:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <timer0_overflow_count+0x1>
    3068:	a0 91 a3 02 	lds	r26, 0x02A3	; 0x8002a3 <timer0_overflow_count+0x2>
    306c:	b0 91 a4 02 	lds	r27, 0x02A4	; 0x8002a4 <timer0_overflow_count+0x3>
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	a1 1d       	adc	r26, r1
    3074:	b1 1d       	adc	r27, r1
    3076:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <timer0_overflow_count>
    307a:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <timer0_overflow_count+0x1>
    307e:	a0 93 a3 02 	sts	0x02A3, r26	; 0x8002a3 <timer0_overflow_count+0x2>
    3082:	b0 93 a4 02 	sts	0x02A4, r27	; 0x8002a4 <timer0_overflow_count+0x3>
}
    3086:	bf 91       	pop	r27
    3088:	af 91       	pop	r26
    308a:	9f 91       	pop	r25
    308c:	8f 91       	pop	r24
    308e:	3f 91       	pop	r19
    3090:	2f 91       	pop	r18
    3092:	0f 90       	pop	r0
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	0f 90       	pop	r0
    3098:	1f 90       	pop	r1
    309a:	18 95       	reti

0000309c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    309c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    309e:	f8 94       	cli
	m = timer0_millis;
    30a0:	60 91 9d 02 	lds	r22, 0x029D	; 0x80029d <timer0_millis>
    30a4:	70 91 9e 02 	lds	r23, 0x029E	; 0x80029e <timer0_millis+0x1>
    30a8:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <timer0_millis+0x2>
    30ac:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <timer0_millis+0x3>
	SREG = oldSREG;
    30b0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    30b2:	08 95       	ret

000030b4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    30b4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    30b6:	f8 94       	cli
	m = timer0_overflow_count;
    30b8:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <timer0_overflow_count>
    30bc:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <timer0_overflow_count+0x1>
    30c0:	a0 91 a3 02 	lds	r26, 0x02A3	; 0x8002a3 <timer0_overflow_count+0x2>
    30c4:	b0 91 a4 02 	lds	r27, 0x02A4	; 0x8002a4 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    30c8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    30ca:	a8 9b       	sbis	0x15, 0	; 21
    30cc:	05 c0       	rjmp	.+10     	; 0x30d8 <micros+0x24>
    30ce:	2f 3f       	cpi	r18, 0xFF	; 255
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <micros+0x24>
		m++;
    30d2:	01 96       	adiw	r24, 0x01	; 1
    30d4:	a1 1d       	adc	r26, r1
    30d6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    30d8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    30da:	ba 2f       	mov	r27, r26
    30dc:	a9 2f       	mov	r26, r25
    30de:	98 2f       	mov	r25, r24
    30e0:	88 27       	eor	r24, r24
    30e2:	82 0f       	add	r24, r18
    30e4:	91 1d       	adc	r25, r1
    30e6:	a1 1d       	adc	r26, r1
    30e8:	b1 1d       	adc	r27, r1
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	42 e0       	ldi	r20, 0x02	; 2
    30f0:	66 0f       	add	r22, r22
    30f2:	77 1f       	adc	r23, r23
    30f4:	88 1f       	adc	r24, r24
    30f6:	99 1f       	adc	r25, r25
    30f8:	4a 95       	dec	r20
    30fa:	d1 f7       	brne	.-12     	; 0x30f0 <micros+0x3c>
}
    30fc:	08 95       	ret

000030fe <delay>:

void delay(unsigned long ms)
{
    30fe:	8f 92       	push	r8
    3100:	9f 92       	push	r9
    3102:	af 92       	push	r10
    3104:	bf 92       	push	r11
    3106:	cf 92       	push	r12
    3108:	df 92       	push	r13
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	6b 01       	movw	r12, r22
    3110:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3112:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <micros>
    3116:	4b 01       	movw	r8, r22
    3118:	5c 01       	movw	r10, r24

	while (ms > 0) {
    311a:	c1 14       	cp	r12, r1
    311c:	d1 04       	cpc	r13, r1
    311e:	e1 04       	cpc	r14, r1
    3120:	f1 04       	cpc	r15, r1
    3122:	01 f1       	breq	.+64     	; 0x3164 <delay+0x66>
		yield();
    3124:	0e 94 17 1b 	call	0x362e	; 0x362e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3128:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <micros>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	88 19       	sub	r24, r8
    3132:	99 09       	sbc	r25, r9
    3134:	aa 09       	sbc	r26, r10
    3136:	bb 09       	sbc	r27, r11
    3138:	88 3e       	cpi	r24, 0xE8	; 232
    313a:	93 40       	sbci	r25, 0x03	; 3
    313c:	a1 05       	cpc	r26, r1
    313e:	b1 05       	cpc	r27, r1
    3140:	60 f3       	brcs	.-40     	; 0x311a <delay+0x1c>
			ms--;
    3142:	21 e0       	ldi	r18, 0x01	; 1
    3144:	c2 1a       	sub	r12, r18
    3146:	d1 08       	sbc	r13, r1
    3148:	e1 08       	sbc	r14, r1
    314a:	f1 08       	sbc	r15, r1
			start += 1000;
    314c:	88 ee       	ldi	r24, 0xE8	; 232
    314e:	88 0e       	add	r8, r24
    3150:	83 e0       	ldi	r24, 0x03	; 3
    3152:	98 1e       	adc	r9, r24
    3154:	a1 1c       	adc	r10, r1
    3156:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3158:	c1 14       	cp	r12, r1
    315a:	d1 04       	cpc	r13, r1
    315c:	e1 04       	cpc	r14, r1
    315e:	f1 04       	cpc	r15, r1
    3160:	19 f7       	brne	.-58     	; 0x3128 <delay+0x2a>
    3162:	db cf       	rjmp	.-74     	; 0x311a <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3164:	ff 90       	pop	r15
    3166:	ef 90       	pop	r14
    3168:	df 90       	pop	r13
    316a:	cf 90       	pop	r12
    316c:	bf 90       	pop	r11
    316e:	af 90       	pop	r10
    3170:	9f 90       	pop	r9
    3172:	8f 90       	pop	r8
    3174:	08 95       	ret

00003176 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	91 05       	cpc	r25, r1
    317a:	38 f0       	brcs	.+14     	; 0x318a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3184:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <delayMicroseconds+0x10>
    318a:	08 95       	ret

0000318c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    318c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    318e:	84 b5       	in	r24, 0x24	; 36
    3190:	82 60       	ori	r24, 0x02	; 2
    3192:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3194:	84 b5       	in	r24, 0x24	; 36
    3196:	81 60       	ori	r24, 0x01	; 1
    3198:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    319a:	85 b5       	in	r24, 0x25	; 37
    319c:	82 60       	ori	r24, 0x02	; 2
    319e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    31a0:	85 b5       	in	r24, 0x25	; 37
    31a2:	81 60       	ori	r24, 0x01	; 1
    31a4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    31a6:	ee e6       	ldi	r30, 0x6E	; 110
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	81 60       	ori	r24, 0x01	; 1
    31ae:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    31b0:	e1 e8       	ldi	r30, 0x81	; 129
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    31b6:	80 81       	ld	r24, Z
    31b8:	82 60       	ori	r24, 0x02	; 2
    31ba:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    31bc:	80 81       	ld	r24, Z
    31be:	81 60       	ori	r24, 0x01	; 1
    31c0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    31c2:	e0 e8       	ldi	r30, 0x80	; 128
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	81 60       	ori	r24, 0x01	; 1
    31ca:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    31cc:	e1 eb       	ldi	r30, 0xB1	; 177
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	84 60       	ori	r24, 0x04	; 4
    31d4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    31d6:	e0 eb       	ldi	r30, 0xB0	; 176
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	81 60       	ori	r24, 0x01	; 1
    31de:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    31e0:	ea e7       	ldi	r30, 0x7A	; 122
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	84 60       	ori	r24, 0x04	; 4
    31e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    31ea:	80 81       	ld	r24, Z
    31ec:	82 60       	ori	r24, 0x02	; 2
    31ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    31f0:	80 81       	ld	r24, Z
    31f2:	81 60       	ori	r24, 0x01	; 1
    31f4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    31f6:	80 81       	ld	r24, Z
    31f8:	80 68       	ori	r24, 0x80	; 128
    31fa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    31fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3200:	08 95       	ret

00003202 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3202:	83 30       	cpi	r24, 0x03	; 3
    3204:	81 f0       	breq	.+32     	; 0x3226 <turnOffPWM+0x24>
    3206:	28 f4       	brcc	.+10     	; 0x3212 <turnOffPWM+0x10>
    3208:	81 30       	cpi	r24, 0x01	; 1
    320a:	99 f0       	breq	.+38     	; 0x3232 <turnOffPWM+0x30>
    320c:	82 30       	cpi	r24, 0x02	; 2
    320e:	a1 f0       	breq	.+40     	; 0x3238 <turnOffPWM+0x36>
    3210:	08 95       	ret
    3212:	87 30       	cpi	r24, 0x07	; 7
    3214:	a9 f0       	breq	.+42     	; 0x3240 <turnOffPWM+0x3e>
    3216:	88 30       	cpi	r24, 0x08	; 8
    3218:	b9 f0       	breq	.+46     	; 0x3248 <turnOffPWM+0x46>
    321a:	84 30       	cpi	r24, 0x04	; 4
    321c:	d1 f4       	brne	.+52     	; 0x3252 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    321e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3222:	8f 7d       	andi	r24, 0xDF	; 223
    3224:	03 c0       	rjmp	.+6      	; 0x322c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3226:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    322a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    322c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3230:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3232:	84 b5       	in	r24, 0x24	; 36
    3234:	8f 77       	andi	r24, 0x7F	; 127
    3236:	02 c0       	rjmp	.+4      	; 0x323c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3238:	84 b5       	in	r24, 0x24	; 36
    323a:	8f 7d       	andi	r24, 0xDF	; 223
    323c:	84 bd       	out	0x24, r24	; 36
    323e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3240:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3244:	8f 77       	andi	r24, 0x7F	; 127
    3246:	03 c0       	rjmp	.+6      	; 0x324e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3248:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    324c:	8f 7d       	andi	r24, 0xDF	; 223
    324e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3252:	08 95       	ret

00003254 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	fc 01       	movw	r30, r24
    325c:	e4 58       	subi	r30, 0x84	; 132
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3262:	fc 01       	movw	r30, r24
    3264:	e0 57       	subi	r30, 0x70	; 112
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    326a:	88 23       	and	r24, r24
    326c:	61 f1       	breq	.+88     	; 0x32c6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	88 0f       	add	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	fc 01       	movw	r30, r24
    3276:	e8 54       	subi	r30, 0x48	; 72
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	c5 91       	lpm	r28, Z+
    327c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    327e:	fc 01       	movw	r30, r24
    3280:	e2 55       	subi	r30, 0x52	; 82
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	a5 91       	lpm	r26, Z+
    3286:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3288:	61 11       	cpse	r22, r1
    328a:	09 c0       	rjmp	.+18     	; 0x329e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    328c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    328e:	f8 94       	cli
		*reg &= ~bit;
    3290:	88 81       	ld	r24, Y
    3292:	20 95       	com	r18
    3294:	82 23       	and	r24, r18
    3296:	88 83       	st	Y, r24
		*out &= ~bit;
    3298:	ec 91       	ld	r30, X
    329a:	2e 23       	and	r18, r30
    329c:	0b c0       	rjmp	.+22     	; 0x32b4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    329e:	62 30       	cpi	r22, 0x02	; 2
    32a0:	61 f4       	brne	.+24     	; 0x32ba <pinMode+0x66>
		uint8_t oldSREG = SREG;
    32a2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    32a4:	f8 94       	cli
		*reg &= ~bit;
    32a6:	88 81       	ld	r24, Y
    32a8:	32 2f       	mov	r19, r18
    32aa:	30 95       	com	r19
    32ac:	83 23       	and	r24, r19
    32ae:	88 83       	st	Y, r24
		*out |= bit;
    32b0:	ec 91       	ld	r30, X
    32b2:	2e 2b       	or	r18, r30
    32b4:	2c 93       	st	X, r18
		SREG = oldSREG;
    32b6:	9f bf       	out	0x3f, r25	; 63
    32b8:	06 c0       	rjmp	.+12     	; 0x32c6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    32ba:	8f b7       	in	r24, 0x3f	; 63
                cli();
    32bc:	f8 94       	cli
		*reg |= bit;
    32be:	e8 81       	ld	r30, Y
    32c0:	2e 2b       	or	r18, r30
    32c2:	28 83       	st	Y, r18
		SREG = oldSREG;
    32c4:	8f bf       	out	0x3f, r24	; 63
	}
}
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	08 95       	ret

000032cc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	f9 01       	movw	r30, r18
    32d8:	e8 59       	subi	r30, 0x98	; 152
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    32de:	f9 01       	movw	r30, r18
    32e0:	e4 58       	subi	r30, 0x84	; 132
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    32e6:	f9 01       	movw	r30, r18
    32e8:	e0 57       	subi	r30, 0x70	; 112
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    32ee:	cc 23       	and	r28, r28
    32f0:	c1 f0       	breq	.+48     	; 0x3322 <digitalWrite+0x56>
    32f2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    32f4:	81 11       	cpse	r24, r1
    32f6:	0e 94 01 19 	call	0x3202	; 0x3202 <turnOffPWM>

	out = portOutputRegister(port);
    32fa:	ec 2f       	mov	r30, r28
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	e2 55       	subi	r30, 0x52	; 82
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	a5 91       	lpm	r26, Z+
    3308:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    330a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    330c:	f8 94       	cli

	if (val == LOW) {
    330e:	11 11       	cpse	r17, r1
    3310:	04 c0       	rjmp	.+8      	; 0x331a <digitalWrite+0x4e>
		*out &= ~bit;
    3312:	8c 91       	ld	r24, X
    3314:	d0 95       	com	r29
    3316:	d8 23       	and	r29, r24
    3318:	02 c0       	rjmp	.+4      	; 0x331e <digitalWrite+0x52>
	} else {
		*out |= bit;
    331a:	ec 91       	ld	r30, X
    331c:	de 2b       	or	r29, r30
    331e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3320:	9f bf       	out	0x3f, r25	; 63
}
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	1f 91       	pop	r17
    3328:	08 95       	ret

0000332a <digitalRead>:

int digitalRead(uint8_t pin)
{
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    332e:	28 2f       	mov	r18, r24
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	f9 01       	movw	r30, r18
    3334:	e8 59       	subi	r30, 0x98	; 152
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    333a:	f9 01       	movw	r30, r18
    333c:	e4 58       	subi	r30, 0x84	; 132
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3342:	f9 01       	movw	r30, r18
    3344:	e0 57       	subi	r30, 0x70	; 112
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    334a:	cc 23       	and	r28, r28
    334c:	91 f0       	breq	.+36     	; 0x3372 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    334e:	81 11       	cpse	r24, r1
    3350:	0e 94 01 19 	call	0x3202	; 0x3202 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3354:	ec 2f       	mov	r30, r28
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	ee 0f       	add	r30, r30
    335a:	ff 1f       	adc	r31, r31
    335c:	ec 55       	subi	r30, 0x5C	; 92
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	a5 91       	lpm	r26, Z+
    3362:	b4 91       	lpm	r27, Z
    3364:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3366:	ed 23       	and	r30, r29
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	21 f4       	brne	.+8      	; 0x3376 <digitalRead+0x4c>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	02 c0       	rjmp	.+4      	; 0x3376 <digitalRead+0x4c>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	08 95       	ret

0000337c <_ZN6StringD1Ev>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    337c:	fc 01       	movw	r30, r24
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <free>

00003386 <_ZN6String10invalidateEv>:
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	ec 01       	movw	r28, r24
    338c:	88 81       	ld	r24, Y
    338e:	99 81       	ldd	r25, Y+1	; 0x01
    3390:	00 97       	sbiw	r24, 0x00	; 0
    3392:	11 f0       	breq	.+4      	; 0x3398 <_ZN6String10invalidateEv+0x12>
    3394:	0e 94 00 1c 	call	0x3800	; 0x3800 <free>
    3398:	19 82       	std	Y+1, r1	; 0x01
    339a:	18 82       	st	Y, r1
    339c:	1d 82       	std	Y+5, r1	; 0x05
    339e:	1c 82       	std	Y+4, r1	; 0x04
    33a0:	1b 82       	std	Y+3, r1	; 0x03
    33a2:	1a 82       	std	Y+2, r1	; 0x02
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	08 95       	ret

000033aa <_ZN6String12changeBufferEj>:
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	ec 01       	movw	r28, r24
    33b4:	8b 01       	movw	r16, r22
    33b6:	6f 5f       	subi	r22, 0xFF	; 255
    33b8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ba:	88 81       	ld	r24, Y
    33bc:	99 81       	ldd	r25, Y+1	; 0x01
    33be:	0e 94 89 1c 	call	0x3912	; 0x3912 <realloc>
    33c2:	00 97       	sbiw	r24, 0x00	; 0
    33c4:	31 f0       	breq	.+12     	; 0x33d2 <_ZN6String12changeBufferEj+0x28>
    33c6:	99 83       	std	Y+1, r25	; 0x01
    33c8:	88 83       	st	Y, r24
    33ca:	1b 83       	std	Y+3, r17	; 0x03
    33cc:	0a 83       	std	Y+2, r16	; 0x02
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <_ZN6String12changeBufferEj+0x2a>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	08 95       	ret

000033de <_ZN6String7reserveEj>:
    33de:	cf 93       	push	r28
    33e0:	df 93       	push	r29
    33e2:	ec 01       	movw	r28, r24
    33e4:	88 81       	ld	r24, Y
    33e6:	99 81       	ldd	r25, Y+1	; 0x01
    33e8:	89 2b       	or	r24, r25
    33ea:	29 f0       	breq	.+10     	; 0x33f6 <_ZN6String7reserveEj+0x18>
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	9b 81       	ldd	r25, Y+3	; 0x03
    33f0:	86 17       	cp	r24, r22
    33f2:	97 07       	cpc	r25, r23
    33f4:	60 f4       	brcc	.+24     	; 0x340e <_ZN6String7reserveEj+0x30>
    33f6:	ce 01       	movw	r24, r28
    33f8:	0e 94 d5 19 	call	0x33aa	; 0x33aa <_ZN6String12changeBufferEj>
    33fc:	88 23       	and	r24, r24
    33fe:	41 f0       	breq	.+16     	; 0x3410 <_ZN6String7reserveEj+0x32>
    3400:	8c 81       	ldd	r24, Y+4	; 0x04
    3402:	9d 81       	ldd	r25, Y+5	; 0x05
    3404:	89 2b       	or	r24, r25
    3406:	19 f4       	brne	.+6      	; 0x340e <_ZN6String7reserveEj+0x30>
    3408:	e8 81       	ld	r30, Y
    340a:	f9 81       	ldd	r31, Y+1	; 0x01
    340c:	10 82       	st	Z, r1
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	08 95       	ret

00003416 <_ZN6String4copyEPKcj>:
    3416:	ef 92       	push	r14
    3418:	ff 92       	push	r15
    341a:	0f 93       	push	r16
    341c:	1f 93       	push	r17
    341e:	cf 93       	push	r28
    3420:	df 93       	push	r29
    3422:	ec 01       	movw	r28, r24
    3424:	7b 01       	movw	r14, r22
    3426:	8a 01       	movw	r16, r20
    3428:	ba 01       	movw	r22, r20
    342a:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN6String7reserveEj>
    342e:	81 11       	cpse	r24, r1
    3430:	04 c0       	rjmp	.+8      	; 0x343a <_ZN6String4copyEPKcj+0x24>
    3432:	ce 01       	movw	r24, r28
    3434:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN6String10invalidateEv>
    3438:	07 c0       	rjmp	.+14     	; 0x3448 <_ZN6String4copyEPKcj+0x32>
    343a:	1d 83       	std	Y+5, r17	; 0x05
    343c:	0c 83       	std	Y+4, r16	; 0x04
    343e:	b7 01       	movw	r22, r14
    3440:	88 81       	ld	r24, Y
    3442:	99 81       	ldd	r25, Y+1	; 0x01
    3444:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <strcpy>
    3448:	ce 01       	movw	r24, r28
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	ff 90       	pop	r15
    3454:	ef 90       	pop	r14
    3456:	08 95       	ret

00003458 <_ZN6StringC1EPKc>:
    3458:	fc 01       	movw	r30, r24
    345a:	11 82       	std	Z+1, r1	; 0x01
    345c:	10 82       	st	Z, r1
    345e:	13 82       	std	Z+3, r1	; 0x03
    3460:	12 82       	std	Z+2, r1	; 0x02
    3462:	15 82       	std	Z+5, r1	; 0x05
    3464:	14 82       	std	Z+4, r1	; 0x04
    3466:	61 15       	cp	r22, r1
    3468:	71 05       	cpc	r23, r1
    346a:	51 f0       	breq	.+20     	; 0x3480 <_ZN6StringC1EPKc+0x28>
    346c:	fb 01       	movw	r30, r22
    346e:	01 90       	ld	r0, Z+
    3470:	00 20       	and	r0, r0
    3472:	e9 f7       	brne	.-6      	; 0x346e <_ZN6StringC1EPKc+0x16>
    3474:	31 97       	sbiw	r30, 0x01	; 1
    3476:	af 01       	movw	r20, r30
    3478:	46 1b       	sub	r20, r22
    347a:	57 0b       	sbc	r21, r23
    347c:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <_ZN6String4copyEPKcj>
    3480:	08 95       	ret

00003482 <_ZN6StringaSERKS_>:
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	ec 01       	movw	r28, r24
    3488:	fb 01       	movw	r30, r22
    348a:	86 17       	cp	r24, r22
    348c:	97 07       	cpc	r25, r23
    348e:	61 f0       	breq	.+24     	; 0x34a8 <_ZN6StringaSERKS_+0x26>
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	61 15       	cp	r22, r1
    3496:	71 05       	cpc	r23, r1
    3498:	29 f0       	breq	.+10     	; 0x34a4 <_ZN6StringaSERKS_+0x22>
    349a:	44 81       	ldd	r20, Z+4	; 0x04
    349c:	55 81       	ldd	r21, Z+5	; 0x05
    349e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN6String4copyEPKcj>
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <_ZN6StringaSERKS_+0x26>
    34a4:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN6String10invalidateEv>
    34a8:	ce 01       	movw	r24, r28
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	08 95       	ret

000034b0 <_ZN6StringC1ERKS_>:
    34b0:	fc 01       	movw	r30, r24
    34b2:	11 82       	std	Z+1, r1	; 0x01
    34b4:	10 82       	st	Z, r1
    34b6:	13 82       	std	Z+3, r1	; 0x03
    34b8:	12 82       	std	Z+2, r1	; 0x02
    34ba:	15 82       	std	Z+5, r1	; 0x05
    34bc:	14 82       	std	Z+4, r1	; 0x04
    34be:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <_ZN6StringaSERKS_>

000034c2 <_ZN6StringaSEPKc>:
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	ec 01       	movw	r28, r24
    34c8:	61 15       	cp	r22, r1
    34ca:	71 05       	cpc	r23, r1
    34cc:	59 f0       	breq	.+22     	; 0x34e4 <_ZN6StringaSEPKc+0x22>
    34ce:	fb 01       	movw	r30, r22
    34d0:	01 90       	ld	r0, Z+
    34d2:	00 20       	and	r0, r0
    34d4:	e9 f7       	brne	.-6      	; 0x34d0 <_ZN6StringaSEPKc+0xe>
    34d6:	31 97       	sbiw	r30, 0x01	; 1
    34d8:	af 01       	movw	r20, r30
    34da:	46 1b       	sub	r20, r22
    34dc:	57 0b       	sbc	r21, r23
    34de:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN6String4copyEPKcj>
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <_ZN6StringaSEPKc+0x26>
    34e4:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN6String10invalidateEv>
    34e8:	ce 01       	movw	r24, r28
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	08 95       	ret

000034f0 <_ZN6String6concatEPKcj>:
    34f0:	ef 92       	push	r14
    34f2:	ff 92       	push	r15
    34f4:	0f 93       	push	r16
    34f6:	1f 93       	push	r17
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	61 15       	cp	r22, r1
    34fe:	71 05       	cpc	r23, r1
    3500:	11 f4       	brne	.+4      	; 0x3506 <_ZN6String6concatEPKcj+0x16>
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	1c c0       	rjmp	.+56     	; 0x353e <_ZN6String6concatEPKcj+0x4e>
    3506:	41 15       	cp	r20, r1
    3508:	51 05       	cpc	r21, r1
    350a:	c1 f0       	breq	.+48     	; 0x353c <_ZN6String6concatEPKcj+0x4c>
    350c:	7b 01       	movw	r14, r22
    350e:	ec 01       	movw	r28, r24
    3510:	8c 81       	ldd	r24, Y+4	; 0x04
    3512:	9d 81       	ldd	r25, Y+5	; 0x05
    3514:	8a 01       	movw	r16, r20
    3516:	08 0f       	add	r16, r24
    3518:	19 1f       	adc	r17, r25
    351a:	b8 01       	movw	r22, r16
    351c:	ce 01       	movw	r24, r28
    351e:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN6String7reserveEj>
    3522:	88 23       	and	r24, r24
    3524:	71 f3       	breq	.-36     	; 0x3502 <_ZN6String6concatEPKcj+0x12>
    3526:	28 81       	ld	r18, Y
    3528:	39 81       	ldd	r19, Y+1	; 0x01
    352a:	8c 81       	ldd	r24, Y+4	; 0x04
    352c:	9d 81       	ldd	r25, Y+5	; 0x05
    352e:	b7 01       	movw	r22, r14
    3530:	82 0f       	add	r24, r18
    3532:	93 1f       	adc	r25, r19
    3534:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <strcpy>
    3538:	1d 83       	std	Y+5, r17	; 0x05
    353a:	0c 83       	std	Y+4, r16	; 0x04
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	1f 91       	pop	r17
    3544:	0f 91       	pop	r16
    3546:	ff 90       	pop	r15
    3548:	ef 90       	pop	r14
    354a:	08 95       	ret

0000354c <_ZplRK15StringSumHelperRK6String>:
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	ec 01       	movw	r28, r24
    3552:	fb 01       	movw	r30, r22
    3554:	44 81       	ldd	r20, Z+4	; 0x04
    3556:	55 81       	ldd	r21, Z+5	; 0x05
    3558:	60 81       	ld	r22, Z
    355a:	71 81       	ldd	r23, Z+1	; 0x01
    355c:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_ZN6String6concatEPKcj>
    3560:	81 11       	cpse	r24, r1
    3562:	03 c0       	rjmp	.+6      	; 0x356a <_ZplRK15StringSumHelperRK6String+0x1e>
    3564:	ce 01       	movw	r24, r28
    3566:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN6String10invalidateEv>
    356a:	ce 01       	movw	r24, r28
    356c:	df 91       	pop	r29
    356e:	cf 91       	pop	r28
    3570:	08 95       	ret

00003572 <_ZplRK15StringSumHelperPKc>:
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	ec 01       	movw	r28, r24
    3578:	61 15       	cp	r22, r1
    357a:	71 05       	cpc	r23, r1
    357c:	61 f0       	breq	.+24     	; 0x3596 <_ZplRK15StringSumHelperPKc+0x24>
    357e:	fb 01       	movw	r30, r22
    3580:	01 90       	ld	r0, Z+
    3582:	00 20       	and	r0, r0
    3584:	e9 f7       	brne	.-6      	; 0x3580 <_ZplRK15StringSumHelperPKc+0xe>
    3586:	31 97       	sbiw	r30, 0x01	; 1
    3588:	af 01       	movw	r20, r30
    358a:	46 1b       	sub	r20, r22
    358c:	57 0b       	sbc	r21, r23
    358e:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_ZN6String6concatEPKcj>
    3592:	81 11       	cpse	r24, r1
    3594:	03 c0       	rjmp	.+6      	; 0x359c <_ZplRK15StringSumHelperPKc+0x2a>
    3596:	ce 01       	movw	r24, r28
    3598:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN6String10invalidateEv>
    359c:	ce 01       	movw	r24, r28
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	08 95       	ret

000035a4 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    35a4:	bf 92       	push	r11
    35a6:	cf 92       	push	r12
    35a8:	df 92       	push	r13
    35aa:	ef 92       	push	r14
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	7c 01       	movw	r14, r24
    35b8:	6b 01       	movw	r12, r22
    35ba:	8a 01       	movw	r16, r20
    35bc:	e9 01       	movw	r28, r18
	if (left > right) {
    35be:	24 17       	cp	r18, r20
    35c0:	35 07       	cpc	r19, r21
    35c2:	20 f4       	brcc	.+8      	; 0x35cc <_ZNK6String9substringEjj+0x28>
    35c4:	81 2f       	mov	r24, r17
    35c6:	89 01       	movw	r16, r18
    35c8:	c4 2f       	mov	r28, r20
    35ca:	d8 2f       	mov	r29, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    35cc:	67 e8       	ldi	r22, 0x87	; 135
    35ce:	71 e0       	ldi	r23, 0x01	; 1
    35d0:	c7 01       	movw	r24, r14
    35d2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    35d6:	d6 01       	movw	r26, r12
    35d8:	14 96       	adiw	r26, 0x04	; 4
    35da:	8d 91       	ld	r24, X+
    35dc:	9c 91       	ld	r25, X
    35de:	15 97       	sbiw	r26, 0x05	; 5
    35e0:	08 17       	cp	r16, r24
    35e2:	19 07       	cpc	r17, r25
    35e4:	c8 f4       	brcc	.+50     	; 0x3618 <_ZNK6String9substringEjj+0x74>
    35e6:	8c 17       	cp	r24, r28
    35e8:	9d 07       	cpc	r25, r29
    35ea:	08 f4       	brcc	.+2      	; 0x35ee <_ZNK6String9substringEjj+0x4a>
    35ec:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    35ee:	d6 01       	movw	r26, r12
    35f0:	ed 91       	ld	r30, X+
    35f2:	fc 91       	ld	r31, X
    35f4:	11 97       	sbiw	r26, 0x01	; 1
    35f6:	ec 0f       	add	r30, r28
    35f8:	fd 1f       	adc	r31, r29
    35fa:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    35fc:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    35fe:	6d 91       	ld	r22, X+
    3600:	7c 91       	ld	r23, X
    3602:	60 0f       	add	r22, r16
    3604:	71 1f       	adc	r23, r17
    3606:	c7 01       	movw	r24, r14
    3608:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    360c:	d6 01       	movw	r26, r12
    360e:	ed 91       	ld	r30, X+
    3610:	fc 91       	ld	r31, X
    3612:	ec 0f       	add	r30, r28
    3614:	fd 1f       	adc	r31, r29
    3616:	b0 82       	st	Z, r11
	return out;
}
    3618:	c7 01       	movw	r24, r14
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	df 90       	pop	r13
    3628:	cf 90       	pop	r12
    362a:	bf 90       	pop	r11
    362c:	08 95       	ret

0000362e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    362e:	08 95       	ret

00003630 <__divmodhi4>:
    3630:	97 fb       	bst	r25, 7
    3632:	07 2e       	mov	r0, r23
    3634:	16 f4       	brtc	.+4      	; 0x363a <__divmodhi4+0xa>
    3636:	00 94       	com	r0
    3638:	07 d0       	rcall	.+14     	; 0x3648 <__divmodhi4_neg1>
    363a:	77 fd       	sbrc	r23, 7
    363c:	09 d0       	rcall	.+18     	; 0x3650 <__divmodhi4_neg2>
    363e:	0e 94 4e 1b 	call	0x369c	; 0x369c <__udivmodhi4>
    3642:	07 fc       	sbrc	r0, 7
    3644:	05 d0       	rcall	.+10     	; 0x3650 <__divmodhi4_neg2>
    3646:	3e f4       	brtc	.+14     	; 0x3656 <__divmodhi4_exit>

00003648 <__divmodhi4_neg1>:
    3648:	90 95       	com	r25
    364a:	81 95       	neg	r24
    364c:	9f 4f       	sbci	r25, 0xFF	; 255
    364e:	08 95       	ret

00003650 <__divmodhi4_neg2>:
    3650:	70 95       	com	r23
    3652:	61 95       	neg	r22
    3654:	7f 4f       	sbci	r23, 0xFF	; 255

00003656 <__divmodhi4_exit>:
    3656:	08 95       	ret

00003658 <__udivmodsi4>:
    3658:	a1 e2       	ldi	r26, 0x21	; 33
    365a:	1a 2e       	mov	r1, r26
    365c:	aa 1b       	sub	r26, r26
    365e:	bb 1b       	sub	r27, r27
    3660:	fd 01       	movw	r30, r26
    3662:	0d c0       	rjmp	.+26     	; 0x367e <__udivmodsi4_ep>

00003664 <__udivmodsi4_loop>:
    3664:	aa 1f       	adc	r26, r26
    3666:	bb 1f       	adc	r27, r27
    3668:	ee 1f       	adc	r30, r30
    366a:	ff 1f       	adc	r31, r31
    366c:	a2 17       	cp	r26, r18
    366e:	b3 07       	cpc	r27, r19
    3670:	e4 07       	cpc	r30, r20
    3672:	f5 07       	cpc	r31, r21
    3674:	20 f0       	brcs	.+8      	; 0x367e <__udivmodsi4_ep>
    3676:	a2 1b       	sub	r26, r18
    3678:	b3 0b       	sbc	r27, r19
    367a:	e4 0b       	sbc	r30, r20
    367c:	f5 0b       	sbc	r31, r21

0000367e <__udivmodsi4_ep>:
    367e:	66 1f       	adc	r22, r22
    3680:	77 1f       	adc	r23, r23
    3682:	88 1f       	adc	r24, r24
    3684:	99 1f       	adc	r25, r25
    3686:	1a 94       	dec	r1
    3688:	69 f7       	brne	.-38     	; 0x3664 <__udivmodsi4_loop>
    368a:	60 95       	com	r22
    368c:	70 95       	com	r23
    368e:	80 95       	com	r24
    3690:	90 95       	com	r25
    3692:	9b 01       	movw	r18, r22
    3694:	ac 01       	movw	r20, r24
    3696:	bd 01       	movw	r22, r26
    3698:	cf 01       	movw	r24, r30
    369a:	08 95       	ret

0000369c <__udivmodhi4>:
    369c:	aa 1b       	sub	r26, r26
    369e:	bb 1b       	sub	r27, r27
    36a0:	51 e1       	ldi	r21, 0x11	; 17
    36a2:	07 c0       	rjmp	.+14     	; 0x36b2 <__udivmodhi4_ep>

000036a4 <__udivmodhi4_loop>:
    36a4:	aa 1f       	adc	r26, r26
    36a6:	bb 1f       	adc	r27, r27
    36a8:	a6 17       	cp	r26, r22
    36aa:	b7 07       	cpc	r27, r23
    36ac:	10 f0       	brcs	.+4      	; 0x36b2 <__udivmodhi4_ep>
    36ae:	a6 1b       	sub	r26, r22
    36b0:	b7 0b       	sbc	r27, r23

000036b2 <__udivmodhi4_ep>:
    36b2:	88 1f       	adc	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	5a 95       	dec	r21
    36b8:	a9 f7       	brne	.-22     	; 0x36a4 <__udivmodhi4_loop>
    36ba:	80 95       	com	r24
    36bc:	90 95       	com	r25
    36be:	bc 01       	movw	r22, r24
    36c0:	cd 01       	movw	r24, r26
    36c2:	08 95       	ret

000036c4 <__tablejump2__>:
    36c4:	ee 0f       	add	r30, r30
    36c6:	ff 1f       	adc	r31, r31
    36c8:	05 90       	lpm	r0, Z+
    36ca:	f4 91       	lpm	r31, Z
    36cc:	e0 2d       	mov	r30, r0
    36ce:	09 94       	ijmp

000036d0 <malloc>:
    36d0:	0f 93       	push	r16
    36d2:	1f 93       	push	r17
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	82 30       	cpi	r24, 0x02	; 2
    36da:	91 05       	cpc	r25, r1
    36dc:	10 f4       	brcc	.+4      	; 0x36e2 <malloc+0x12>
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <__flp>
    36e6:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <__flp+0x1>
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	a0 e0       	ldi	r26, 0x00	; 0
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	30 97       	sbiw	r30, 0x00	; 0
    36f4:	19 f1       	breq	.+70     	; 0x373c <malloc+0x6c>
    36f6:	40 81       	ld	r20, Z
    36f8:	51 81       	ldd	r21, Z+1	; 0x01
    36fa:	02 81       	ldd	r16, Z+2	; 0x02
    36fc:	13 81       	ldd	r17, Z+3	; 0x03
    36fe:	48 17       	cp	r20, r24
    3700:	59 07       	cpc	r21, r25
    3702:	c8 f0       	brcs	.+50     	; 0x3736 <malloc+0x66>
    3704:	84 17       	cp	r24, r20
    3706:	95 07       	cpc	r25, r21
    3708:	69 f4       	brne	.+26     	; 0x3724 <malloc+0x54>
    370a:	10 97       	sbiw	r26, 0x00	; 0
    370c:	31 f0       	breq	.+12     	; 0x371a <malloc+0x4a>
    370e:	12 96       	adiw	r26, 0x02	; 2
    3710:	0c 93       	st	X, r16
    3712:	12 97       	sbiw	r26, 0x02	; 2
    3714:	13 96       	adiw	r26, 0x03	; 3
    3716:	1c 93       	st	X, r17
    3718:	27 c0       	rjmp	.+78     	; 0x3768 <malloc+0x98>
    371a:	00 93 a7 02 	sts	0x02A7, r16	; 0x8002a7 <__flp>
    371e:	10 93 a8 02 	sts	0x02A8, r17	; 0x8002a8 <__flp+0x1>
    3722:	22 c0       	rjmp	.+68     	; 0x3768 <malloc+0x98>
    3724:	21 15       	cp	r18, r1
    3726:	31 05       	cpc	r19, r1
    3728:	19 f0       	breq	.+6      	; 0x3730 <malloc+0x60>
    372a:	42 17       	cp	r20, r18
    372c:	53 07       	cpc	r21, r19
    372e:	18 f4       	brcc	.+6      	; 0x3736 <malloc+0x66>
    3730:	9a 01       	movw	r18, r20
    3732:	bd 01       	movw	r22, r26
    3734:	ef 01       	movw	r28, r30
    3736:	df 01       	movw	r26, r30
    3738:	f8 01       	movw	r30, r16
    373a:	db cf       	rjmp	.-74     	; 0x36f2 <malloc+0x22>
    373c:	21 15       	cp	r18, r1
    373e:	31 05       	cpc	r19, r1
    3740:	f9 f0       	breq	.+62     	; 0x3780 <malloc+0xb0>
    3742:	28 1b       	sub	r18, r24
    3744:	39 0b       	sbc	r19, r25
    3746:	24 30       	cpi	r18, 0x04	; 4
    3748:	31 05       	cpc	r19, r1
    374a:	80 f4       	brcc	.+32     	; 0x376c <malloc+0x9c>
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	9b 81       	ldd	r25, Y+3	; 0x03
    3750:	61 15       	cp	r22, r1
    3752:	71 05       	cpc	r23, r1
    3754:	21 f0       	breq	.+8      	; 0x375e <malloc+0x8e>
    3756:	fb 01       	movw	r30, r22
    3758:	93 83       	std	Z+3, r25	; 0x03
    375a:	82 83       	std	Z+2, r24	; 0x02
    375c:	04 c0       	rjmp	.+8      	; 0x3766 <malloc+0x96>
    375e:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <__flp+0x1>
    3762:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <__flp>
    3766:	fe 01       	movw	r30, r28
    3768:	32 96       	adiw	r30, 0x02	; 2
    376a:	44 c0       	rjmp	.+136    	; 0x37f4 <malloc+0x124>
    376c:	fe 01       	movw	r30, r28
    376e:	e2 0f       	add	r30, r18
    3770:	f3 1f       	adc	r31, r19
    3772:	81 93       	st	Z+, r24
    3774:	91 93       	st	Z+, r25
    3776:	22 50       	subi	r18, 0x02	; 2
    3778:	31 09       	sbc	r19, r1
    377a:	39 83       	std	Y+1, r19	; 0x01
    377c:	28 83       	st	Y, r18
    377e:	3a c0       	rjmp	.+116    	; 0x37f4 <malloc+0x124>
    3780:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    3784:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    3788:	23 2b       	or	r18, r19
    378a:	41 f4       	brne	.+16     	; 0x379c <malloc+0xcc>
    378c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3790:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3794:	30 93 a6 02 	sts	0x02A6, r19	; 0x8002a6 <__brkval+0x1>
    3798:	20 93 a5 02 	sts	0x02A5, r18	; 0x8002a5 <__brkval>
    379c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    37a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    37a4:	21 15       	cp	r18, r1
    37a6:	31 05       	cpc	r19, r1
    37a8:	41 f4       	brne	.+16     	; 0x37ba <malloc+0xea>
    37aa:	2d b7       	in	r18, 0x3d	; 61
    37ac:	3e b7       	in	r19, 0x3e	; 62
    37ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    37b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    37b6:	24 1b       	sub	r18, r20
    37b8:	35 0b       	sbc	r19, r21
    37ba:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <__brkval>
    37be:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <__brkval+0x1>
    37c2:	e2 17       	cp	r30, r18
    37c4:	f3 07       	cpc	r31, r19
    37c6:	a0 f4       	brcc	.+40     	; 0x37f0 <malloc+0x120>
    37c8:	2e 1b       	sub	r18, r30
    37ca:	3f 0b       	sbc	r19, r31
    37cc:	28 17       	cp	r18, r24
    37ce:	39 07       	cpc	r19, r25
    37d0:	78 f0       	brcs	.+30     	; 0x37f0 <malloc+0x120>
    37d2:	ac 01       	movw	r20, r24
    37d4:	4e 5f       	subi	r20, 0xFE	; 254
    37d6:	5f 4f       	sbci	r21, 0xFF	; 255
    37d8:	24 17       	cp	r18, r20
    37da:	35 07       	cpc	r19, r21
    37dc:	48 f0       	brcs	.+18     	; 0x37f0 <malloc+0x120>
    37de:	4e 0f       	add	r20, r30
    37e0:	5f 1f       	adc	r21, r31
    37e2:	50 93 a6 02 	sts	0x02A6, r21	; 0x8002a6 <__brkval+0x1>
    37e6:	40 93 a5 02 	sts	0x02A5, r20	; 0x8002a5 <__brkval>
    37ea:	81 93       	st	Z+, r24
    37ec:	91 93       	st	Z+, r25
    37ee:	02 c0       	rjmp	.+4      	; 0x37f4 <malloc+0x124>
    37f0:	e0 e0       	ldi	r30, 0x00	; 0
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	cf 01       	movw	r24, r30
    37f6:	df 91       	pop	r29
    37f8:	cf 91       	pop	r28
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	08 95       	ret

00003800 <free>:
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
    3804:	00 97       	sbiw	r24, 0x00	; 0
    3806:	09 f4       	brne	.+2      	; 0x380a <free+0xa>
    3808:	81 c0       	rjmp	.+258    	; 0x390c <free+0x10c>
    380a:	fc 01       	movw	r30, r24
    380c:	32 97       	sbiw	r30, 0x02	; 2
    380e:	13 82       	std	Z+3, r1	; 0x03
    3810:	12 82       	std	Z+2, r1	; 0x02
    3812:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <__flp>
    3816:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <__flp+0x1>
    381a:	10 97       	sbiw	r26, 0x00	; 0
    381c:	81 f4       	brne	.+32     	; 0x383e <free+0x3e>
    381e:	20 81       	ld	r18, Z
    3820:	31 81       	ldd	r19, Z+1	; 0x01
    3822:	82 0f       	add	r24, r18
    3824:	93 1f       	adc	r25, r19
    3826:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    382a:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    382e:	28 17       	cp	r18, r24
    3830:	39 07       	cpc	r19, r25
    3832:	51 f5       	brne	.+84     	; 0x3888 <free+0x88>
    3834:	f0 93 a6 02 	sts	0x02A6, r31	; 0x8002a6 <__brkval+0x1>
    3838:	e0 93 a5 02 	sts	0x02A5, r30	; 0x8002a5 <__brkval>
    383c:	67 c0       	rjmp	.+206    	; 0x390c <free+0x10c>
    383e:	ed 01       	movw	r28, r26
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	ce 17       	cp	r28, r30
    3846:	df 07       	cpc	r29, r31
    3848:	40 f4       	brcc	.+16     	; 0x385a <free+0x5a>
    384a:	4a 81       	ldd	r20, Y+2	; 0x02
    384c:	5b 81       	ldd	r21, Y+3	; 0x03
    384e:	9e 01       	movw	r18, r28
    3850:	41 15       	cp	r20, r1
    3852:	51 05       	cpc	r21, r1
    3854:	f1 f0       	breq	.+60     	; 0x3892 <free+0x92>
    3856:	ea 01       	movw	r28, r20
    3858:	f5 cf       	rjmp	.-22     	; 0x3844 <free+0x44>
    385a:	d3 83       	std	Z+3, r29	; 0x03
    385c:	c2 83       	std	Z+2, r28	; 0x02
    385e:	40 81       	ld	r20, Z
    3860:	51 81       	ldd	r21, Z+1	; 0x01
    3862:	84 0f       	add	r24, r20
    3864:	95 1f       	adc	r25, r21
    3866:	c8 17       	cp	r28, r24
    3868:	d9 07       	cpc	r29, r25
    386a:	59 f4       	brne	.+22     	; 0x3882 <free+0x82>
    386c:	88 81       	ld	r24, Y
    386e:	99 81       	ldd	r25, Y+1	; 0x01
    3870:	84 0f       	add	r24, r20
    3872:	95 1f       	adc	r25, r21
    3874:	02 96       	adiw	r24, 0x02	; 2
    3876:	91 83       	std	Z+1, r25	; 0x01
    3878:	80 83       	st	Z, r24
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	9b 81       	ldd	r25, Y+3	; 0x03
    387e:	93 83       	std	Z+3, r25	; 0x03
    3880:	82 83       	std	Z+2, r24	; 0x02
    3882:	21 15       	cp	r18, r1
    3884:	31 05       	cpc	r19, r1
    3886:	29 f4       	brne	.+10     	; 0x3892 <free+0x92>
    3888:	f0 93 a8 02 	sts	0x02A8, r31	; 0x8002a8 <__flp+0x1>
    388c:	e0 93 a7 02 	sts	0x02A7, r30	; 0x8002a7 <__flp>
    3890:	3d c0       	rjmp	.+122    	; 0x390c <free+0x10c>
    3892:	e9 01       	movw	r28, r18
    3894:	fb 83       	std	Y+3, r31	; 0x03
    3896:	ea 83       	std	Y+2, r30	; 0x02
    3898:	49 91       	ld	r20, Y+
    389a:	59 91       	ld	r21, Y+
    389c:	c4 0f       	add	r28, r20
    389e:	d5 1f       	adc	r29, r21
    38a0:	ec 17       	cp	r30, r28
    38a2:	fd 07       	cpc	r31, r29
    38a4:	61 f4       	brne	.+24     	; 0x38be <free+0xbe>
    38a6:	80 81       	ld	r24, Z
    38a8:	91 81       	ldd	r25, Z+1	; 0x01
    38aa:	84 0f       	add	r24, r20
    38ac:	95 1f       	adc	r25, r21
    38ae:	02 96       	adiw	r24, 0x02	; 2
    38b0:	e9 01       	movw	r28, r18
    38b2:	99 83       	std	Y+1, r25	; 0x01
    38b4:	88 83       	st	Y, r24
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	9b 83       	std	Y+3, r25	; 0x03
    38bc:	8a 83       	std	Y+2, r24	; 0x02
    38be:	e0 e0       	ldi	r30, 0x00	; 0
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	12 96       	adiw	r26, 0x02	; 2
    38c4:	8d 91       	ld	r24, X+
    38c6:	9c 91       	ld	r25, X
    38c8:	13 97       	sbiw	r26, 0x03	; 3
    38ca:	00 97       	sbiw	r24, 0x00	; 0
    38cc:	19 f0       	breq	.+6      	; 0x38d4 <free+0xd4>
    38ce:	fd 01       	movw	r30, r26
    38d0:	dc 01       	movw	r26, r24
    38d2:	f7 cf       	rjmp	.-18     	; 0x38c2 <free+0xc2>
    38d4:	8d 91       	ld	r24, X+
    38d6:	9c 91       	ld	r25, X
    38d8:	11 97       	sbiw	r26, 0x01	; 1
    38da:	9d 01       	movw	r18, r26
    38dc:	2e 5f       	subi	r18, 0xFE	; 254
    38de:	3f 4f       	sbci	r19, 0xFF	; 255
    38e0:	82 0f       	add	r24, r18
    38e2:	93 1f       	adc	r25, r19
    38e4:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__brkval>
    38e8:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__brkval+0x1>
    38ec:	28 17       	cp	r18, r24
    38ee:	39 07       	cpc	r19, r25
    38f0:	69 f4       	brne	.+26     	; 0x390c <free+0x10c>
    38f2:	30 97       	sbiw	r30, 0x00	; 0
    38f4:	29 f4       	brne	.+10     	; 0x3900 <free+0x100>
    38f6:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <__flp+0x1>
    38fa:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <__flp>
    38fe:	02 c0       	rjmp	.+4      	; 0x3904 <free+0x104>
    3900:	13 82       	std	Z+3, r1	; 0x03
    3902:	12 82       	std	Z+2, r1	; 0x02
    3904:	b0 93 a6 02 	sts	0x02A6, r27	; 0x8002a6 <__brkval+0x1>
    3908:	a0 93 a5 02 	sts	0x02A5, r26	; 0x8002a5 <__brkval>
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	08 95       	ret

00003912 <realloc>:
    3912:	a0 e0       	ldi	r26, 0x00	; 0
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	ef e8       	ldi	r30, 0x8F	; 143
    3918:	fc e1       	ldi	r31, 0x1C	; 28
    391a:	0c 94 79 1d 	jmp	0x3af2	; 0x3af2 <__prologue_saves__+0x8>
    391e:	ec 01       	movw	r28, r24
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	21 f4       	brne	.+8      	; 0x392c <realloc+0x1a>
    3924:	cb 01       	movw	r24, r22
    3926:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <malloc>
    392a:	b4 c0       	rjmp	.+360    	; 0x3a94 <realloc+0x182>
    392c:	fc 01       	movw	r30, r24
    392e:	e6 0f       	add	r30, r22
    3930:	f7 1f       	adc	r31, r23
    3932:	9c 01       	movw	r18, r24
    3934:	22 50       	subi	r18, 0x02	; 2
    3936:	31 09       	sbc	r19, r1
    3938:	e2 17       	cp	r30, r18
    393a:	f3 07       	cpc	r31, r19
    393c:	08 f4       	brcc	.+2      	; 0x3940 <realloc+0x2e>
    393e:	a8 c0       	rjmp	.+336    	; 0x3a90 <realloc+0x17e>
    3940:	d9 01       	movw	r26, r18
    3942:	0d 91       	ld	r16, X+
    3944:	1c 91       	ld	r17, X
    3946:	11 97       	sbiw	r26, 0x01	; 1
    3948:	06 17       	cp	r16, r22
    394a:	17 07       	cpc	r17, r23
    394c:	b0 f0       	brcs	.+44     	; 0x397a <realloc+0x68>
    394e:	05 30       	cpi	r16, 0x05	; 5
    3950:	11 05       	cpc	r17, r1
    3952:	08 f4       	brcc	.+2      	; 0x3956 <realloc+0x44>
    3954:	9b c0       	rjmp	.+310    	; 0x3a8c <realloc+0x17a>
    3956:	c8 01       	movw	r24, r16
    3958:	04 97       	sbiw	r24, 0x04	; 4
    395a:	86 17       	cp	r24, r22
    395c:	97 07       	cpc	r25, r23
    395e:	08 f4       	brcc	.+2      	; 0x3962 <realloc+0x50>
    3960:	95 c0       	rjmp	.+298    	; 0x3a8c <realloc+0x17a>
    3962:	02 50       	subi	r16, 0x02	; 2
    3964:	11 09       	sbc	r17, r1
    3966:	06 1b       	sub	r16, r22
    3968:	17 0b       	sbc	r17, r23
    396a:	01 93       	st	Z+, r16
    396c:	11 93       	st	Z+, r17
    396e:	6d 93       	st	X+, r22
    3970:	7c 93       	st	X, r23
    3972:	cf 01       	movw	r24, r30
    3974:	0e 94 00 1c 	call	0x3800	; 0x3800 <free>
    3978:	89 c0       	rjmp	.+274    	; 0x3a8c <realloc+0x17a>
    397a:	5b 01       	movw	r10, r22
    397c:	a0 1a       	sub	r10, r16
    397e:	b1 0a       	sbc	r11, r17
    3980:	4c 01       	movw	r8, r24
    3982:	80 0e       	add	r8, r16
    3984:	91 1e       	adc	r9, r17
    3986:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <__flp>
    398a:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <__flp+0x1>
    398e:	61 2c       	mov	r6, r1
    3990:	71 2c       	mov	r7, r1
    3992:	e1 2c       	mov	r14, r1
    3994:	f1 2c       	mov	r15, r1
    3996:	10 97       	sbiw	r26, 0x00	; 0
    3998:	09 f4       	brne	.+2      	; 0x399c <realloc+0x8a>
    399a:	46 c0       	rjmp	.+140    	; 0x3a28 <realloc+0x116>
    399c:	8d 91       	ld	r24, X+
    399e:	9c 91       	ld	r25, X
    39a0:	11 97       	sbiw	r26, 0x01	; 1
    39a2:	a8 15       	cp	r26, r8
    39a4:	b9 05       	cpc	r27, r9
    39a6:	b1 f5       	brne	.+108    	; 0x3a14 <realloc+0x102>
    39a8:	6c 01       	movw	r12, r24
    39aa:	42 e0       	ldi	r20, 0x02	; 2
    39ac:	c4 0e       	add	r12, r20
    39ae:	d1 1c       	adc	r13, r1
    39b0:	ca 14       	cp	r12, r10
    39b2:	db 04       	cpc	r13, r11
    39b4:	78 f1       	brcs	.+94     	; 0x3a14 <realloc+0x102>
    39b6:	4c 01       	movw	r8, r24
    39b8:	8a 18       	sub	r8, r10
    39ba:	9b 08       	sbc	r9, r11
    39bc:	64 01       	movw	r12, r8
    39be:	42 e0       	ldi	r20, 0x02	; 2
    39c0:	c4 0e       	add	r12, r20
    39c2:	d1 1c       	adc	r13, r1
    39c4:	12 96       	adiw	r26, 0x02	; 2
    39c6:	bc 90       	ld	r11, X
    39c8:	12 97       	sbiw	r26, 0x02	; 2
    39ca:	13 96       	adiw	r26, 0x03	; 3
    39cc:	ac 91       	ld	r26, X
    39ce:	b5 e0       	ldi	r27, 0x05	; 5
    39d0:	cb 16       	cp	r12, r27
    39d2:	d1 04       	cpc	r13, r1
    39d4:	40 f0       	brcs	.+16     	; 0x39e6 <realloc+0xd4>
    39d6:	b2 82       	std	Z+2, r11	; 0x02
    39d8:	a3 83       	std	Z+3, r26	; 0x03
    39da:	91 82       	std	Z+1, r9	; 0x01
    39dc:	80 82       	st	Z, r8
    39de:	d9 01       	movw	r26, r18
    39e0:	6d 93       	st	X+, r22
    39e2:	7c 93       	st	X, r23
    39e4:	09 c0       	rjmp	.+18     	; 0x39f8 <realloc+0xe6>
    39e6:	0e 5f       	subi	r16, 0xFE	; 254
    39e8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ea:	80 0f       	add	r24, r16
    39ec:	91 1f       	adc	r25, r17
    39ee:	f9 01       	movw	r30, r18
    39f0:	91 83       	std	Z+1, r25	; 0x01
    39f2:	80 83       	st	Z, r24
    39f4:	eb 2d       	mov	r30, r11
    39f6:	fa 2f       	mov	r31, r26
    39f8:	e1 14       	cp	r14, r1
    39fa:	f1 04       	cpc	r15, r1
    39fc:	31 f0       	breq	.+12     	; 0x3a0a <realloc+0xf8>
    39fe:	d7 01       	movw	r26, r14
    3a00:	13 96       	adiw	r26, 0x03	; 3
    3a02:	fc 93       	st	X, r31
    3a04:	ee 93       	st	-X, r30
    3a06:	12 97       	sbiw	r26, 0x02	; 2
    3a08:	41 c0       	rjmp	.+130    	; 0x3a8c <realloc+0x17a>
    3a0a:	f0 93 a8 02 	sts	0x02A8, r31	; 0x8002a8 <__flp+0x1>
    3a0e:	e0 93 a7 02 	sts	0x02A7, r30	; 0x8002a7 <__flp>
    3a12:	3c c0       	rjmp	.+120    	; 0x3a8c <realloc+0x17a>
    3a14:	68 16       	cp	r6, r24
    3a16:	79 06       	cpc	r7, r25
    3a18:	08 f4       	brcc	.+2      	; 0x3a1c <realloc+0x10a>
    3a1a:	3c 01       	movw	r6, r24
    3a1c:	7d 01       	movw	r14, r26
    3a1e:	12 96       	adiw	r26, 0x02	; 2
    3a20:	0d 90       	ld	r0, X+
    3a22:	bc 91       	ld	r27, X
    3a24:	a0 2d       	mov	r26, r0
    3a26:	b7 cf       	rjmp	.-146    	; 0x3996 <realloc+0x84>
    3a28:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <__brkval>
    3a2c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <__brkval+0x1>
    3a30:	88 16       	cp	r8, r24
    3a32:	99 06       	cpc	r9, r25
    3a34:	e1 f4       	brne	.+56     	; 0x3a6e <realloc+0x15c>
    3a36:	66 16       	cp	r6, r22
    3a38:	77 06       	cpc	r7, r23
    3a3a:	c8 f4       	brcc	.+50     	; 0x3a6e <realloc+0x15c>
    3a3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3a40:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	41 f4       	brne	.+16     	; 0x3a58 <realloc+0x146>
    3a48:	8d b7       	in	r24, 0x3d	; 61
    3a4a:	9e b7       	in	r25, 0x3e	; 62
    3a4c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3a50:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3a54:	84 1b       	sub	r24, r20
    3a56:	95 0b       	sbc	r25, r21
    3a58:	e8 17       	cp	r30, r24
    3a5a:	f9 07       	cpc	r31, r25
    3a5c:	c8 f4       	brcc	.+50     	; 0x3a90 <realloc+0x17e>
    3a5e:	f0 93 a6 02 	sts	0x02A6, r31	; 0x8002a6 <__brkval+0x1>
    3a62:	e0 93 a5 02 	sts	0x02A5, r30	; 0x8002a5 <__brkval>
    3a66:	f9 01       	movw	r30, r18
    3a68:	71 83       	std	Z+1, r23	; 0x01
    3a6a:	60 83       	st	Z, r22
    3a6c:	0f c0       	rjmp	.+30     	; 0x3a8c <realloc+0x17a>
    3a6e:	cb 01       	movw	r24, r22
    3a70:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <malloc>
    3a74:	7c 01       	movw	r14, r24
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	59 f0       	breq	.+22     	; 0x3a90 <realloc+0x17e>
    3a7a:	a8 01       	movw	r20, r16
    3a7c:	be 01       	movw	r22, r28
    3a7e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <memcpy>
    3a82:	ce 01       	movw	r24, r28
    3a84:	0e 94 00 1c 	call	0x3800	; 0x3800 <free>
    3a88:	c7 01       	movw	r24, r14
    3a8a:	04 c0       	rjmp	.+8      	; 0x3a94 <realloc+0x182>
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <realloc+0x182>
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	ee e0       	ldi	r30, 0x0E	; 14
    3a9a:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__epilogue_restores__+0x8>

00003a9e <memcpy>:
    3a9e:	fb 01       	movw	r30, r22
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	02 c0       	rjmp	.+4      	; 0x3aa8 <memcpy+0xa>
    3aa4:	01 90       	ld	r0, Z+
    3aa6:	0d 92       	st	X+, r0
    3aa8:	41 50       	subi	r20, 0x01	; 1
    3aaa:	50 40       	sbci	r21, 0x00	; 0
    3aac:	d8 f7       	brcc	.-10     	; 0x3aa4 <memcpy+0x6>
    3aae:	08 95       	ret

00003ab0 <strcpy>:
    3ab0:	fb 01       	movw	r30, r22
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	01 90       	ld	r0, Z+
    3ab6:	0d 92       	st	X+, r0
    3ab8:	00 20       	and	r0, r0
    3aba:	e1 f7       	brne	.-8      	; 0x3ab4 <strcpy+0x4>
    3abc:	08 95       	ret

00003abe <eeprom_read_byte>:
    3abe:	f9 99       	sbic	0x1f, 1	; 31
    3ac0:	fe cf       	rjmp	.-4      	; 0x3abe <eeprom_read_byte>
    3ac2:	92 bd       	out	0x22, r25	; 34
    3ac4:	81 bd       	out	0x21, r24	; 33
    3ac6:	f8 9a       	sbi	0x1f, 0	; 31
    3ac8:	99 27       	eor	r25, r25
    3aca:	80 b5       	in	r24, 0x20	; 32
    3acc:	08 95       	ret

00003ace <eeprom_write_byte>:
    3ace:	26 2f       	mov	r18, r22

00003ad0 <eeprom_write_r18>:
    3ad0:	f9 99       	sbic	0x1f, 1	; 31
    3ad2:	fe cf       	rjmp	.-4      	; 0x3ad0 <eeprom_write_r18>
    3ad4:	1f ba       	out	0x1f, r1	; 31
    3ad6:	92 bd       	out	0x22, r25	; 34
    3ad8:	81 bd       	out	0x21, r24	; 33
    3ada:	20 bd       	out	0x20, r18	; 32
    3adc:	0f b6       	in	r0, 0x3f	; 63
    3ade:	f8 94       	cli
    3ae0:	fa 9a       	sbi	0x1f, 2	; 31
    3ae2:	f9 9a       	sbi	0x1f, 1	; 31
    3ae4:	0f be       	out	0x3f, r0	; 63
    3ae6:	01 96       	adiw	r24, 0x01	; 1
    3ae8:	08 95       	ret

00003aea <__prologue_saves__>:
    3aea:	2f 92       	push	r2
    3aec:	3f 92       	push	r3
    3aee:	4f 92       	push	r4
    3af0:	5f 92       	push	r5
    3af2:	6f 92       	push	r6
    3af4:	7f 92       	push	r7
    3af6:	8f 92       	push	r8
    3af8:	9f 92       	push	r9
    3afa:	af 92       	push	r10
    3afc:	bf 92       	push	r11
    3afe:	cf 92       	push	r12
    3b00:	df 92       	push	r13
    3b02:	ef 92       	push	r14
    3b04:	ff 92       	push	r15
    3b06:	0f 93       	push	r16
    3b08:	1f 93       	push	r17
    3b0a:	cf 93       	push	r28
    3b0c:	df 93       	push	r29
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	ca 1b       	sub	r28, r26
    3b14:	db 0b       	sbc	r29, r27
    3b16:	0f b6       	in	r0, 0x3f	; 63
    3b18:	f8 94       	cli
    3b1a:	de bf       	out	0x3e, r29	; 62
    3b1c:	0f be       	out	0x3f, r0	; 63
    3b1e:	cd bf       	out	0x3d, r28	; 61
    3b20:	09 94       	ijmp

00003b22 <__epilogue_restores__>:
    3b22:	2a 88       	ldd	r2, Y+18	; 0x12
    3b24:	39 88       	ldd	r3, Y+17	; 0x11
    3b26:	48 88       	ldd	r4, Y+16	; 0x10
    3b28:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b30:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b32:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b34:	b9 84       	ldd	r11, Y+9	; 0x09
    3b36:	c8 84       	ldd	r12, Y+8	; 0x08
    3b38:	df 80       	ldd	r13, Y+7	; 0x07
    3b3a:	ee 80       	ldd	r14, Y+6	; 0x06
    3b3c:	fd 80       	ldd	r15, Y+5	; 0x05
    3b3e:	0c 81       	ldd	r16, Y+4	; 0x04
    3b40:	1b 81       	ldd	r17, Y+3	; 0x03
    3b42:	aa 81       	ldd	r26, Y+2	; 0x02
    3b44:	b9 81       	ldd	r27, Y+1	; 0x01
    3b46:	ce 0f       	add	r28, r30
    3b48:	d1 1d       	adc	r29, r1
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	de bf       	out	0x3e, r29	; 62
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	cd bf       	out	0x3d, r28	; 61
    3b54:	ed 01       	movw	r28, r26
    3b56:	08 95       	ret

00003b58 <__do_global_dtors>:
    3b58:	10 e0       	ldi	r17, 0x00	; 0
    3b5a:	c3 e6       	ldi	r28, 0x63	; 99
    3b5c:	d0 e0       	ldi	r29, 0x00	; 0
    3b5e:	04 c0       	rjmp	.+8      	; 0x3b68 <__do_global_dtors+0x10>
    3b60:	fe 01       	movw	r30, r28
    3b62:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__tablejump2__>
    3b66:	21 96       	adiw	r28, 0x01	; 1
    3b68:	c4 36       	cpi	r28, 0x64	; 100
    3b6a:	d1 07       	cpc	r29, r17
    3b6c:	c9 f7       	brne	.-14     	; 0x3b60 <__do_global_dtors+0x8>
    3b6e:	f8 94       	cli

00003b70 <__stop_program>:
    3b70:	ff cf       	rjmp	.-2      	; 0x3b70 <__stop_program>
